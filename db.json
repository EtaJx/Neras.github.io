{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/fun.gif","path":"images/fun.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/my.js","path":"js/src/my.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"07e329aeec291475e5806691b01e2f5d504d688f","modified":1470500645000},{"_id":"themes/hexo-theme-next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1470328931000},{"_id":"themes/hexo-theme-next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1470328931000},{"_id":"themes/hexo-theme-next/README.md","hash":"0b709591995001cd860384d6c189e51d91690714","modified":1470328931000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"1c9eb9117c497888c736a85cb64583c8986d2e66","modified":1470722359000},{"_id":"themes/hexo-theme-next/package.json","hash":"bd016b54983b7e06a649ee915b2e13a60d47553e","modified":1470328931000},{"_id":"source/_posts/.DS_Store","hash":"b8efdec7b35b99a2bbc166839aaef855b1ada412","modified":1470500635000},{"_id":"source/_posts/.whyOurSiteisFasterThanYours.md.swp","hash":"52180f92c3bf778561f9bb6f214e49c83fb0a1aa","modified":1470567758000},{"_id":"source/_posts/SVN的浅尝辄止.md","hash":"4fcbe2213e685772dd8fcb67a9ae8194f50145c3","modified":1470328931000},{"_id":"source/_posts/first-to-vim.md","hash":"ad933926c51f7fae7bb5aff6f08de644e189cb3f","modified":1470503847000},{"_id":"source/_posts/here.md","hash":"ecd310df7b80f4643cf82b5a031a21bd0713c72c","modified":1470328931000},{"_id":"source/_posts/hexo.md","hash":"1db1f97ff35c5357d8b622d68dfb2aa2014f1fa8","modified":1470328931000},{"_id":"source/_posts/hing.md","hash":"99516011e3f17fd400ce443a68ed873232d7e01d","modified":1470417697000},{"_id":"source/_posts/smarty.md","hash":"6eb633a41a8ed7c20dc9f5fb158848f7cb2aa618","modified":1470328931000},{"_id":"source/_posts/studyPlan.md","hash":"f26dc2bc921955d19337dd268ae94eef0ebf0eb0","modified":1470328931000},{"_id":"source/_posts/weekly.md","hash":"62b4e18cb46b8a72764e728fdfcf3ba672bd8755","modified":1470328931000},{"_id":"source/_posts/whyOurSiteisFasterThanYours.md","hash":"27689def80073a45e0a2c1f78ceac5a7ef0c5802","modified":1470567803000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"4c752913837a1c1f9e89c8e4030718b1578145f1","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"0b3f5d1a9e0ce68c532aa4d0d864aeaf3a1025ba","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"38b1ad401b748965369296b86327d23082a1fe93","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1470328931000},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"0674b9bf3103ca32e04f16c7f7a6adad7e32e011","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"8e6a374006ed093ad6fc9d2f28a538e1258fe669","modified":1470723713000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"794797c1957dd708256a5368e38c62d510f2bd86","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"7edcc47b01b60e565b39b2baf3a87c20b61c7eaf","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"67589e1a4c0b7480c529524b73985fce7705e336","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"7ef0267f4964410fe2000d5ce2b1627290c8f4f2","modified":1470417939000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"f12d7b0946d37853caa29009e6d134c2a378ad20","modified":1470328931000},{"_id":"themes/hexo-theme-next/scripts/filters/sticky.js","hash":"6b1ea0c09105352813357d0fff4e1d3f4c821fa3","modified":1470328931000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1470328931000},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1470328931000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","hash":"ecce1650203033990609183f77c9fe5958856822","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/fun.gif","hash":"f4b3f3e82c7f1f41898338fc54229287fa502745","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/bootstrap/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"2b8f8c63abfcc805fad42b1c174cf61b6233d345","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics.swig","hash":"d79bd946f07b83b47926dd67bb9d40e652b94769","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/baidushare.swig","hash":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/mathjax.swig","hash":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"68b6859fb48fe8358e567fc324f218cecfc3a533","modified":1470722520000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"e6488372eacb4c8acbda42ed366e27a6de7693d4","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"72d1fe35024ea91ebfd0298d1fbc8df82abd4ce7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"cca1fe42d49d3946f44b6ef1b247175f16ba796c","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"9815469d0142811f98384b4f7046edaae7a7f3ff","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/my.js","hash":"65845895a31cc0f3b29857099d61a624b00474aa","modified":1470562617000},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"7eb00abf9bc14516463d9f29db41805e808a565c","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/_section/header.styl","hash":"a6aa8a56f9f645ae5a76a1034f79adf73b053aa0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"6fce199d83342aa9964449b8b8264772558336b9","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"8d9b0f37cf0cd1c25e36303041406a8c72caf766","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/posts-expand.styl","hash":"54ef223d6683ad9ed21b24e8091c4dd63001316f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"2432b833add17ddd35aad098bf300d3f951375d2","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"5f766cf26f966dbf9dcfe681f40ab9032e3e8a08","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"1631a430655eadb485574d1a9bedd49460988b11","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"5a8036fc61207ca0fe38c9782ed2f686fbf764be","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"fc7d96b897290dbd93bc8c515a2058fc4c374ea7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"36d707098100abd1ded76a2d016d8c95691b2420","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"159464cb8a7e01e32db9ec70dec391ec70a72f9c","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"eb4f5a0ae12b67d5e9b24056ec5715d03deda856","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"58a036397de73d868fee16f34d246a3d863f30c2","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"dcbfef1c76288620f7f405a7aeba893d458d5b6a","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"b28187c610bf5f05e27732f72c3486494689bbfe","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"5d189b059c0a475917d771b349582dacdd575951","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"6242be4307a3b3dafc14e556f51c8875c41a1ddd","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"23dd966324937deeccc8f5fa16a6d32e4e46243b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"719e09bb2e8fb82183381fadb0708aa761f1e0b4","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-more-link.styl","hash":"5c415dc8efab7c1bdeffacafa3100d1da6628b03","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"01db9373cd13c1aec840205c622064dd6ae03361","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"6533563b34241e5c73da68156aba89e880b93f53","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"1099b5d07a60d93dad6221677c60cba60a82266b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"c946b642bccc7a73c471bf6f119e40f54d0f1663","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1470328931000},{"_id":"public/archives/index.html","hash":"83fa7c2d9e4acc863296b497b1ff4ed2c788bf4b","modified":1470756378253},{"_id":"public/archives/page/2/index.html","hash":"0d98fbeb0f7112d7996e338f7b8ee656f7b58dff","modified":1470756378254},{"_id":"public/archives/2016/index.html","hash":"3059f4f73d1697b65d1997fd980598f15bccf1c7","modified":1470756378254},{"_id":"public/archives/2016/page/2/index.html","hash":"f6f5860d1c9b5ef88170c96d0ee08f19c33fb7fb","modified":1470756378254},{"_id":"public/archives/2016/01/index.html","hash":"58d312e903ba71ccc35fccfb040c104fcb822a51","modified":1470756378254},{"_id":"public/archives/2016/03/index.html","hash":"85089de8d018a983309dda1e38566cc55487e7ec","modified":1470756378254},{"_id":"public/archives/2016/08/index.html","hash":"33726de4121df6c63cc35d92fe46b93fed154875","modified":1470756378254},{"_id":"public/categories/SVN/index.html","hash":"4f863d09df35b26c0d14e1623347e26f91a7d895","modified":1470756378254},{"_id":"public/categories/vim/index.html","hash":"5433cbf7d5c05af63518f8305ebf1586f5e5a93a","modified":1470756378254},{"_id":"public/categories/mylife/index.html","hash":"54879f9680f73d3bf39dba7949d094989850b2a4","modified":1470756378254},{"_id":"public/categories/hexo/index.html","hash":"d433a80e9825f6a796d9e2cdacade9c11116948c","modified":1470756378254},{"_id":"public/categories/smarty/index.html","hash":"f490e7901f50b599146f3989e0027e8550778538","modified":1470756378254},{"_id":"public/categories/life/index.html","hash":"35a1f346ffb94c8bbcbf81ff10e17f6cba99065e","modified":1470756378254},{"_id":"public/tags/SVN/index.html","hash":"f09bea7becda1bd291864787ffad7704274b9a4a","modified":1470756378254},{"_id":"public/tags/vim/index.html","hash":"4621bb52cf2b0837e6d4daa6ee83ed3d433b9b3d","modified":1470756378254},{"_id":"public/tags/my-life/index.html","hash":"c59ab5d40cc8aa6b59ca0450f69432b5740065a2","modified":1470756378254},{"_id":"public/tags/mylife/index.html","hash":"0a8355214f0b8d2a59e39b1fd3d343dca889e4fa","modified":1470756378255},{"_id":"public/tags/hexo/index.html","hash":"a9bacdacd29882847cf590875244d0aca8bc44c2","modified":1470756378255},{"_id":"public/tags/duoshuo/index.html","hash":"5496ecfaa40002679b709d005d339e4245663515","modified":1470756378255},{"_id":"public/tags/搭建自己的博客/index.html","hash":"04277004fdc5c53c14eaf0a228d371525180a844","modified":1470756378255},{"_id":"public/tags/GitHub-Pages/index.html","hash":"644dd6cdf0db277688cbe230b9a867f8dae570ed","modified":1470756378255},{"_id":"public/tags/smarty/index.html","hash":"06fcae8c165bcfe6056d502a738707040b9dfc2d","modified":1470756378255},{"_id":"public/tags/translation/index.html","hash":"57c1cd9a5d04703fa62961c41a02e18dcce48f2b","modified":1470721366770},{"_id":"public/2016/08/07/whyOurSiteisFasterThanYours/index.html","hash":"a7669460b4d7f121ef0d582c5f35f3572578d537","modified":1470721366770},{"_id":"public/2016/08/05/hing/index.html","hash":"b0964424adb086461899c076632ac4915c455fd5","modified":1470756378255},{"_id":"public/2016/08/05/here/index.html","hash":"9376802a13f96f51512c06889c1d438183c636c5","modified":1470756378255},{"_id":"public/2016/03/15/SVN的浅尝辄止/index.html","hash":"aeda3d7ae05195433b527b22c6f9519c55780376","modified":1470756378255},{"_id":"public/2016/03/10/smarty/index.html","hash":"9f6c11faef9286468645b538629e9acf7a37a895","modified":1470756378255},{"_id":"public/2016/01/29/weekly/index.html","hash":"fa42d5df309b8f748a4379dd38f942b7fe954510","modified":1470756378255},{"_id":"public/2016/01/27/hexo/index.html","hash":"26f0459b2b557728517d79e8bf3319f435a07ab0","modified":1470756378255},{"_id":"public/2016/08/07/first-to-vim/index.html","hash":"df696d89079d4b8d6a142ad7a4a0291f92730ea2","modified":1470756378255},{"_id":"public/index.html","hash":"18612479043a0ebbb57ed26213b76b75a16ed147","modified":1470759614298},{"_id":"public/page/2/index.html","hash":"a2ac702e86b7cd157da69be587bff34c52c25470","modified":1470756378255},{"_id":"public/2016/08/09/promise/index.html","hash":"453d16b08a7de0feab0b6d86f1000cc4ee08a3bc","modified":1470759614298},{"_id":"public/categories/primise/index.html","hash":"dd3eb85cb0b3500d1d84cb25d86136129ab042e0","modified":1470756378256},{"_id":"public/tags/promise/index.html","hash":"f7eca85f5d2302c739bb73f27caee61b7b0ef0c9","modified":1470756378256}],"Category":[{"name":"SVN","_id":"cirki359q0003m5nhp8a9css4"},{"name":"vim","_id":"cirki35a10008m5nh0c8aul5h"},{"name":"mylife","_id":"cirki35a6000em5nhaamtn250"},{"name":"hexo","_id":"cirki35ac000km5nh5a21mdza"},{"name":"smarty","_id":"cirki35ae000om5nhisgwfyn9"},{"name":"life","_id":"cirki35ah000sm5nhy9i48yi6"},{"name":"primise","_id":"cirnmdfnk0002nep9eoc96ynx"}],"Data":[],"Page":[],"Post":[{"title":"SVN的浅尝辄止","date":"2016-03-15T13:43:58.000Z","_content":"\n#### SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）\n\n\n* 合并总是在工作副本中进行的。如果想要合并修改到分支，必须检出该分支的工作副本，并且从这个工作副本使用TortoiseSVN-merge来调用合并导向\n\n* 在没有修改的工作副本上执行合并是一个好想法。如果在工作副本上做了修改，先提交。如果合并没有如期的执行，可能需要测小这些修改，用还原会丢弃包含在执行合并之前的所有修改\n\n* 分支的创建\n`Svn copy http://example.com/repos/myproject/trunk  http://example.com/repos/myproject/branches/releaseForAug -m 'create branch for release on now'`为myproject创建了一个分支叫做releaseForAug，使用-m来加入描述信息，之后可以通过`svn checkout http://example.com/repos/myproject/releaseForAug`来迁出你的branche源文件。在上面进行修改和提交\n\n* 合并\n1. 保证当前branch分支是clean的，即使用svn status看不到任何的本地修改\n2. 命令行下切换到Trunk目录中，使用`Svn merge http://example.com/repos/myproject/branches/releaseForAug`来讲Branch分支上的改动merge回Trunk下\n3. 如果出现merge冲突则进行解决，然后执行`Svn ci -m 'description'来提交变动`\n\n* 在merge的时候也可以指定分支上的哪些变更可以合并到Trunk中，命令如下`svn merge http://example.com/repos/myproject/branches/releaseForAug -r150:HEAD`表示将分支的版本从150到当前版本的所有搞懂合并到trunk中\n\n* 查看当前branch和trunk的合并情况，可以使用 `svn mergeinfo branchUrl` 来查看merge情况\n* 目前就这些吧\n\n","source":"_posts/SVN的浅尝辄止.md","raw":"---\ntitle: SVN的浅尝辄止\ndate: 2016-03-15 21:43:58\ntags:\n- SVN\ncategories:\n- SVN\n---\n\n#### SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）\n\n\n* 合并总是在工作副本中进行的。如果想要合并修改到分支，必须检出该分支的工作副本，并且从这个工作副本使用TortoiseSVN-merge来调用合并导向\n\n* 在没有修改的工作副本上执行合并是一个好想法。如果在工作副本上做了修改，先提交。如果合并没有如期的执行，可能需要测小这些修改，用还原会丢弃包含在执行合并之前的所有修改\n\n* 分支的创建\n`Svn copy http://example.com/repos/myproject/trunk  http://example.com/repos/myproject/branches/releaseForAug -m 'create branch for release on now'`为myproject创建了一个分支叫做releaseForAug，使用-m来加入描述信息，之后可以通过`svn checkout http://example.com/repos/myproject/releaseForAug`来迁出你的branche源文件。在上面进行修改和提交\n\n* 合并\n1. 保证当前branch分支是clean的，即使用svn status看不到任何的本地修改\n2. 命令行下切换到Trunk目录中，使用`Svn merge http://example.com/repos/myproject/branches/releaseForAug`来讲Branch分支上的改动merge回Trunk下\n3. 如果出现merge冲突则进行解决，然后执行`Svn ci -m 'description'来提交变动`\n\n* 在merge的时候也可以指定分支上的哪些变更可以合并到Trunk中，命令如下`svn merge http://example.com/repos/myproject/branches/releaseForAug -r150:HEAD`表示将分支的版本从150到当前版本的所有搞懂合并到trunk中\n\n* 查看当前branch和trunk的合并情况，可以使用 `svn mergeinfo branchUrl` 来查看merge情况\n* 目前就这些吧\n\n","slug":"SVN的浅尝辄止","published":1,"updated":"2016-08-04T16:42:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirki359d0000m5nhpa340wte","content":"<h4 id=\"SVN的创建以及合并分支（windows命令行-ಥ-ಥ-）\"><a href=\"#SVN的创建以及合并分支（windows命令行-ಥ-ಥ-）\" class=\"headerlink\" title=\"SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）\"></a>SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）</h4><ul>\n<li><p>合并总是在工作副本中进行的。如果想要合并修改到分支，必须检出该分支的工作副本，并且从这个工作副本使用TortoiseSVN-merge来调用合并导向</p>\n</li>\n<li><p>在没有修改的工作副本上执行合并是一个好想法。如果在工作副本上做了修改，先提交。如果合并没有如期的执行，可能需要测小这些修改，用还原会丢弃包含在执行合并之前的所有修改</p>\n</li>\n<li><p>分支的创建<br><code>Svn copy http://example.com/repos/myproject/trunk  http://example.com/repos/myproject/branches/releaseForAug -m &#39;create branch for release on now&#39;</code>为myproject创建了一个分支叫做releaseForAug，使用-m来加入描述信息，之后可以通过<code>svn checkout http://example.com/repos/myproject/releaseForAug</code>来迁出你的branche源文件。在上面进行修改和提交</p>\n</li>\n<li><p>合并</p>\n</li>\n</ul>\n<ol>\n<li>保证当前branch分支是clean的，即使用svn status看不到任何的本地修改</li>\n<li>命令行下切换到Trunk目录中，使用<code>Svn merge http://example.com/repos/myproject/branches/releaseForAug</code>来讲Branch分支上的改动merge回Trunk下</li>\n<li>如果出现merge冲突则进行解决，然后执行<code>Svn ci -m &#39;description&#39;来提交变动</code></li>\n</ol>\n<ul>\n<li><p>在merge的时候也可以指定分支上的哪些变更可以合并到Trunk中，命令如下<code>svn merge http://example.com/repos/myproject/branches/releaseForAug -r150:HEAD</code>表示将分支的版本从150到当前版本的所有搞懂合并到trunk中</p>\n</li>\n<li><p>查看当前branch和trunk的合并情况，可以使用 <code>svn mergeinfo branchUrl</code> 来查看merge情况</p>\n</li>\n<li>目前就这些吧</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"SVN的创建以及合并分支（windows命令行-ಥ-ಥ-）\"><a href=\"#SVN的创建以及合并分支（windows命令行-ಥ-ಥ-）\" class=\"headerlink\" title=\"SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）\"></a>SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）</h4><ul>\n<li><p>合并总是在工作副本中进行的。如果想要合并修改到分支，必须检出该分支的工作副本，并且从这个工作副本使用TortoiseSVN-merge来调用合并导向</p>\n</li>\n<li><p>在没有修改的工作副本上执行合并是一个好想法。如果在工作副本上做了修改，先提交。如果合并没有如期的执行，可能需要测小这些修改，用还原会丢弃包含在执行合并之前的所有修改</p>\n</li>\n<li><p>分支的创建<br><code>Svn copy http://example.com/repos/myproject/trunk  http://example.com/repos/myproject/branches/releaseForAug -m &#39;create branch for release on now&#39;</code>为myproject创建了一个分支叫做releaseForAug，使用-m来加入描述信息，之后可以通过<code>svn checkout http://example.com/repos/myproject/releaseForAug</code>来迁出你的branche源文件。在上面进行修改和提交</p>\n</li>\n<li><p>合并</p>\n</li>\n</ul>\n<ol>\n<li>保证当前branch分支是clean的，即使用svn status看不到任何的本地修改</li>\n<li>命令行下切换到Trunk目录中，使用<code>Svn merge http://example.com/repos/myproject/branches/releaseForAug</code>来讲Branch分支上的改动merge回Trunk下</li>\n<li>如果出现merge冲突则进行解决，然后执行<code>Svn ci -m &#39;description&#39;来提交变动</code></li>\n</ol>\n<ul>\n<li><p>在merge的时候也可以指定分支上的哪些变更可以合并到Trunk中，命令如下<code>svn merge http://example.com/repos/myproject/branches/releaseForAug -r150:HEAD</code>表示将分支的版本从150到当前版本的所有搞懂合并到trunk中</p>\n</li>\n<li><p>查看当前branch和trunk的合并情况，可以使用 <code>svn mergeinfo branchUrl</code> 来查看merge情况</p>\n</li>\n<li>目前就这些吧</li>\n</ul>\n","sticky":0},{"title":"vim的第一次接触","date":"2016-08-06T16:22:41.000Z","_content":"#### vim的以一次接触\n\n废话只有一句，我只是觉得很cool，所以想学会它。\n\n全键盘操作，想想就觉得全身舒坦。\n\n在早些的时候使用github终端的时候一不小心接触到vim这个东西，当是不知道怎么按进去了，然后一脸蒙逼，这个啥？怎么按键盘没啥反应？现在看来，姑且原谅我那个时候的无知了。\n\n网上流传着vim的学习曲线很陡峭，几乎呈九十度，确实有点骇人，我查看了很多教程之类的东西，开篇的时候无非都一句话，学习这玩意儿是很痛苦的，承受得住就是superstar，承受不住还是不要浪费时间，在第一次接触中，我已经有点体会的，来复习一下今天学到的并且记住的几个命令吧。\n\n* :help  查看帮助\n* hjkl 左下上右(边摸索边记住...)\n* :w 写入，姑且这么理解吧\n* :q 退出vim\n* :q! 强制退出，放弃更改\n* :wq 保存并退出\n* :0 回到编辑内容的开头\n* :$ 回到编辑内容的最后\n* :a 在光标后插入(这个还真有点难以马上上手)\n\n不带`:`的\n* dd 删除一行\n* x 删除当前光标所在的一个字符，后面向前删，真不知道我表清楚没有 \n* 0 回到光标说在行的开头\n* $ 回到光标说在行的结尾\n* dw 删除一个单词\n* u 表示undo\n* Ctrl+r 表示redo (这两个的精华还有待更深入的体验...)\n\n今天就这些，熟练的过程是相当的。。。低效率，有点相当于死记硬背的感觉的，但是还是感觉挺有趣的，这篇短小的文章就是vim写的，感觉的是相当的别扭，但是在进步就是好的。\n","source":"_posts/first-to-vim.md","raw":"---\ntitle: vim的第一次接触 \ndate: 2016-08-07 00:22:41\ntags:\n- vim \ncategories:\n- vim \n---\n#### vim的以一次接触\n\n废话只有一句，我只是觉得很cool，所以想学会它。\n\n全键盘操作，想想就觉得全身舒坦。\n\n在早些的时候使用github终端的时候一不小心接触到vim这个东西，当是不知道怎么按进去了，然后一脸蒙逼，这个啥？怎么按键盘没啥反应？现在看来，姑且原谅我那个时候的无知了。\n\n网上流传着vim的学习曲线很陡峭，几乎呈九十度，确实有点骇人，我查看了很多教程之类的东西，开篇的时候无非都一句话，学习这玩意儿是很痛苦的，承受得住就是superstar，承受不住还是不要浪费时间，在第一次接触中，我已经有点体会的，来复习一下今天学到的并且记住的几个命令吧。\n\n* :help  查看帮助\n* hjkl 左下上右(边摸索边记住...)\n* :w 写入，姑且这么理解吧\n* :q 退出vim\n* :q! 强制退出，放弃更改\n* :wq 保存并退出\n* :0 回到编辑内容的开头\n* :$ 回到编辑内容的最后\n* :a 在光标后插入(这个还真有点难以马上上手)\n\n不带`:`的\n* dd 删除一行\n* x 删除当前光标所在的一个字符，后面向前删，真不知道我表清楚没有 \n* 0 回到光标说在行的开头\n* $ 回到光标说在行的结尾\n* dw 删除一个单词\n* u 表示undo\n* Ctrl+r 表示redo (这两个的精华还有待更深入的体验...)\n\n今天就这些，熟练的过程是相当的。。。低效率，有点相当于死记硬背的感觉的，但是还是感觉挺有趣的，这篇短小的文章就是vim写的，感觉的是相当的别扭，但是在进步就是好的。\n","slug":"first-to-vim","published":1,"updated":"2016-08-06T17:17:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirki359j0001m5nhy8eylf81","content":"<h4 id=\"vim的以一次接触\"><a href=\"#vim的以一次接触\" class=\"headerlink\" title=\"vim的以一次接触\"></a>vim的以一次接触</h4><p>废话只有一句，我只是觉得很cool，所以想学会它。</p>\n<p>全键盘操作，想想就觉得全身舒坦。</p>\n<p>在早些的时候使用github终端的时候一不小心接触到vim这个东西，当是不知道怎么按进去了，然后一脸蒙逼，这个啥？怎么按键盘没啥反应？现在看来，姑且原谅我那个时候的无知了。</p>\n<p>网上流传着vim的学习曲线很陡峭，几乎呈九十度，确实有点骇人，我查看了很多教程之类的东西，开篇的时候无非都一句话，学习这玩意儿是很痛苦的，承受得住就是superstar，承受不住还是不要浪费时间，在第一次接触中，我已经有点体会的，来复习一下今天学到的并且记住的几个命令吧。</p>\n<ul>\n<li>:help  查看帮助</li>\n<li>hjkl 左下上右(边摸索边记住…)</li>\n<li>:w 写入，姑且这么理解吧</li>\n<li>:q 退出vim</li>\n<li>:q! 强制退出，放弃更改</li>\n<li>:wq 保存并退出</li>\n<li>:0 回到编辑内容的开头</li>\n<li>:$ 回到编辑内容的最后</li>\n<li>:a 在光标后插入(这个还真有点难以马上上手)</li>\n</ul>\n<p>不带<code>:</code>的</p>\n<ul>\n<li>dd 删除一行</li>\n<li>x 删除当前光标所在的一个字符，后面向前删，真不知道我表清楚没有 </li>\n<li>0 回到光标说在行的开头</li>\n<li>$ 回到光标说在行的结尾</li>\n<li>dw 删除一个单词</li>\n<li>u 表示undo</li>\n<li>Ctrl+r 表示redo (这两个的精华还有待更深入的体验…)</li>\n</ul>\n<p>今天就这些，熟练的过程是相当的。。。低效率，有点相当于死记硬背的感觉的，但是还是感觉挺有趣的，这篇短小的文章就是vim写的，感觉的是相当的别扭，但是在进步就是好的。</p>\n","excerpt":"","more":"<h4 id=\"vim的以一次接触\"><a href=\"#vim的以一次接触\" class=\"headerlink\" title=\"vim的以一次接触\"></a>vim的以一次接触</h4><p>废话只有一句，我只是觉得很cool，所以想学会它。</p>\n<p>全键盘操作，想想就觉得全身舒坦。</p>\n<p>在早些的时候使用github终端的时候一不小心接触到vim这个东西，当是不知道怎么按进去了，然后一脸蒙逼，这个啥？怎么按键盘没啥反应？现在看来，姑且原谅我那个时候的无知了。</p>\n<p>网上流传着vim的学习曲线很陡峭，几乎呈九十度，确实有点骇人，我查看了很多教程之类的东西，开篇的时候无非都一句话，学习这玩意儿是很痛苦的，承受得住就是superstar，承受不住还是不要浪费时间，在第一次接触中，我已经有点体会的，来复习一下今天学到的并且记住的几个命令吧。</p>\n<ul>\n<li>:help  查看帮助</li>\n<li>hjkl 左下上右(边摸索边记住…)</li>\n<li>:w 写入，姑且这么理解吧</li>\n<li>:q 退出vim</li>\n<li>:q! 强制退出，放弃更改</li>\n<li>:wq 保存并退出</li>\n<li>:0 回到编辑内容的开头</li>\n<li>:$ 回到编辑内容的最后</li>\n<li>:a 在光标后插入(这个还真有点难以马上上手)</li>\n</ul>\n<p>不带<code>:</code>的</p>\n<ul>\n<li>dd 删除一行</li>\n<li>x 删除当前光标所在的一个字符，后面向前删，真不知道我表清楚没有 </li>\n<li>0 回到光标说在行的开头</li>\n<li>$ 回到光标说在行的结尾</li>\n<li>dw 删除一个单词</li>\n<li>u 表示undo</li>\n<li>Ctrl+r 表示redo (这两个的精华还有待更深入的体验…)</li>\n</ul>\n<p>今天就这些，熟练的过程是相当的。。。低效率，有点相当于死记硬背的感觉的，但是还是感觉挺有趣的，这篇短小的文章就是vim写的，感觉的是相当的别扭，但是在进步就是好的。</p>\n","sticky":0},{"title":"I am here","_content":"\"Go home or stand up.It’s your fucking choice.Do you still remember the reason why you are here?\"\n\n","source":"_posts/here.md","raw":"---\ntitle: I am here\ntags: \n- my life\n---\n\"Go home or stand up.It’s your fucking choice.Do you still remember the reason why you are here?\"\n\n","slug":"here","published":1,"date":"2016-08-04T16:42:11.000Z","updated":"2016-08-04T16:42:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirki359r0004m5nhffk2g39w","content":"<p>“Go home or stand up.It’s your fucking choice.Do you still remember the reason why you are here?”</p>\n","excerpt":"","more":"<p>“Go home or stand up.It’s your fucking choice.Do you still remember the reason why you are here?”</p>\n","sticky":0},{"title":"我住在32楼的18楼","date":"2016-08-05T14:44:22.000Z","_content":"\n距离上一次更新是好几个月以前，虽然确实有很多事情，但是总来说，就是比较懒。\n\n确实经历了一次比较骇人的变化，从毕业到正式工作；从拿着渣渣的A4的windows笔记本到现在Mac，以及其他的一些经历，总是感觉自己还是一个学生，没有长大，这一切来得确实有些快，措手不及。\n\n我想反思一下自己，总要做出一些改变。\n\n以前自己：懒，拖延，害怕尝试新的东西，有时候会斤斤计较，有点小心机，还有小小的自以为是，耐心也确实不好，对不想理的人就是爱理不理，强行想去说话也没办法，没办法和别人好好的沟通，主观意识略强，情商确实很低，不会做事，不会好好的和别人相处，不会好好的表达自己，事情也做得不够好，明明能力也很低。\n\n很不喜欢那些给别人贴标签的人，而我现在在给自己贴标签，我是否在逐渐成为那个我讨厌的人，我是否会像村上春树说的样要成长为一个不动声色的大人了，我是否会像这样毫无作为的走下去，不甘平凡却屈于平凡，我不觉得这是生活常态，这恐怕是丢失了某些热情。这些都让我感到害怕，却装作一副无所谓的样子，一副努力的样子，安慰自己。\n\n现在每天都给自己洗脑，最好的方式就是将一件事做到极致。我害怕痛苦和失败，更害怕再更久远一点的以后，依旧困在牢笼之中，没有办法和时间来证明我的英勇。二十三年按部就班的过来，循规蹈矩的上学，某种程度上说，已经庸到极致了。\n\n如果不是现在，那是什么时候。\n\n姑娘啊，我想要去开辟我自己的世界了，没办法再继续陪伴你了。我真的很想要你一起来体验我发现的不用世界，也真的很想体验你眼里看到的世界，可是你不愿意，那么希望你也能发现自己的精彩，愿你因爱而欢喜。\n\n若以后还能相遇，我定会不顾一切。\n\n\n\n","source":"_posts/hing.md","raw":"---\ntitle: 我住在32楼的18楼\ndate: 2016-08-05 22:44:22\ntags: \n- mylife\ncategories: \n- mylife\n---\n\n距离上一次更新是好几个月以前，虽然确实有很多事情，但是总来说，就是比较懒。\n\n确实经历了一次比较骇人的变化，从毕业到正式工作；从拿着渣渣的A4的windows笔记本到现在Mac，以及其他的一些经历，总是感觉自己还是一个学生，没有长大，这一切来得确实有些快，措手不及。\n\n我想反思一下自己，总要做出一些改变。\n\n以前自己：懒，拖延，害怕尝试新的东西，有时候会斤斤计较，有点小心机，还有小小的自以为是，耐心也确实不好，对不想理的人就是爱理不理，强行想去说话也没办法，没办法和别人好好的沟通，主观意识略强，情商确实很低，不会做事，不会好好的和别人相处，不会好好的表达自己，事情也做得不够好，明明能力也很低。\n\n很不喜欢那些给别人贴标签的人，而我现在在给自己贴标签，我是否在逐渐成为那个我讨厌的人，我是否会像村上春树说的样要成长为一个不动声色的大人了，我是否会像这样毫无作为的走下去，不甘平凡却屈于平凡，我不觉得这是生活常态，这恐怕是丢失了某些热情。这些都让我感到害怕，却装作一副无所谓的样子，一副努力的样子，安慰自己。\n\n现在每天都给自己洗脑，最好的方式就是将一件事做到极致。我害怕痛苦和失败，更害怕再更久远一点的以后，依旧困在牢笼之中，没有办法和时间来证明我的英勇。二十三年按部就班的过来，循规蹈矩的上学，某种程度上说，已经庸到极致了。\n\n如果不是现在，那是什么时候。\n\n姑娘啊，我想要去开辟我自己的世界了，没办法再继续陪伴你了。我真的很想要你一起来体验我发现的不用世界，也真的很想体验你眼里看到的世界，可是你不愿意，那么希望你也能发现自己的精彩，愿你因爱而欢喜。\n\n若以后还能相遇，我定会不顾一切。\n\n\n\n","slug":"hing","published":1,"updated":"2016-08-05T17:21:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirki359u0005m5nhpuazv3o2","content":"<p>距离上一次更新是好几个月以前，虽然确实有很多事情，但是总来说，就是比较懒。</p>\n<p>确实经历了一次比较骇人的变化，从毕业到正式工作；从拿着渣渣的A4的windows笔记本到现在Mac，以及其他的一些经历，总是感觉自己还是一个学生，没有长大，这一切来得确实有些快，措手不及。</p>\n<p>我想反思一下自己，总要做出一些改变。</p>\n<p>以前自己：懒，拖延，害怕尝试新的东西，有时候会斤斤计较，有点小心机，还有小小的自以为是，耐心也确实不好，对不想理的人就是爱理不理，强行想去说话也没办法，没办法和别人好好的沟通，主观意识略强，情商确实很低，不会做事，不会好好的和别人相处，不会好好的表达自己，事情也做得不够好，明明能力也很低。</p>\n<p>很不喜欢那些给别人贴标签的人，而我现在在给自己贴标签，我是否在逐渐成为那个我讨厌的人，我是否会像村上春树说的样要成长为一个不动声色的大人了，我是否会像这样毫无作为的走下去，不甘平凡却屈于平凡，我不觉得这是生活常态，这恐怕是丢失了某些热情。这些都让我感到害怕，却装作一副无所谓的样子，一副努力的样子，安慰自己。</p>\n<p>现在每天都给自己洗脑，最好的方式就是将一件事做到极致。我害怕痛苦和失败，更害怕再更久远一点的以后，依旧困在牢笼之中，没有办法和时间来证明我的英勇。二十三年按部就班的过来，循规蹈矩的上学，某种程度上说，已经庸到极致了。</p>\n<p>如果不是现在，那是什么时候。</p>\n<p>姑娘啊，我想要去开辟我自己的世界了，没办法再继续陪伴你了。我真的很想要你一起来体验我发现的不用世界，也真的很想体验你眼里看到的世界，可是你不愿意，那么希望你也能发现自己的精彩，愿你因爱而欢喜。</p>\n<p>若以后还能相遇，我定会不顾一切。</p>\n","excerpt":"","more":"<p>距离上一次更新是好几个月以前，虽然确实有很多事情，但是总来说，就是比较懒。</p>\n<p>确实经历了一次比较骇人的变化，从毕业到正式工作；从拿着渣渣的A4的windows笔记本到现在Mac，以及其他的一些经历，总是感觉自己还是一个学生，没有长大，这一切来得确实有些快，措手不及。</p>\n<p>我想反思一下自己，总要做出一些改变。</p>\n<p>以前自己：懒，拖延，害怕尝试新的东西，有时候会斤斤计较，有点小心机，还有小小的自以为是，耐心也确实不好，对不想理的人就是爱理不理，强行想去说话也没办法，没办法和别人好好的沟通，主观意识略强，情商确实很低，不会做事，不会好好的和别人相处，不会好好的表达自己，事情也做得不够好，明明能力也很低。</p>\n<p>很不喜欢那些给别人贴标签的人，而我现在在给自己贴标签，我是否在逐渐成为那个我讨厌的人，我是否会像村上春树说的样要成长为一个不动声色的大人了，我是否会像这样毫无作为的走下去，不甘平凡却屈于平凡，我不觉得这是生活常态，这恐怕是丢失了某些热情。这些都让我感到害怕，却装作一副无所谓的样子，一副努力的样子，安慰自己。</p>\n<p>现在每天都给自己洗脑，最好的方式就是将一件事做到极致。我害怕痛苦和失败，更害怕再更久远一点的以后，依旧困在牢笼之中，没有办法和时间来证明我的英勇。二十三年按部就班的过来，循规蹈矩的上学，某种程度上说，已经庸到极致了。</p>\n<p>如果不是现在，那是什么时候。</p>\n<p>姑娘啊，我想要去开辟我自己的世界了，没办法再继续陪伴你了。我真的很想要你一起来体验我发现的不用世界，也真的很想体验你眼里看到的世界，可是你不愿意，那么希望你也能发现自己的精彩，愿你因爱而欢喜。</p>\n<p>若以后还能相遇，我定会不顾一切。</p>\n","sticky":0},{"title":"使用hexo与GitHub Pages搭建自己的博客","date":"2016-01-27T13:55:37.000Z","_content":"本文是我如何使用hexo与github pages搭建个人博客的过程，虽然网上教程已经很多了。那这就姑且算作回顾一下吧。\n\n#### 使用的版本\n - node 4.2.2\n - hexo 3.1.1\n - Git 2.6.1\n\n\n{% blockquote GitHub Pages http://pages.github.com pages.github.com%}\nGit、Node的使用在这里就不赘述了。如何使用GitHub Pages，可以参考官方网站，仔细阅读，已经写得很详细了，特别是在新建仓库的时候，username.github.io中的username一定要和自己的username相同，区分大小写，不要问我为什么知道的。\n{% endblockquote %}\n\n\n#### Hexo的使用\n{% blockquote HEXO http://hexo.io/zh-cn/docs hexo %}\n关于hexo，一开始接触的时候会觉得茫然一片，不知道干啥，网上也有教程，但是搜到大部分教程已经过时，在package.json里面已经写好了依赖包，npm install的时候会安装好所需要的包，不用再单独去安装一次hexo server了，具体可以参考官方网站，文档已经写得很清楚了。\n{% endblockquote %}\n\n\n\n#### 评论插件\nhexo自带的是Disqus，但是这个需要使用facebook，twitter，google+等登录，如果你没有，或者没有走到墙外面，你还可选择国内的 多说 ，我就是使用的这个，具体效果看文章最后的评论区域就知道。如何在博客中使用，这里可能有一点差异，有些主题可能已经集成了duoshuo，只需要在配置文件中开启即可，比如使用的 hexo-theme-next :https://github.com/iissnan/hexo-theme-next 有些主题没有集成，则需要去duoshuo的官网生成一段通用代码，复制到你的评论模板里面，覆盖原来的Disqus评论代码。\n\n\n#### 使用主题\n在使用hexo初始化一个博客之后，会有一个自带的默认主题landscape，当然，我们都是追求个性的人不是吗？虽然可以随便改这个默认主题的模板样式，但是我们需要追求更加高Big的。我使用的是比较收欢迎的next主题，上面已经给出了地址。你只需要通过git将它clone到你博客目录下的themes文件夹里面，然后在站点的配置文件里面将使用的名字改为你clone下来的next主题文件夹名字就可以了。\n\n\n最后我捣鼓了大半天，最后总结到一个非常重要的知识点，学习一个新的东西，官方的文档真的真的真的（重要的事情说三遍）很重要。网上博客写出来的东西，有可能只是当时博主遇到的问题，也有可能当时博主搭建博客使用的东西版本与你目前使用的版本是有差距。所以官方文档才是最正宗的。\n","source":"_posts/hexo.md","raw":"---\ntitle: 使用hexo与GitHub Pages搭建自己的博客\ndate: 2016-01-27 21:55:37\ntags: \n- hexo\n- duoshuo\n- 搭建自己的博客\n- GitHub Pages\ncategories:\n- hexo\n---\n本文是我如何使用hexo与github pages搭建个人博客的过程，虽然网上教程已经很多了。那这就姑且算作回顾一下吧。\n\n#### 使用的版本\n - node 4.2.2\n - hexo 3.1.1\n - Git 2.6.1\n\n\n{% blockquote GitHub Pages http://pages.github.com pages.github.com%}\nGit、Node的使用在这里就不赘述了。如何使用GitHub Pages，可以参考官方网站，仔细阅读，已经写得很详细了，特别是在新建仓库的时候，username.github.io中的username一定要和自己的username相同，区分大小写，不要问我为什么知道的。\n{% endblockquote %}\n\n\n#### Hexo的使用\n{% blockquote HEXO http://hexo.io/zh-cn/docs hexo %}\n关于hexo，一开始接触的时候会觉得茫然一片，不知道干啥，网上也有教程，但是搜到大部分教程已经过时，在package.json里面已经写好了依赖包，npm install的时候会安装好所需要的包，不用再单独去安装一次hexo server了，具体可以参考官方网站，文档已经写得很清楚了。\n{% endblockquote %}\n\n\n\n#### 评论插件\nhexo自带的是Disqus，但是这个需要使用facebook，twitter，google+等登录，如果你没有，或者没有走到墙外面，你还可选择国内的 多说 ，我就是使用的这个，具体效果看文章最后的评论区域就知道。如何在博客中使用，这里可能有一点差异，有些主题可能已经集成了duoshuo，只需要在配置文件中开启即可，比如使用的 hexo-theme-next :https://github.com/iissnan/hexo-theme-next 有些主题没有集成，则需要去duoshuo的官网生成一段通用代码，复制到你的评论模板里面，覆盖原来的Disqus评论代码。\n\n\n#### 使用主题\n在使用hexo初始化一个博客之后，会有一个自带的默认主题landscape，当然，我们都是追求个性的人不是吗？虽然可以随便改这个默认主题的模板样式，但是我们需要追求更加高Big的。我使用的是比较收欢迎的next主题，上面已经给出了地址。你只需要通过git将它clone到你博客目录下的themes文件夹里面，然后在站点的配置文件里面将使用的名字改为你clone下来的next主题文件夹名字就可以了。\n\n\n最后我捣鼓了大半天，最后总结到一个非常重要的知识点，学习一个新的东西，官方的文档真的真的真的（重要的事情说三遍）很重要。网上博客写出来的东西，有可能只是当时博主遇到的问题，也有可能当时博主搭建博客使用的东西版本与你目前使用的版本是有差距。所以官方文档才是最正宗的。\n","slug":"hexo","published":1,"updated":"2016-08-04T16:42:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirki35a00007m5nh6sc0azkj","content":"<p>本文是我如何使用hexo与github pages搭建个人博客的过程，虽然网上教程已经很多了。那这就姑且算作回顾一下吧。</p>\n<h4 id=\"使用的版本\"><a href=\"#使用的版本\" class=\"headerlink\" title=\"使用的版本\"></a>使用的版本</h4><ul>\n<li>node 4.2.2</li>\n<li>hexo 3.1.1</li>\n<li>Git 2.6.1</li>\n</ul>\n<blockquote><p>Git、Node的使用在这里就不赘述了。如何使用GitHub Pages，可以参考官方网站，仔细阅读，已经写得很详细了，特别是在新建仓库的时候，username.github.io中的username一定要和自己的username相同，区分大小写，不要问我为什么知道的。</p>\n<footer><strong>GitHub Pages</strong><cite><a href=\"http://pages.github.com\" target=\"_blank\" rel=\"external\">pages.github.com</a></cite></footer></blockquote>\n<h4 id=\"Hexo的使用\"><a href=\"#Hexo的使用\" class=\"headerlink\" title=\"Hexo的使用\"></a>Hexo的使用</h4><blockquote><p>关于hexo，一开始接触的时候会觉得茫然一片，不知道干啥，网上也有教程，但是搜到大部分教程已经过时，在package.json里面已经写好了依赖包，npm install的时候会安装好所需要的包，不用再单独去安装一次hexo server了，具体可以参考官方网站，文档已经写得很清楚了。</p>\n<footer><strong>HEXO</strong><cite><a href=\"http://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"external\">hexo</a></cite></footer></blockquote>\n<h4 id=\"评论插件\"><a href=\"#评论插件\" class=\"headerlink\" title=\"评论插件\"></a>评论插件</h4><p>hexo自带的是Disqus，但是这个需要使用facebook，twitter，google+等登录，如果你没有，或者没有走到墙外面，你还可选择国内的 多说 ，我就是使用的这个，具体效果看文章最后的评论区域就知道。如何在博客中使用，这里可能有一点差异，有些主题可能已经集成了duoshuo，只需要在配置文件中开启即可，比如使用的 hexo-theme-next :<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">https://github.com/iissnan/hexo-theme-next</a> 有些主题没有集成，则需要去duoshuo的官网生成一段通用代码，复制到你的评论模板里面，覆盖原来的Disqus评论代码。</p>\n<h4 id=\"使用主题\"><a href=\"#使用主题\" class=\"headerlink\" title=\"使用主题\"></a>使用主题</h4><p>在使用hexo初始化一个博客之后，会有一个自带的默认主题landscape，当然，我们都是追求个性的人不是吗？虽然可以随便改这个默认主题的模板样式，但是我们需要追求更加高Big的。我使用的是比较收欢迎的next主题，上面已经给出了地址。你只需要通过git将它clone到你博客目录下的themes文件夹里面，然后在站点的配置文件里面将使用的名字改为你clone下来的next主题文件夹名字就可以了。</p>\n<p>最后我捣鼓了大半天，最后总结到一个非常重要的知识点，学习一个新的东西，官方的文档真的真的真的（重要的事情说三遍）很重要。网上博客写出来的东西，有可能只是当时博主遇到的问题，也有可能当时博主搭建博客使用的东西版本与你目前使用的版本是有差距。所以官方文档才是最正宗的。</p>\n","excerpt":"","more":"<p>本文是我如何使用hexo与github pages搭建个人博客的过程，虽然网上教程已经很多了。那这就姑且算作回顾一下吧。</p>\n<h4 id=\"使用的版本\"><a href=\"#使用的版本\" class=\"headerlink\" title=\"使用的版本\"></a>使用的版本</h4><ul>\n<li>node 4.2.2</li>\n<li>hexo 3.1.1</li>\n<li>Git 2.6.1</li>\n</ul>\n<blockquote><p>Git、Node的使用在这里就不赘述了。如何使用GitHub Pages，可以参考官方网站，仔细阅读，已经写得很详细了，特别是在新建仓库的时候，username.github.io中的username一定要和自己的username相同，区分大小写，不要问我为什么知道的。</p>\n<footer><strong>GitHub Pages</strong><cite><a href=\"http://pages.github.com\">pages.github.com</a></cite></footer></blockquote>\n<h4 id=\"Hexo的使用\"><a href=\"#Hexo的使用\" class=\"headerlink\" title=\"Hexo的使用\"></a>Hexo的使用</h4><blockquote><p>关于hexo，一开始接触的时候会觉得茫然一片，不知道干啥，网上也有教程，但是搜到大部分教程已经过时，在package.json里面已经写好了依赖包，npm install的时候会安装好所需要的包，不用再单独去安装一次hexo server了，具体可以参考官方网站，文档已经写得很清楚了。</p>\n<footer><strong>HEXO</strong><cite><a href=\"http://hexo.io/zh-cn/docs\">hexo</a></cite></footer></blockquote>\n<h4 id=\"评论插件\"><a href=\"#评论插件\" class=\"headerlink\" title=\"评论插件\"></a>评论插件</h4><p>hexo自带的是Disqus，但是这个需要使用facebook，twitter，google+等登录，如果你没有，或者没有走到墙外面，你还可选择国内的 多说 ，我就是使用的这个，具体效果看文章最后的评论区域就知道。如何在博客中使用，这里可能有一点差异，有些主题可能已经集成了duoshuo，只需要在配置文件中开启即可，比如使用的 hexo-theme-next :<a href=\"https://github.com/iissnan/hexo-theme-next\">https://github.com/iissnan/hexo-theme-next</a> 有些主题没有集成，则需要去duoshuo的官网生成一段通用代码，复制到你的评论模板里面，覆盖原来的Disqus评论代码。</p>\n<h4 id=\"使用主题\"><a href=\"#使用主题\" class=\"headerlink\" title=\"使用主题\"></a>使用主题</h4><p>在使用hexo初始化一个博客之后，会有一个自带的默认主题landscape，当然，我们都是追求个性的人不是吗？虽然可以随便改这个默认主题的模板样式，但是我们需要追求更加高Big的。我使用的是比较收欢迎的next主题，上面已经给出了地址。你只需要通过git将它clone到你博客目录下的themes文件夹里面，然后在站点的配置文件里面将使用的名字改为你clone下来的next主题文件夹名字就可以了。</p>\n<p>最后我捣鼓了大半天，最后总结到一个非常重要的知识点，学习一个新的东西，官方的文档真的真的真的（重要的事情说三遍）很重要。网上博客写出来的东西，有可能只是当时博主遇到的问题，也有可能当时博主搭建博客使用的东西版本与你目前使用的版本是有差距。所以官方文档才是最正宗的。</p>\n","sticky":0},{"title":"smarty","date":"2016-03-10T14:18:48.000Z","_content":"\n#### smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）\n\n- smarty中的定界符恰好也是{}，在JavaScript中也是，所以在smarty中{}两边是空格的时候，将会被自动忽略解析，这种特性可以通过设置smarty的$auto_literal为false来关闭\n- {literal}…{/literal}可以让中间的内容忽略smarty的解析\n- 必须使用双引号才能正常使用变量，单引号是不行的，如果在变量中存在 .则必须将该变量在双引号中庸单引号括起来\n- 页面的请求变量，例如$_GET,$POST,$_COOKIE,$_SERVER,$_ENV,$_SESSION等可以通过\n比如通过get方法请求地址为`http://www.examole.com/index/?page=1`,$smarty.get.page其他同理:\n>$smarty.post.page,\n$smarty.cookies.username\n$smarty.server.SERVER_NAME\n$smarty.env.PATH\n$smarty.session.id\n$smarty.request.username\n- $smarty.now 当前的时间戳，从1970年1月1日计算到当前的秒数可以使用$smarty.now|date_format'%Y-%m-%d %H:%M:%S'来格式化显示\n> $smarty.template返回当前的模板名称（不带目录名）;\n> $smarty.block.child 返回子模版提供的区块代码;\n> $smarty.block.parent 返回父模板提供的区块代码;\n\n- 变量修饰符\n> 用于变量，自定义函数或者字符串，使用的时候需要在变量后面加上|(竖线)并跟着修饰符名称\nSmarty3存在的默认行为，在smarty2.X的版本中，需要在数组后加上@标识符来使用修饰器，例如{$articleTitle|@count}，smarty3则不再需要使用@，它会被忽略\n\n- 学习到一个新的姿势啊，关于github，一个远程仓库上，如果直接clone，会拉去所有的commit，但是有可能我们并不需要，所以在拉取的时候可以添加 `--depth=1`，其中1表示最近一次的提交，即拉取最近的一次即可~\n\n* 接着上面的\n\n* |count_characters计算变量内容有多少个字符\n* |default为变量设置默认值，当变量是unset或者empty的字符串时，默认值将显示。必须有一个参数\n`{$articleTitle|default:'no title'}`\n\n* 输出\n`no title`\n\n* |indent 缩进每一行的字符串，默认是缩进四个空格，参数可设置缩进的空格数量，第二个可选参数设置缩进使用的字符，例如使用'\\t'来代替空格缩进\n`{$articleTitle|indent:1:\"\\t\"}`\n\n\n* 原来{ $var=…}是{assign}函数的缩写，可以在模版内对变量进行赋值\n属性:\n> scope 作用范围可以是：'parent','root','global'\n>nocache:对复制操作不进行缓存\n\n* {append}可以在运行时为数组变量增加或者创建值。\n属性：\n> var 赋值的变量名称\n> value 赋予的值\n> index 数组元素的新索引，如果没有此参数，则附加的值会加到数组最后\n> Scope 赋值变量的访问范围 'parent','root','global'\n\n* {assign}在调用的模版内的作用范围，在包含的模版内赋值的变量，在包含模版内可见\n\n* {block}可以在模板上定义一块区域进行模板继承。子模版中的{block}区域代码，将会替换父模板对应的区域代码。\n* 这里不是很明白：另外，{block}可以设置车合并父子模板的相应区域。在子模版的{block}中定义append或prepend，可以使子模版附加在父模板{block}区域的后面或前面\n\n* 在{block}内容中使用{$smarty.block.parent}，可以让父模板的区域代码放到子模版{block}内的任意位置\n\n* {blocks}可以嵌套使用\n> 属性：name（模板区域的名称）\n> 可选属性：append，prepend，hide，nocache\n\n* {call}可以调用一个通过{function}标签来定义的模板函数，如同调用插件函数一样。\n> Note:模板函数是全局定义的。因为Smarty编译器是一个单次的编译器，所以{call}标签调用的函数，无比定义在当前模板之外的位置。或者可以直接通过{funcname ….}的方式来使用该函数。\n{call}必须设置name属性，标识要调用的模板函数的名称。\n可以按照属性的方式来给函数传递参数。\n属性：\n> name 模板函数的名称\n> assign 将函数的返回内容赋值到指定变量\n> [var …]传递给模板函数的默认参数\n\n* {capture}：可以捕获标记范围内的输出内容，存到变量中而不现显示。\n在{capture name='foo'}{/capture}之间的内容会被捕获到变量，变量名可以通过name属性来指定，然后拿出来显示。\n\n* {extends}，模板继承中，你可以在子模版内使用{extends}标签来扩展父模板。\n{extends}必须放在模板的第一行。\n如果子模版都需要{extends}来扩展父模板，那么它只能有{block}的区域，任何其他的模板内容都会被忽略。\n\n* for指定步长的循环\n属性： max 循环的次数\n\n`<ul>\n{for $foo=1 to 3}\n\t<li>{$foo}</li>\n{/for>\n</ul>`\n\n* {foreach}{/foreach}\n属性：@index,@iteration,@first,@last,@show,@total\n语法命令：{break},{continue}\n代替指定key变量，通过{$item@key}来使用循环的当前key。\n其中@index为当前数组索引，从0开始计算\n@iteration是当前循环的次数，从1开始计数，可以使用 is div by,is even/odd by来做一些特殊的判断\n\n* show属性是在{foreach}循环执行之后，检测循环是是否显示数据的判断,show是一个布尔值.\n\n`{function}\n{function name=menu level=0}\n{function menu level=0}\n\t<ul class=\"level{$level}\">\n\t\t{foreach $data as $entry}\n\t\t\t{if is_array($entry)}\n\t\t\t\t<li>{$entry@key}</li>\n\t\t\t\t{menu data=$entry level=$level+1}\n\t\t\t{else}\n\t\t\t\t<li>{$entry}</li>\n\t\t\t{/if}\n\t\t{/foreach}\n\t</ul>\n{/function}`\n* 调用函数{menu data=$menu}\n\n* {if}{elseif}{/if}空变量的处理：使用默认值来代替空变量，使用default修饰器来处理\n\n* 看完这排版，我倒吸一口凉气，怎么这么烂，markdown自以为回了其实还没仔仔细细看的看过，这里也是今后的一个学习点。\n\n\n\n\n","source":"_posts/smarty.md","raw":"---\ntitle: smarty\ndate: 2016-03-10 22:18:48\ntags:\n- smarty\ncategories:\n- smarty\n---\n\n#### smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）\n\n- smarty中的定界符恰好也是{}，在JavaScript中也是，所以在smarty中{}两边是空格的时候，将会被自动忽略解析，这种特性可以通过设置smarty的$auto_literal为false来关闭\n- {literal}…{/literal}可以让中间的内容忽略smarty的解析\n- 必须使用双引号才能正常使用变量，单引号是不行的，如果在变量中存在 .则必须将该变量在双引号中庸单引号括起来\n- 页面的请求变量，例如$_GET,$POST,$_COOKIE,$_SERVER,$_ENV,$_SESSION等可以通过\n比如通过get方法请求地址为`http://www.examole.com/index/?page=1`,$smarty.get.page其他同理:\n>$smarty.post.page,\n$smarty.cookies.username\n$smarty.server.SERVER_NAME\n$smarty.env.PATH\n$smarty.session.id\n$smarty.request.username\n- $smarty.now 当前的时间戳，从1970年1月1日计算到当前的秒数可以使用$smarty.now|date_format'%Y-%m-%d %H:%M:%S'来格式化显示\n> $smarty.template返回当前的模板名称（不带目录名）;\n> $smarty.block.child 返回子模版提供的区块代码;\n> $smarty.block.parent 返回父模板提供的区块代码;\n\n- 变量修饰符\n> 用于变量，自定义函数或者字符串，使用的时候需要在变量后面加上|(竖线)并跟着修饰符名称\nSmarty3存在的默认行为，在smarty2.X的版本中，需要在数组后加上@标识符来使用修饰器，例如{$articleTitle|@count}，smarty3则不再需要使用@，它会被忽略\n\n- 学习到一个新的姿势啊，关于github，一个远程仓库上，如果直接clone，会拉去所有的commit，但是有可能我们并不需要，所以在拉取的时候可以添加 `--depth=1`，其中1表示最近一次的提交，即拉取最近的一次即可~\n\n* 接着上面的\n\n* |count_characters计算变量内容有多少个字符\n* |default为变量设置默认值，当变量是unset或者empty的字符串时，默认值将显示。必须有一个参数\n`{$articleTitle|default:'no title'}`\n\n* 输出\n`no title`\n\n* |indent 缩进每一行的字符串，默认是缩进四个空格，参数可设置缩进的空格数量，第二个可选参数设置缩进使用的字符，例如使用'\\t'来代替空格缩进\n`{$articleTitle|indent:1:\"\\t\"}`\n\n\n* 原来{ $var=…}是{assign}函数的缩写，可以在模版内对变量进行赋值\n属性:\n> scope 作用范围可以是：'parent','root','global'\n>nocache:对复制操作不进行缓存\n\n* {append}可以在运行时为数组变量增加或者创建值。\n属性：\n> var 赋值的变量名称\n> value 赋予的值\n> index 数组元素的新索引，如果没有此参数，则附加的值会加到数组最后\n> Scope 赋值变量的访问范围 'parent','root','global'\n\n* {assign}在调用的模版内的作用范围，在包含的模版内赋值的变量，在包含模版内可见\n\n* {block}可以在模板上定义一块区域进行模板继承。子模版中的{block}区域代码，将会替换父模板对应的区域代码。\n* 这里不是很明白：另外，{block}可以设置车合并父子模板的相应区域。在子模版的{block}中定义append或prepend，可以使子模版附加在父模板{block}区域的后面或前面\n\n* 在{block}内容中使用{$smarty.block.parent}，可以让父模板的区域代码放到子模版{block}内的任意位置\n\n* {blocks}可以嵌套使用\n> 属性：name（模板区域的名称）\n> 可选属性：append，prepend，hide，nocache\n\n* {call}可以调用一个通过{function}标签来定义的模板函数，如同调用插件函数一样。\n> Note:模板函数是全局定义的。因为Smarty编译器是一个单次的编译器，所以{call}标签调用的函数，无比定义在当前模板之外的位置。或者可以直接通过{funcname ….}的方式来使用该函数。\n{call}必须设置name属性，标识要调用的模板函数的名称。\n可以按照属性的方式来给函数传递参数。\n属性：\n> name 模板函数的名称\n> assign 将函数的返回内容赋值到指定变量\n> [var …]传递给模板函数的默认参数\n\n* {capture}：可以捕获标记范围内的输出内容，存到变量中而不现显示。\n在{capture name='foo'}{/capture}之间的内容会被捕获到变量，变量名可以通过name属性来指定，然后拿出来显示。\n\n* {extends}，模板继承中，你可以在子模版内使用{extends}标签来扩展父模板。\n{extends}必须放在模板的第一行。\n如果子模版都需要{extends}来扩展父模板，那么它只能有{block}的区域，任何其他的模板内容都会被忽略。\n\n* for指定步长的循环\n属性： max 循环的次数\n\n`<ul>\n{for $foo=1 to 3}\n\t<li>{$foo}</li>\n{/for>\n</ul>`\n\n* {foreach}{/foreach}\n属性：@index,@iteration,@first,@last,@show,@total\n语法命令：{break},{continue}\n代替指定key变量，通过{$item@key}来使用循环的当前key。\n其中@index为当前数组索引，从0开始计算\n@iteration是当前循环的次数，从1开始计数，可以使用 is div by,is even/odd by来做一些特殊的判断\n\n* show属性是在{foreach}循环执行之后，检测循环是是否显示数据的判断,show是一个布尔值.\n\n`{function}\n{function name=menu level=0}\n{function menu level=0}\n\t<ul class=\"level{$level}\">\n\t\t{foreach $data as $entry}\n\t\t\t{if is_array($entry)}\n\t\t\t\t<li>{$entry@key}</li>\n\t\t\t\t{menu data=$entry level=$level+1}\n\t\t\t{else}\n\t\t\t\t<li>{$entry}</li>\n\t\t\t{/if}\n\t\t{/foreach}\n\t</ul>\n{/function}`\n* 调用函数{menu data=$menu}\n\n* {if}{elseif}{/if}空变量的处理：使用默认值来代替空变量，使用default修饰器来处理\n\n* 看完这排版，我倒吸一口凉气，怎么这么烂，markdown自以为回了其实还没仔仔细细看的看过，这里也是今后的一个学习点。\n\n\n\n\n","slug":"smarty","published":1,"updated":"2016-08-04T16:42:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirki35a3000am5nh6wkfykz3","content":"<h4 id=\"smarty的进阶之路（可能会用到的更完了-●˘◡˘●-）\"><a href=\"#smarty的进阶之路（可能会用到的更完了-●˘◡˘●-）\" class=\"headerlink\" title=\"smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）\"></a>smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）</h4><ul>\n<li>smarty中的定界符恰好也是{}，在JavaScript中也是，所以在smarty中{}两边是空格的时候，将会被自动忽略解析，这种特性可以通过设置smarty的$auto_literal为false来关闭</li>\n<li>{literal}…{/literal}可以让中间的内容忽略smarty的解析</li>\n<li>必须使用双引号才能正常使用变量，单引号是不行的，如果在变量中存在 .则必须将该变量在双引号中庸单引号括起来</li>\n<li>页面的请求变量，例如$_GET,$POST,$_COOKIE,$_SERVER,$_ENV,$_SESSION等可以通过<br>比如通过get方法请求地址为<code>http://www.examole.com/index/?page=1</code>,$smarty.get.page其他同理:<blockquote>\n<p>$smarty.post.page,<br>$smarty.cookies.username<br>$smarty.server.SERVER_NAME<br>$smarty.env.PATH<br>$smarty.session.id<br>$smarty.request.username</p>\n</blockquote>\n</li>\n<li><p>$smarty.now 当前的时间戳，从1970年1月1日计算到当前的秒数可以使用$smarty.now|date_format’%Y-%m-%d %H:%M:%S’来格式化显示</p>\n<blockquote>\n<p>$smarty.template返回当前的模板名称（不带目录名）;<br>$smarty.block.child 返回子模版提供的区块代码;<br>$smarty.block.parent 返回父模板提供的区块代码;</p>\n</blockquote>\n</li>\n<li><p>变量修饰符</p>\n<blockquote>\n<p>用于变量，自定义函数或者字符串，使用的时候需要在变量后面加上|(竖线)并跟着修饰符名称<br>Smarty3存在的默认行为，在smarty2.X的版本中，需要在数组后加上@标识符来使用修饰器，例如{$articleTitle|@count}，smarty3则不再需要使用@，它会被忽略</p>\n</blockquote>\n</li>\n<li><p>学习到一个新的姿势啊，关于github，一个远程仓库上，如果直接clone，会拉去所有的commit，但是有可能我们并不需要，所以在拉取的时候可以添加 <code>--depth=1</code>，其中1表示最近一次的提交，即拉取最近的一次即可~</p>\n</li>\n</ul>\n<ul>\n<li><p>接着上面的</p>\n</li>\n<li><p>|count_characters计算变量内容有多少个字符</p>\n</li>\n<li><p>|default为变量设置默认值，当变量是unset或者empty的字符串时，默认值将显示。必须有一个参数<br><code>{$articleTitle|default:&#39;no title&#39;}</code></p>\n</li>\n<li><p>输出<br><code>no title</code></p>\n</li>\n<li><p>|indent 缩进每一行的字符串，默认是缩进四个空格，参数可设置缩进的空格数量，第二个可选参数设置缩进使用的字符，例如使用’\\t’来代替空格缩进<br><code>{$articleTitle|indent:1:&quot;\\t&quot;}</code></p>\n</li>\n</ul>\n<ul>\n<li><p>原来{ $var=…}是{assign}函数的缩写，可以在模版内对变量进行赋值<br>属性:</p>\n<blockquote>\n<p>scope 作用范围可以是：’parent’,’root’,’global’<br>nocache:对复制操作不进行缓存</p>\n</blockquote>\n</li>\n<li><p>{append}可以在运行时为数组变量增加或者创建值。<br>属性：</p>\n<blockquote>\n<p>var 赋值的变量名称<br>value 赋予的值<br>index 数组元素的新索引，如果没有此参数，则附加的值会加到数组最后<br>Scope 赋值变量的访问范围 ‘parent’,’root’,’global’</p>\n</blockquote>\n</li>\n<li><p>{assign}在调用的模版内的作用范围，在包含的模版内赋值的变量，在包含模版内可见</p>\n</li>\n<li><p>{block}可以在模板上定义一块区域进行模板继承。子模版中的{block}区域代码，将会替换父模板对应的区域代码。</p>\n</li>\n<li><p>这里不是很明白：另外，{block}可以设置车合并父子模板的相应区域。在子模版的{block}中定义append或prepend，可以使子模版附加在父模板{block}区域的后面或前面</p>\n</li>\n<li><p>在{block}内容中使用{$smarty.block.parent}，可以让父模板的区域代码放到子模版{block}内的任意位置</p>\n</li>\n<li><p>{blocks}可以嵌套使用</p>\n<blockquote>\n<p>属性：name（模板区域的名称）<br>可选属性：append，prepend，hide，nocache</p>\n</blockquote>\n</li>\n<li><p>{call}可以调用一个通过{function}标签来定义的模板函数，如同调用插件函数一样。</p>\n<blockquote>\n<p>Note:模板函数是全局定义的。因为Smarty编译器是一个单次的编译器，所以{call}标签调用的函数，无比定义在当前模板之外的位置。或者可以直接通过{funcname ….}的方式来使用该函数。<br>{call}必须设置name属性，标识要调用的模板函数的名称。<br>可以按照属性的方式来给函数传递参数。<br>属性：<br>name 模板函数的名称<br>assign 将函数的返回内容赋值到指定变量<br>[var …]传递给模板函数的默认参数</p>\n</blockquote>\n</li>\n<li><p>{capture}：可以捕获标记范围内的输出内容，存到变量中而不现显示。<br>在{capture name=’foo’}{/capture}之间的内容会被捕获到变量，变量名可以通过name属性来指定，然后拿出来显示。</p>\n</li>\n<li><p>{extends}，模板继承中，你可以在子模版内使用{extends}标签来扩展父模板。<br>{extends}必须放在模板的第一行。<br>如果子模版都需要{extends}来扩展父模板，那么它只能有{block}的区域，任何其他的模板内容都会被忽略。</p>\n</li>\n<li><p>for指定步长的循环<br>属性： max 循环的次数</p>\n</li>\n</ul>\n<p><code>&lt;ul&gt;\n{for $foo=1 to 3}\n    &lt;li&gt;{$foo}&lt;/li&gt;\n{/for&gt;\n&lt;/ul&gt;</code></p>\n<ul>\n<li><p>{foreach}{/foreach}<br>属性：@index,@iteration,@first,@last,@show,@total<br>语法命令：{break},{continue}<br>代替指定key变量，通过{$item@key}来使用循环的当前key。<br>其中@index为当前数组索引，从0开始计算<br>@iteration是当前循环的次数，从1开始计数，可以使用 is div by,is even/odd by来做一些特殊的判断</p>\n</li>\n<li><p>show属性是在{foreach}循环执行之后，检测循环是是否显示数据的判断,show是一个布尔值.</p>\n</li>\n</ul>\n<p><code>{function}\n{function name=menu level=0}\n{function menu level=0}\n    &lt;ul class=&quot;level{$level}&quot;&gt;\n        {foreach $data as $entry}\n            {if is_array($entry)}\n                &lt;li&gt;{$entry@key}&lt;/li&gt;\n                {menu data=$entry level=$level+1}\n            {else}\n                &lt;li&gt;{$entry}&lt;/li&gt;\n            {/if}\n        {/foreach}\n    &lt;/ul&gt;\n{/function}</code></p>\n<ul>\n<li><p>调用函数{menu data=$menu}</p>\n</li>\n<li><p>{if}{elseif}{/if}空变量的处理：使用默认值来代替空变量，使用default修饰器来处理</p>\n</li>\n<li><p>看完这排版，我倒吸一口凉气，怎么这么烂，markdown自以为回了其实还没仔仔细细看的看过，这里也是今后的一个学习点。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"smarty的进阶之路（可能会用到的更完了-●˘◡˘●-）\"><a href=\"#smarty的进阶之路（可能会用到的更完了-●˘◡˘●-）\" class=\"headerlink\" title=\"smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）\"></a>smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）</h4><ul>\n<li>smarty中的定界符恰好也是{}，在JavaScript中也是，所以在smarty中{}两边是空格的时候，将会被自动忽略解析，这种特性可以通过设置smarty的$auto_literal为false来关闭</li>\n<li>{literal}…{/literal}可以让中间的内容忽略smarty的解析</li>\n<li>必须使用双引号才能正常使用变量，单引号是不行的，如果在变量中存在 .则必须将该变量在双引号中庸单引号括起来</li>\n<li>页面的请求变量，例如$_GET,$POST,$_COOKIE,$_SERVER,$_ENV,$_SESSION等可以通过<br>比如通过get方法请求地址为<code>http://www.examole.com/index/?page=1</code>,$smarty.get.page其他同理:<blockquote>\n<p>$smarty.post.page,<br>$smarty.cookies.username<br>$smarty.server.SERVER_NAME<br>$smarty.env.PATH<br>$smarty.session.id<br>$smarty.request.username</p>\n</blockquote>\n</li>\n<li><p>$smarty.now 当前的时间戳，从1970年1月1日计算到当前的秒数可以使用$smarty.now|date_format’%Y-%m-%d %H:%M:%S’来格式化显示</p>\n<blockquote>\n<p>$smarty.template返回当前的模板名称（不带目录名）;<br>$smarty.block.child 返回子模版提供的区块代码;<br>$smarty.block.parent 返回父模板提供的区块代码;</p>\n</blockquote>\n</li>\n<li><p>变量修饰符</p>\n<blockquote>\n<p>用于变量，自定义函数或者字符串，使用的时候需要在变量后面加上|(竖线)并跟着修饰符名称<br>Smarty3存在的默认行为，在smarty2.X的版本中，需要在数组后加上@标识符来使用修饰器，例如{$articleTitle|@count}，smarty3则不再需要使用@，它会被忽略</p>\n</blockquote>\n</li>\n<li><p>学习到一个新的姿势啊，关于github，一个远程仓库上，如果直接clone，会拉去所有的commit，但是有可能我们并不需要，所以在拉取的时候可以添加 <code>--depth=1</code>，其中1表示最近一次的提交，即拉取最近的一次即可~</p>\n</li>\n</ul>\n<ul>\n<li><p>接着上面的</p>\n</li>\n<li><p>|count_characters计算变量内容有多少个字符</p>\n</li>\n<li><p>|default为变量设置默认值，当变量是unset或者empty的字符串时，默认值将显示。必须有一个参数<br><code>{$articleTitle|default:&#39;no title&#39;}</code></p>\n</li>\n<li><p>输出<br><code>no title</code></p>\n</li>\n<li><p>|indent 缩进每一行的字符串，默认是缩进四个空格，参数可设置缩进的空格数量，第二个可选参数设置缩进使用的字符，例如使用’\\t’来代替空格缩进<br><code>{$articleTitle|indent:1:&quot;\\t&quot;}</code></p>\n</li>\n</ul>\n<ul>\n<li><p>原来{ $var=…}是{assign}函数的缩写，可以在模版内对变量进行赋值<br>属性:</p>\n<blockquote>\n<p>scope 作用范围可以是：’parent’,’root’,’global’<br>nocache:对复制操作不进行缓存</p>\n</blockquote>\n</li>\n<li><p>{append}可以在运行时为数组变量增加或者创建值。<br>属性：</p>\n<blockquote>\n<p>var 赋值的变量名称<br>value 赋予的值<br>index 数组元素的新索引，如果没有此参数，则附加的值会加到数组最后<br>Scope 赋值变量的访问范围 ‘parent’,’root’,’global’</p>\n</blockquote>\n</li>\n<li><p>{assign}在调用的模版内的作用范围，在包含的模版内赋值的变量，在包含模版内可见</p>\n</li>\n<li><p>{block}可以在模板上定义一块区域进行模板继承。子模版中的{block}区域代码，将会替换父模板对应的区域代码。</p>\n</li>\n<li><p>这里不是很明白：另外，{block}可以设置车合并父子模板的相应区域。在子模版的{block}中定义append或prepend，可以使子模版附加在父模板{block}区域的后面或前面</p>\n</li>\n<li><p>在{block}内容中使用{$smarty.block.parent}，可以让父模板的区域代码放到子模版{block}内的任意位置</p>\n</li>\n<li><p>{blocks}可以嵌套使用</p>\n<blockquote>\n<p>属性：name（模板区域的名称）<br>可选属性：append，prepend，hide，nocache</p>\n</blockquote>\n</li>\n<li><p>{call}可以调用一个通过{function}标签来定义的模板函数，如同调用插件函数一样。</p>\n<blockquote>\n<p>Note:模板函数是全局定义的。因为Smarty编译器是一个单次的编译器，所以{call}标签调用的函数，无比定义在当前模板之外的位置。或者可以直接通过{funcname ….}的方式来使用该函数。<br>{call}必须设置name属性，标识要调用的模板函数的名称。<br>可以按照属性的方式来给函数传递参数。<br>属性：<br>name 模板函数的名称<br>assign 将函数的返回内容赋值到指定变量<br>[var …]传递给模板函数的默认参数</p>\n</blockquote>\n</li>\n<li><p>{capture}：可以捕获标记范围内的输出内容，存到变量中而不现显示。<br>在{capture name=’foo’}{/capture}之间的内容会被捕获到变量，变量名可以通过name属性来指定，然后拿出来显示。</p>\n</li>\n<li><p>{extends}，模板继承中，你可以在子模版内使用{extends}标签来扩展父模板。<br>{extends}必须放在模板的第一行。<br>如果子模版都需要{extends}来扩展父模板，那么它只能有{block}的区域，任何其他的模板内容都会被忽略。</p>\n</li>\n<li><p>for指定步长的循环<br>属性： max 循环的次数</p>\n</li>\n</ul>\n<p><code>&lt;ul&gt;\n{for $foo=1 to 3}\n    &lt;li&gt;{$foo}&lt;/li&gt;\n{/for&gt;\n&lt;/ul&gt;</code></p>\n<ul>\n<li><p>{foreach}{/foreach}<br>属性：@index,@iteration,@first,@last,@show,@total<br>语法命令：{break},{continue}<br>代替指定key变量，通过{$item@key}来使用循环的当前key。<br>其中@index为当前数组索引，从0开始计算<br>@iteration是当前循环的次数，从1开始计数，可以使用 is div by,is even/odd by来做一些特殊的判断</p>\n</li>\n<li><p>show属性是在{foreach}循环执行之后，检测循环是是否显示数据的判断,show是一个布尔值.</p>\n</li>\n</ul>\n<p><code>{function}\n{function name=menu level=0}\n{function menu level=0}\n    &lt;ul class=&quot;level{$level}&quot;&gt;\n        {foreach $data as $entry}\n            {if is_array($entry)}\n                &lt;li&gt;{$entry@key}&lt;/li&gt;\n                {menu data=$entry level=$level+1}\n            {else}\n                &lt;li&gt;{$entry}&lt;/li&gt;\n            {/if}\n        {/foreach}\n    &lt;/ul&gt;\n{/function}</code></p>\n<ul>\n<li><p>调用函数{menu data=$menu}</p>\n</li>\n<li><p>{if}{elseif}{/if}空变量的处理：使用默认值来代替空变量，使用default修饰器来处理</p>\n</li>\n<li><p>看完这排版，我倒吸一口凉气，怎么这么烂，markdown自以为回了其实还没仔仔细细看的看过，这里也是今后的一个学习点。</p>\n</li>\n</ul>\n","sticky":0},{"title":"周报君","date":"2016-01-29T08:31:31.000Z","_content":"\n#### 半个月工作总结\n\n- 解决的问题\n> 一个做了很久的项目终于开始测试了，说来真是一个辛酸的故事。不过在测试的过程中还好，发现的bug都是一些细节的修复以及一些数据的调整和接口的调整。个人还是很倾向于Ajax开发的，可能一开始做开发的时候就是使用的Ajax，觉得这样从某些意义上实现了前后端的分离。只要把接口，数据结构商量好，我做我的页面，他写他的数据。说实话现在rap虽然能满足部分开发需求的模拟数据，但是在Ajax请求方面，特别在带有参数请求的时候，没有很好的模拟真实环境，也可能是我没怎么用好。到目前为止，前端与数据和用户的交互测试基本完成，问题也基本修复完成，支付接口的原因临时将表单提交改成Ajax提交也已经完成。\n\n- 存在的问题\n> 代码的结构和可重用性以及可维护性还有待大大的提高啊。还好当时自己写代码的时候写了部分注释，不然后面改起来可能花更多的时间。特别是代码的重用性，觉得自己做的一点都不好，重复代码较多。代码的封装在最开始的时候都是将方法暴露在全局变量里面，当然现在也是将接口暴露在全局变量里，经过后来的修改代码结构，已经将变量变为私有变量。代码执行的时候，只需要执行init()函数就可以了。\n\n- 学到的东西\n> 最重要的就是对this的理解,犹如醍醐灌顶般的理解到了。同时安利一本书《你不知道的JavaScript》。其次就是对前端模板的更多认识，这里不是指smarty，而是ejs，jade，swig等。如果对于我自身来选择的话可能会最终选择swig，因为ejs适合场景，在官网也说了适用于用JavaScript构建html字符串；Ajax；应用的封装，而jade，看过一些代码，觉得比较松散，不怎么好阅读。\n\n- 接下来的安排\n> 这次放假过后就要回学校毕业设计，时间安排是在四月中旬左右做完。也不知道为什么这么急，人家才开始做我们就要做完。最后打算使用node，express，monggodb和swig来做。还是想尝试一下NoSQL。\n","source":"_posts/weekly.md","raw":"---\ntitle: 周报君\ndate: 2016-01-29 16:31:31\ntags: mylife\ncategories: life\n---\n\n#### 半个月工作总结\n\n- 解决的问题\n> 一个做了很久的项目终于开始测试了，说来真是一个辛酸的故事。不过在测试的过程中还好，发现的bug都是一些细节的修复以及一些数据的调整和接口的调整。个人还是很倾向于Ajax开发的，可能一开始做开发的时候就是使用的Ajax，觉得这样从某些意义上实现了前后端的分离。只要把接口，数据结构商量好，我做我的页面，他写他的数据。说实话现在rap虽然能满足部分开发需求的模拟数据，但是在Ajax请求方面，特别在带有参数请求的时候，没有很好的模拟真实环境，也可能是我没怎么用好。到目前为止，前端与数据和用户的交互测试基本完成，问题也基本修复完成，支付接口的原因临时将表单提交改成Ajax提交也已经完成。\n\n- 存在的问题\n> 代码的结构和可重用性以及可维护性还有待大大的提高啊。还好当时自己写代码的时候写了部分注释，不然后面改起来可能花更多的时间。特别是代码的重用性，觉得自己做的一点都不好，重复代码较多。代码的封装在最开始的时候都是将方法暴露在全局变量里面，当然现在也是将接口暴露在全局变量里，经过后来的修改代码结构，已经将变量变为私有变量。代码执行的时候，只需要执行init()函数就可以了。\n\n- 学到的东西\n> 最重要的就是对this的理解,犹如醍醐灌顶般的理解到了。同时安利一本书《你不知道的JavaScript》。其次就是对前端模板的更多认识，这里不是指smarty，而是ejs，jade，swig等。如果对于我自身来选择的话可能会最终选择swig，因为ejs适合场景，在官网也说了适用于用JavaScript构建html字符串；Ajax；应用的封装，而jade，看过一些代码，觉得比较松散，不怎么好阅读。\n\n- 接下来的安排\n> 这次放假过后就要回学校毕业设计，时间安排是在四月中旬左右做完。也不知道为什么这么急，人家才开始做我们就要做完。最后打算使用node，express，monggodb和swig来做。还是想尝试一下NoSQL。\n","slug":"weekly","published":1,"updated":"2016-08-04T16:42:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirki35a7000gm5nh330z67c0","content":"<h4 id=\"半个月工作总结\"><a href=\"#半个月工作总结\" class=\"headerlink\" title=\"半个月工作总结\"></a>半个月工作总结</h4><ul>\n<li><p>解决的问题</p>\n<blockquote>\n<p>一个做了很久的项目终于开始测试了，说来真是一个辛酸的故事。不过在测试的过程中还好，发现的bug都是一些细节的修复以及一些数据的调整和接口的调整。个人还是很倾向于Ajax开发的，可能一开始做开发的时候就是使用的Ajax，觉得这样从某些意义上实现了前后端的分离。只要把接口，数据结构商量好，我做我的页面，他写他的数据。说实话现在rap虽然能满足部分开发需求的模拟数据，但是在Ajax请求方面，特别在带有参数请求的时候，没有很好的模拟真实环境，也可能是我没怎么用好。到目前为止，前端与数据和用户的交互测试基本完成，问题也基本修复完成，支付接口的原因临时将表单提交改成Ajax提交也已经完成。</p>\n</blockquote>\n</li>\n<li><p>存在的问题</p>\n<blockquote>\n<p>代码的结构和可重用性以及可维护性还有待大大的提高啊。还好当时自己写代码的时候写了部分注释，不然后面改起来可能花更多的时间。特别是代码的重用性，觉得自己做的一点都不好，重复代码较多。代码的封装在最开始的时候都是将方法暴露在全局变量里面，当然现在也是将接口暴露在全局变量里，经过后来的修改代码结构，已经将变量变为私有变量。代码执行的时候，只需要执行init()函数就可以了。</p>\n</blockquote>\n</li>\n<li><p>学到的东西</p>\n<blockquote>\n<p>最重要的就是对this的理解,犹如醍醐灌顶般的理解到了。同时安利一本书《你不知道的JavaScript》。其次就是对前端模板的更多认识，这里不是指smarty，而是ejs，jade，swig等。如果对于我自身来选择的话可能会最终选择swig，因为ejs适合场景，在官网也说了适用于用JavaScript构建html字符串；Ajax；应用的封装，而jade，看过一些代码，觉得比较松散，不怎么好阅读。</p>\n</blockquote>\n</li>\n<li><p>接下来的安排</p>\n<blockquote>\n<p>这次放假过后就要回学校毕业设计，时间安排是在四月中旬左右做完。也不知道为什么这么急，人家才开始做我们就要做完。最后打算使用node，express，monggodb和swig来做。还是想尝试一下NoSQL。</p>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"半个月工作总结\"><a href=\"#半个月工作总结\" class=\"headerlink\" title=\"半个月工作总结\"></a>半个月工作总结</h4><ul>\n<li><p>解决的问题</p>\n<blockquote>\n<p>一个做了很久的项目终于开始测试了，说来真是一个辛酸的故事。不过在测试的过程中还好，发现的bug都是一些细节的修复以及一些数据的调整和接口的调整。个人还是很倾向于Ajax开发的，可能一开始做开发的时候就是使用的Ajax，觉得这样从某些意义上实现了前后端的分离。只要把接口，数据结构商量好，我做我的页面，他写他的数据。说实话现在rap虽然能满足部分开发需求的模拟数据，但是在Ajax请求方面，特别在带有参数请求的时候，没有很好的模拟真实环境，也可能是我没怎么用好。到目前为止，前端与数据和用户的交互测试基本完成，问题也基本修复完成，支付接口的原因临时将表单提交改成Ajax提交也已经完成。</p>\n</blockquote>\n</li>\n<li><p>存在的问题</p>\n<blockquote>\n<p>代码的结构和可重用性以及可维护性还有待大大的提高啊。还好当时自己写代码的时候写了部分注释，不然后面改起来可能花更多的时间。特别是代码的重用性，觉得自己做的一点都不好，重复代码较多。代码的封装在最开始的时候都是将方法暴露在全局变量里面，当然现在也是将接口暴露在全局变量里，经过后来的修改代码结构，已经将变量变为私有变量。代码执行的时候，只需要执行init()函数就可以了。</p>\n</blockquote>\n</li>\n<li><p>学到的东西</p>\n<blockquote>\n<p>最重要的就是对this的理解,犹如醍醐灌顶般的理解到了。同时安利一本书《你不知道的JavaScript》。其次就是对前端模板的更多认识，这里不是指smarty，而是ejs，jade，swig等。如果对于我自身来选择的话可能会最终选择swig，因为ejs适合场景，在官网也说了适用于用JavaScript构建html字符串；Ajax；应用的封装，而jade，看过一些代码，觉得比较松散，不怎么好阅读。</p>\n</blockquote>\n</li>\n<li><p>接下来的安排</p>\n<blockquote>\n<p>这次放假过后就要回学校毕业设计，时间安排是在四月中旬左右做完。也不知道为什么这么急，人家才开始做我们就要做完。最后打算使用node，express，monggodb和swig来做。还是想尝试一下NoSQL。</p>\n</blockquote>\n</li>\n</ul>\n","sticky":0},{"title":"Promise的初体验","date":"2016-08-09T15:02:22.000Z","_content":"#### Promise是什么？\nPromise对象在不久的将来可能会是一个代理完整异步操作的值......好吧，英语确实不是很好，原话就是：\n> Proxy for a value that may be known in the future after an asynchronous operation completes\n\n在JavaScript的异步处理中，以jQuery为例，通过调用回调函数来处理请求返回的数据或者失败的请求，简单的如下的代码(jQuery):\n```javascript\n    $.get('url',{data:data},function(json){\n        //the things you'll do\n    },'JSON');\n```\n \n而在Promise这是把上述的操作规范化，按照统一的接口来进行编写。下面是一个简单的例子：\n```javascript\n    var promise = new Promise(function(resolve,reject){\n        //in here,you can transfer the callback function resolve & reject to do what you want to do \n    });\n    promise().then(function(value){\n        console.log(value); \n    },function(error){\n        console.log(error);\n    });\n```\n\n在上面简单的栗子中，then()中的两个回调函数分别用来处理当请求完成是成功和失败的操作，其中上面的代码，在处理失败的使用可以用catch()来操作，代码如下：\n```javascript\n    var promise = new Promise(function(resolve,reject){\n        //in here,you can transfer the callback function resolve & reject to do what you want to do\n    });\n    promise().then(function(value){\n        console.log(value);\n    }).catch(function(error){\n        console.log(error);\n    });\n```\ncatc()就是专门用来处理操作失败时候的函数。\n\n#### Promise的三种状态\n在Promise中除了resolve和reject两种调用，及除了fullFilles和rejected两种状态外，还存在一个pending的状态，改状态表示在Promise对象刚被创建初始化后的初始化状态或者其他状态，只要Promise的状态是fillFulled或者rejected，那么就不会返回到pending状态。\n\n#### Promise的简单编写\n\n编写Promise的过程简单可以描述如下\n1. 创建Promise(fn)对象\n2. 等待fn中的异步处理完成\n3. 如果成功，调用resolve(data)函数，其中data为处理成功的返回值\n4. 如果失败，调用reject(error)函数\n\n代码示例如下：\n```javascript\n    function asyncOperation(url){\n        return new Promise(function(resolve,reject){\n            var req = new XMLHttpRequest();\n            req.open('GET',url,true);\n            req.onload = function(){\n                if(req.status === 200){\n                    resolve(req.responseText);\n                }else{\n                    reject(new Error(req.statusText);\n                }\n            };\n            req.onerror = function(){\n                reject(new Error(req.statusText);\n            };\n            req.send();\n         });\n    }\n\n    var url = 'youtesturl.com';\n    asyncOperation(url).them(function onFullfilled(value){\n        console.log(value);\n    }).catch(function onRejected(error){\n       console.log(error);\n    });\n```\n \n当然这里使用： \n```javascript\n    then(function(value){\n        //TODO\n    },function(error){\n        //TODO\n    });\n```\n也是一样的效果。\n\n#### 可能是个小结\n深知自己确实比较笨，有些东西不能深刻理解就是不能运用自如，而且感觉自己的思维确实和常规的有些偏差。第一次开始学Promise，不仅是一个新的API，更是一种编程的思想。当然这篇文章也是用vim写的，感觉熟练多了，这两天断网了，还没修好，着实有点难受。 \n","source":"_posts/promise.md","raw":"---\ntitle: Promise的初体验 \ndate: 2016-08-09 23:02:22\ntag:\n- promise \ncategories:\n- primise \n---\n#### Promise是什么？\nPromise对象在不久的将来可能会是一个代理完整异步操作的值......好吧，英语确实不是很好，原话就是：\n> Proxy for a value that may be known in the future after an asynchronous operation completes\n\n在JavaScript的异步处理中，以jQuery为例，通过调用回调函数来处理请求返回的数据或者失败的请求，简单的如下的代码(jQuery):\n```javascript\n    $.get('url',{data:data},function(json){\n        //the things you'll do\n    },'JSON');\n```\n \n而在Promise这是把上述的操作规范化，按照统一的接口来进行编写。下面是一个简单的例子：\n```javascript\n    var promise = new Promise(function(resolve,reject){\n        //in here,you can transfer the callback function resolve & reject to do what you want to do \n    });\n    promise().then(function(value){\n        console.log(value); \n    },function(error){\n        console.log(error);\n    });\n```\n\n在上面简单的栗子中，then()中的两个回调函数分别用来处理当请求完成是成功和失败的操作，其中上面的代码，在处理失败的使用可以用catch()来操作，代码如下：\n```javascript\n    var promise = new Promise(function(resolve,reject){\n        //in here,you can transfer the callback function resolve & reject to do what you want to do\n    });\n    promise().then(function(value){\n        console.log(value);\n    }).catch(function(error){\n        console.log(error);\n    });\n```\ncatc()就是专门用来处理操作失败时候的函数。\n\n#### Promise的三种状态\n在Promise中除了resolve和reject两种调用，及除了fullFilles和rejected两种状态外，还存在一个pending的状态，改状态表示在Promise对象刚被创建初始化后的初始化状态或者其他状态，只要Promise的状态是fillFulled或者rejected，那么就不会返回到pending状态。\n\n#### Promise的简单编写\n\n编写Promise的过程简单可以描述如下\n1. 创建Promise(fn)对象\n2. 等待fn中的异步处理完成\n3. 如果成功，调用resolve(data)函数，其中data为处理成功的返回值\n4. 如果失败，调用reject(error)函数\n\n代码示例如下：\n```javascript\n    function asyncOperation(url){\n        return new Promise(function(resolve,reject){\n            var req = new XMLHttpRequest();\n            req.open('GET',url,true);\n            req.onload = function(){\n                if(req.status === 200){\n                    resolve(req.responseText);\n                }else{\n                    reject(new Error(req.statusText);\n                }\n            };\n            req.onerror = function(){\n                reject(new Error(req.statusText);\n            };\n            req.send();\n         });\n    }\n\n    var url = 'youtesturl.com';\n    asyncOperation(url).them(function onFullfilled(value){\n        console.log(value);\n    }).catch(function onRejected(error){\n       console.log(error);\n    });\n```\n \n当然这里使用： \n```javascript\n    then(function(value){\n        //TODO\n    },function(error){\n        //TODO\n    });\n```\n也是一样的效果。\n\n#### 可能是个小结\n深知自己确实比较笨，有些东西不能深刻理解就是不能运用自如，而且感觉自己的思维确实和常规的有些偏差。第一次开始学Promise，不仅是一个新的API，更是一种编程的思想。当然这篇文章也是用vim写的，感觉熟练多了，这两天断网了，还没修好，着实有点难受。 \n","slug":"promise","published":1,"updated":"2016-08-09T16:20:12.000Z","_id":"cirnliowk0000nep9p35z357u","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Promise是什么？\"><a href=\"#Promise是什么？\" class=\"headerlink\" title=\"Promise是什么？\"></a>Promise是什么？</h4><p>Promise对象在不久的将来可能会是一个代理完整异步操作的值……好吧，英语确实不是很好，原话就是：</p>\n<blockquote>\n<p>Proxy for a value that may be known in the future after an asynchronous operation completes</p>\n</blockquote>\n<p>在JavaScript的异步处理中，以jQuery为例，通过调用回调函数来处理请求返回的数据或者失败的请求，简单的如下的代码(jQuery):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>,&#123;data:data&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//the things you'll do</span></div><div class=\"line\">&#125;,<span class=\"string\">'JSON'</span>);</div></pre></td></tr></table></figure></p>\n<p>而在Promise这是把上述的操作规范化，按照统一的接口来进行编写。下面是一个简单的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//in here,you can transfer the callback function resolve &amp; reject to do what you want to do </span></div><div class=\"line\">&#125;);</div><div class=\"line\">promise().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value); </div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在上面简单的栗子中，then()中的两个回调函数分别用来处理当请求完成是成功和失败的操作，其中上面的代码，在处理失败的使用可以用catch()来操作，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//in here,you can transfer the callback function resolve &amp; reject to do what you want to do</span></div><div class=\"line\">&#125;);</div><div class=\"line\">promise().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>catc()就是专门用来处理操作失败时候的函数。</p>\n<h4 id=\"Promise的三种状态\"><a href=\"#Promise的三种状态\" class=\"headerlink\" title=\"Promise的三种状态\"></a>Promise的三种状态</h4><p>在Promise中除了resolve和reject两种调用，及除了fullFilles和rejected两种状态外，还存在一个pending的状态，改状态表示在Promise对象刚被创建初始化后的初始化状态或者其他状态，只要Promise的状态是fillFulled或者rejected，那么就不会返回到pending状态。</p>\n<h4 id=\"Promise的简单编写\"><a href=\"#Promise的简单编写\" class=\"headerlink\" title=\"Promise的简单编写\"></a>Promise的简单编写</h4><p>编写Promise的过程简单可以描述如下</p>\n<ol>\n<li>创建Promise(fn)对象</li>\n<li>等待fn中的异步处理完成</li>\n<li>如果成功，调用resolve(data)函数，其中data为处理成功的返回值</li>\n<li>如果失败，调用reject(error)函数</li>\n</ol>\n<p>代码示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncOperation</span>(<span class=\"params\">url</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">        req.open(<span class=\"string\">'GET'</span>,url,<span class=\"literal\">true</span>);</div><div class=\"line\">        req.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(req.status === <span class=\"number\">200</span>)&#123;</div><div class=\"line\">                resolve(req.responseText);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(req.statusText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        req.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(req.statusText);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        req.send();</div><div class=\"line\">     &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'youtesturl.com'</span>;</div><div class=\"line\">asyncOperation(url).them(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onFullfilled</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRejected</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>当然这里使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//TODO</span></div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//TODO</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>也是一样的效果。</p>\n<h4 id=\"可能是个小结\"><a href=\"#可能是个小结\" class=\"headerlink\" title=\"可能是个小结\"></a>可能是个小结</h4><p>深知自己确实比较笨，有些东西不能深刻理解就是不能运用自如，而且感觉自己的思维确实和常规的有些偏差。第一次开始学Promise，不仅是一个新的API，更是一种编程的思想。当然这篇文章也是用vim写的，感觉熟练多了，这两天断网了，还没修好，着实有点难受。 </p>\n","excerpt":"","more":"<h4 id=\"Promise是什么？\"><a href=\"#Promise是什么？\" class=\"headerlink\" title=\"Promise是什么？\"></a>Promise是什么？</h4><p>Promise对象在不久的将来可能会是一个代理完整异步操作的值……好吧，英语确实不是很好，原话就是：</p>\n<blockquote>\n<p>Proxy for a value that may be known in the future after an asynchronous operation completes</p>\n</blockquote>\n<p>在JavaScript的异步处理中，以jQuery为例，通过调用回调函数来处理请求返回的数据或者失败的请求，简单的如下的代码(jQuery):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>,&#123;data:data&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//the things you'll do</span></div><div class=\"line\">&#125;,<span class=\"string\">'JSON'</span>);</div></pre></td></tr></table></figure></p>\n<p>而在Promise这是把上述的操作规范化，按照统一的接口来进行编写。下面是一个简单的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//in here,you can transfer the callback function resolve &amp; reject to do what you want to do </span></div><div class=\"line\">&#125;);</div><div class=\"line\">promise().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value); </div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在上面简单的栗子中，then()中的两个回调函数分别用来处理当请求完成是成功和失败的操作，其中上面的代码，在处理失败的使用可以用catch()来操作，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//in here,you can transfer the callback function resolve &amp; reject to do what you want to do</span></div><div class=\"line\">&#125;);</div><div class=\"line\">promise().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>catc()就是专门用来处理操作失败时候的函数。</p>\n<h4 id=\"Promise的三种状态\"><a href=\"#Promise的三种状态\" class=\"headerlink\" title=\"Promise的三种状态\"></a>Promise的三种状态</h4><p>在Promise中除了resolve和reject两种调用，及除了fullFilles和rejected两种状态外，还存在一个pending的状态，改状态表示在Promise对象刚被创建初始化后的初始化状态或者其他状态，只要Promise的状态是fillFulled或者rejected，那么就不会返回到pending状态。</p>\n<h4 id=\"Promise的简单编写\"><a href=\"#Promise的简单编写\" class=\"headerlink\" title=\"Promise的简单编写\"></a>Promise的简单编写</h4><p>编写Promise的过程简单可以描述如下</p>\n<ol>\n<li>创建Promise(fn)对象</li>\n<li>等待fn中的异步处理完成</li>\n<li>如果成功，调用resolve(data)函数，其中data为处理成功的返回值</li>\n<li>如果失败，调用reject(error)函数</li>\n</ol>\n<p>代码示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncOperation</span>(<span class=\"params\">url</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">        req.open(<span class=\"string\">'GET'</span>,url,<span class=\"literal\">true</span>);</div><div class=\"line\">        req.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(req.status === <span class=\"number\">200</span>)&#123;</div><div class=\"line\">                resolve(req.responseText);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(req.statusText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        req.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(req.statusText);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        req.send();</div><div class=\"line\">     &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'youtesturl.com'</span>;</div><div class=\"line\">asyncOperation(url).them(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onFullfilled</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRejected</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>当然这里使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//TODO</span></div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//TODO</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>也是一样的效果。</p>\n<h4 id=\"可能是个小结\"><a href=\"#可能是个小结\" class=\"headerlink\" title=\"可能是个小结\"></a>可能是个小结</h4><p>深知自己确实比较笨，有些东西不能深刻理解就是不能运用自如，而且感觉自己的思维确实和常规的有些偏差。第一次开始学Promise，不仅是一个新的API，更是一种编程的思想。当然这篇文章也是用vim写的，感觉熟练多了，这两天断网了，还没修好，着实有点难受。 </p>\n","sticky":0}],"PostAsset":[],"PostCategory":[{"post_id":"cirki359d0000m5nhpa340wte","category_id":"cirki359q0003m5nhp8a9css4","_id":"cirki35a4000bm5nh8wj22s45"},{"post_id":"cirki359j0001m5nhy8eylf81","category_id":"cirki35a10008m5nh0c8aul5h","_id":"cirki35ab000im5nhh9wueqsi"},{"post_id":"cirki359u0005m5nhpuazv3o2","category_id":"cirki35a6000em5nhaamtn250","_id":"cirki35ad000mm5nh9mzsrki6"},{"post_id":"cirki35a00007m5nh6sc0azkj","category_id":"cirki35ac000km5nh5a21mdza","_id":"cirki35af000qm5nhtg1cssrp"},{"post_id":"cirki35a3000am5nh6wkfykz3","category_id":"cirki35ae000om5nhisgwfyn9","_id":"cirki35al000tm5nhg4494cip"},{"post_id":"cirki35a7000gm5nh330z67c0","category_id":"cirki35ah000sm5nhy9i48yi6","_id":"cirki35ar000ym5nhgmc8fmh4"},{"post_id":"cirnliowk0000nep9p35z357u","category_id":"cirnmdfnk0002nep9eoc96ynx","_id":"cirnmdfnm0004nep9uj06mr2x"}],"PostTag":[{"post_id":"cirki359d0000m5nhpa340wte","tag_id":"cirki359n0002m5nheyny05vg","_id":"cirki35a20009m5nhsrddgl1x"},{"post_id":"cirki359j0001m5nhy8eylf81","tag_id":"cirki359z0006m5nhdilup80y","_id":"cirki35a7000fm5nh4d4hl9l1"},{"post_id":"cirki359r0004m5nhffk2g39w","tag_id":"cirki35a6000dm5nhpls6mtms","_id":"cirki35ad000lm5nhh0vqlijb"},{"post_id":"cirki359u0005m5nhpuazv3o2","tag_id":"cirki35ab000jm5nh2b5yws98","_id":"cirki35af000pm5nhfgk86i5e"},{"post_id":"cirki35a00007m5nh6sc0azkj","tag_id":"cirki35ae000nm5nhdzcrpawh","_id":"cirki35at0010m5nhtbt5gyyl"},{"post_id":"cirki35a00007m5nh6sc0azkj","tag_id":"cirki35ah000rm5nhr645vpma","_id":"cirki35at0011m5nhdunxnayr"},{"post_id":"cirki35a00007m5nh6sc0azkj","tag_id":"cirki35am000um5nhy6rwhud1","_id":"cirki35au0013m5nhc99uzj3z"},{"post_id":"cirki35a00007m5nh6sc0azkj","tag_id":"cirki35aq000xm5nhz0kbqwei","_id":"cirki35av0014m5nhdlbhjvgn"},{"post_id":"cirki35a3000am5nh6wkfykz3","tag_id":"cirki35ar000zm5nh09pfl8rr","_id":"cirki35aw0016m5nhfb44ke61"},{"post_id":"cirki35a7000gm5nh330z67c0","tag_id":"cirki35ab000jm5nh2b5yws98","_id":"cirki35ay0018m5nhhd8lyvy9"},{"post_id":"cirnliowk0000nep9p35z357u","tag_id":"cirnmdfnj0001nep9s9l7qr82","_id":"cirnmdfnl0003nep9bf78tu9p"}],"Tag":[{"name":"SVN","_id":"cirki359n0002m5nheyny05vg"},{"name":"vim","_id":"cirki359z0006m5nhdilup80y"},{"name":"my life","_id":"cirki35a6000dm5nhpls6mtms"},{"name":"mylife","_id":"cirki35ab000jm5nh2b5yws98"},{"name":"hexo","_id":"cirki35ae000nm5nhdzcrpawh"},{"name":"duoshuo","_id":"cirki35ah000rm5nhr645vpma"},{"name":"搭建自己的博客","_id":"cirki35am000um5nhy6rwhud1"},{"name":"GitHub Pages","_id":"cirki35aq000xm5nhz0kbqwei"},{"name":"smarty","_id":"cirki35ar000zm5nh09pfl8rr"},{"name":"学习","_id":"cirki35at0012m5nhevsievv2"},{"name":"translation","_id":"cirki3o4a0019m5nhgji2wwnq"},{"name":"promise","_id":"cirnmdfnj0001nep9s9l7qr82"}]}}