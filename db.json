{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/fun.gif","path":"images/fun.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/hing.jpeg","path":"images/hing.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/my.js","path":"js/src/my.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"8641291ef2361d34017bc2330841bc631a7c1b8a","modified":1475140569000},{"_id":"themes/hexo-theme-next/.DS_Store","hash":"4c53b1552ea8960d1bc39f8bb16c095e2e90cb26","modified":1471784787000},{"_id":"themes/hexo-theme-next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1470328931000},{"_id":"themes/hexo-theme-next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1470328931000},{"_id":"themes/hexo-theme-next/README.md","hash":"0b709591995001cd860384d6c189e51d91690714","modified":1470328931000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"ada0d09416d0dfbef52ad35330958251877e0c3c","modified":1491034219000},{"_id":"themes/hexo-theme-next/package.json","hash":"bd016b54983b7e06a649ee915b2e13a60d47553e","modified":1470328931000},{"_id":"source/_posts/.DS_Store","hash":"1874e88dcd9e930fe6ffcf89398ce7cdbcfbbbf7","modified":1473779894000},{"_id":"source/_posts/BEM.md","hash":"1b292cba3d122bc8c7bab5cfa6ec509169cac241","modified":1473780923000},{"_id":"source/_posts/EDM.md","hash":"43b4361efe65d49a93b8a2c16aa5e25e05cb4dcf","modified":1475139520000},{"_id":"source/_posts/SVN的浅尝辄止.md","hash":"4fcbe2213e685772dd8fcb67a9ae8194f50145c3","modified":1470328931000},{"_id":"source/_posts/bigpipe.md","hash":"b895dd6dca1ae10fd78f059c2cedf8de3d53e5d0","modified":1491033763000},{"_id":"source/_posts/here.md","hash":"ecd310df7b80f4643cf82b5a031a21bd0713c72c","modified":1470328931000},{"_id":"source/_posts/first-to-vim.md","hash":"ad933926c51f7fae7bb5aff6f08de644e189cb3f","modified":1470503847000},{"_id":"source/_posts/first-compelete-node-project.md","hash":"c4254d60c4ea456c01f52642064488f91509754b","modified":1487125235000},{"_id":"source/_posts/choose.md","hash":"c86f9ad0ee5e8516846ade1071de88a2fa687fa6","modified":1479396299000},{"_id":"source/_posts/hexo.md","hash":"1db1f97ff35c5357d8b622d68dfb2aa2014f1fa8","modified":1470328931000},{"_id":"source/_posts/hing.md","hash":"99516011e3f17fd400ce443a68ed873232d7e01d","modified":1470417697000},{"_id":"source/_posts/promise.md","hash":"bc99f79d414967c23bea3dffe31658513f031e92","modified":1470795068000},{"_id":"source/_posts/react.md","hash":"3ea53d79894cffc8aa88b7c6f914dbd68834aaa0","modified":1490883581000},{"_id":"source/_posts/smarty.md","hash":"6eb633a41a8ed7c20dc9f5fb158848f7cb2aa618","modified":1470328931000},{"_id":"source/_posts/vim01.md","hash":"05d516fdd073ccbfd3696e770200733cb2f66860","modified":1471022590000},{"_id":"source/_posts/vim02.md","hash":"1cb8944a0c1b2f874952d6694b79b23ad4124c09","modified":1471792643000},{"_id":"source/_posts/weekly.md","hash":"62b4e18cb46b8a72764e728fdfcf3ba672bd8755","modified":1470328931000},{"_id":"source/_posts/whatshouldido.md","hash":"c9be863c29361c5feccf8f7b09e14d658f4c08ea","modified":1480348864000},{"_id":"source/about/index.md","hash":"f28f5a0f587ae1fc7b1d78af9c5aa32257afd58f","modified":1470843564000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1470328931000},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"4c752913837a1c1f9e89c8e4030718b1578145f1","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"0b3f5d1a9e0ce68c532aa4d0d864aeaf3a1025ba","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"4a3a379b60724e91059810fec996341339ffe3d0","modified":1470842952000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"ee11d8b5866345f13e348ed68ccd0810e07439a2","modified":1470843243000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1470328931000},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1471784787000},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"0674b9bf3103ca32e04f16c7f7a6adad7e32e011","modified":1470844119000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"794797c1957dd708256a5368e38c62d510f2bd86","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"0723351816bd6e1ffa0e037e4ffc0beecbdd9cd7","modified":1470840705000},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"7edcc47b01b60e565b39b2baf3a87c20b61c7eaf","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"67589e1a4c0b7480c529524b73985fce7705e336","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"7ef0267f4964410fe2000d5ce2b1627290c8f4f2","modified":1470417939000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"f12d7b0946d37853caa29009e6d134c2a378ad20","modified":1470328931000},{"_id":"themes/hexo-theme-next/scripts/filters/sticky.js","hash":"6b1ea0c09105352813357d0fff4e1d3f4c821fa3","modified":1470328931000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1470328931000},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1470328931000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","hash":"ecce1650203033990609183f77c9fe5958856822","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/fun.gif","hash":"f4b3f3e82c7f1f41898338fc54229287fa502745","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/hing.jpeg","hash":"3329370af82b9c3b8fdf5cd56d3b7742aa643564","modified":1471784719000},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/bootstrap/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"2b8f8c63abfcc805fad42b1c174cf61b6233d345","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics.swig","hash":"d79bd946f07b83b47926dd67bb9d40e652b94769","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/baidushare.swig","hash":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/mathjax.swig","hash":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"68b6859fb48fe8358e567fc324f218cecfc3a533","modified":1470722520000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"e6488372eacb4c8acbda42ed366e27a6de7693d4","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"72d1fe35024ea91ebfd0298d1fbc8df82abd4ce7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"cca1fe42d49d3946f44b6ef1b247175f16ba796c","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"9815469d0142811f98384b4f7046edaae7a7f3ff","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/my.js","hash":"1287f90d67ed74f717ff8395ddcafc7d0a8d9262","modified":1471784329000},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"7eb00abf9bc14516463d9f29db41805e808a565c","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1470328931000},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/posts-expand.styl","hash":"54ef223d6683ad9ed21b24e8091c4dd63001316f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/_section/header.styl","hash":"a6aa8a56f9f645ae5a76a1034f79adf73b053aa0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"6fce199d83342aa9964449b8b8264772558336b9","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"8d9b0f37cf0cd1c25e36303041406a8c72caf766","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"2432b833add17ddd35aad098bf300d3f951375d2","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"5f766cf26f966dbf9dcfe681f40ab9032e3e8a08","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"1631a430655eadb485574d1a9bedd49460988b11","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"5a8036fc61207ca0fe38c9782ed2f686fbf764be","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"fc7d96b897290dbd93bc8c515a2058fc4c374ea7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"36d707098100abd1ded76a2d016d8c95691b2420","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"159464cb8a7e01e32db9ec70dec391ec70a72f9c","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"eb4f5a0ae12b67d5e9b24056ec5715d03deda856","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"58a036397de73d868fee16f34d246a3d863f30c2","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"dcbfef1c76288620f7f405a7aeba893d458d5b6a","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"b28187c610bf5f05e27732f72c3486494689bbfe","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"5d189b059c0a475917d771b349582dacdd575951","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"6242be4307a3b3dafc14e556f51c8875c41a1ddd","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"23dd966324937deeccc8f5fa16a6d32e4e46243b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"719e09bb2e8fb82183381fadb0708aa761f1e0b4","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-more-link.styl","hash":"5c415dc8efab7c1bdeffacafa3100d1da6628b03","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"01db9373cd13c1aec840205c622064dd6ae03361","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"6533563b34241e5c73da68156aba89e880b93f53","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"1099b5d07a60d93dad6221677c60cba60a82266b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"c946b642bccc7a73c471bf6f119e40f54d0f1663","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1470328931000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1470328931000},{"_id":"public/archives/index.html","hash":"656e184bf57a8bf1eaf191541d8cb2c877ac0fc9","modified":1491034250121},{"_id":"public/archives/page/2/index.html","hash":"4793643c08864976c50b596117eb36314cf27080","modified":1491034250121},{"_id":"public/archives/page/3/index.html","hash":"3705fe7309f4960aa27de1402279224e4297af4a","modified":1491034250122},{"_id":"public/archives/page/4/index.html","hash":"747b34849b35fc5ce040cca32bb09534e91bdde4","modified":1491034250122},{"_id":"public/archives/2016/index.html","hash":"88e1ee2e3784c8998dac44de117064c0fa0ccf92","modified":1491034250122},{"_id":"public/archives/2016/page/2/index.html","hash":"9d94effbe639ab8ede680851ce2960c21f131076","modified":1491034250123},{"_id":"public/archives/2016/page/3/index.html","hash":"2cd41838f3fcf93d1cfd8b3bc311327916078287","modified":1491034250123},{"_id":"public/archives/2016/01/index.html","hash":"bbb996a4ff48d2509b7f1b5ec60fda4b6748cdee","modified":1491034250123},{"_id":"public/archives/2016/03/index.html","hash":"3808d646cdf99eb4b77ddcff70a56569da1c418c","modified":1491034250123},{"_id":"public/archives/2016/08/index.html","hash":"9a18087f4a1a2665f2e07b5315dcdaa35f2ddba5","modified":1491034250123},{"_id":"public/archives/2016/08/page/2/index.html","hash":"14f706a68186903c7a0ef67e1ba361c17fd97a27","modified":1491034250123},{"_id":"public/archives/2016/09/index.html","hash":"c7eb8c0523ffec5d4f42c898a13fcf8b619cd95f","modified":1491034250123},{"_id":"public/archives/2016/11/index.html","hash":"af47470b7c4cc27d567c4a093e2bd2f4960b9580","modified":1491034250123},{"_id":"public/archives/2017/index.html","hash":"56bbf0947b10e0f547df81b580795e1b49a60b5b","modified":1491034250123},{"_id":"public/archives/2017/02/index.html","hash":"6977583587b34c39380a15589256a1f48e91e0e5","modified":1491034250123},{"_id":"public/archives/2017/03/index.html","hash":"6d1b18c6a7bf22f691223d2161ed3ea66bf07bf9","modified":1491034250123},{"_id":"public/archives/2017/04/index.html","hash":"f63d4acbaf8078458eca5188607d68d14e44295d","modified":1491034250123},{"_id":"public/categories/SVN/index.html","hash":"f8bf1f229c6b21812ecc245c8ab633f503da5585","modified":1491034250123},{"_id":"public/categories/vim/index.html","hash":"b9ce46d5b3f02bb28ef2fac01fcee44fd918906b","modified":1491034250123},{"_id":"public/categories/mylife/index.html","hash":"e8cd8a1dcbaecae85382d961799fc40c93cd572f","modified":1491034250123},{"_id":"public/categories/primise/index.html","hash":"9f65f174189ac4397a31b5f40e0c7cf95408f202","modified":1491034250123},{"_id":"public/categories/react/index.html","hash":"618a7bcd7de639d69204ab9ecc3908497289d269","modified":1491034250123},{"_id":"public/categories/smarty/index.html","hash":"f079f7c0c739c5a562ab94e1e89dd0a7115c1ef3","modified":1491034250123},{"_id":"public/categories/life/index.html","hash":"64bfecac6066c68c44394367b28e1ffed428917c","modified":1491034250123},{"_id":"public/page/4/index.html","hash":"9a892aabc9ffd45f9066dc1346d2688aead2e528","modified":1491034250123},{"_id":"public/tags/BEM/index.html","hash":"223230773470446d3494addaab4f1f97b90c7184","modified":1491034250123},{"_id":"public/tags/EDM/index.html","hash":"67abe92fde20f383c7642ab2dec14f6ba0571d08","modified":1491034250124},{"_id":"public/tags/rule/index.html","hash":"c66609d04d4256fe9db8dfae6b7f7c039b518701","modified":1491034250124},{"_id":"public/tags/SVN/index.html","hash":"ff0b9cd5501ab0dbd82cbe3d6e2317d15991de33","modified":1491034250124},{"_id":"public/tags/bigpipe/index.html","hash":"55cd578d6860141080ea87a2d61e71c746a17575","modified":1491034250124},{"_id":"public/tags/my-life/index.html","hash":"329fb7bcfffc9bf23cb211157600301c92fd3b65","modified":1491034250124},{"_id":"public/tags/vim/index.html","hash":"d6c8b963ef81b68a03e1297887687e7b74dae2dd","modified":1491034250124},{"_id":"public/tags/node/index.html","hash":"1fc208454b81fa0bae2b3989dc40ff71e1e6b699","modified":1491034250124},{"_id":"public/tags/express/index.html","hash":"7559184aa24e08be91c230372050b48134bd8e0a","modified":1491034250124},{"_id":"public/tags/mylife/index.html","hash":"d4cffb4b35fcc427841c12a122c718e1e875caa7","modified":1491034250124},{"_id":"public/tags/hexo/index.html","hash":"88217269488be9f8d1c1e9bc870f09b425947370","modified":1491034250124},{"_id":"public/tags/duoshuo/index.html","hash":"bda56587f59408b7ffdb23292b5c62c66fb6a9bb","modified":1491034250124},{"_id":"public/tags/搭建自己的博客/index.html","hash":"3956d303d97ef3a935c8f4e5153cb79efe4e77f2","modified":1491034250124},{"_id":"public/tags/GitHub-Pages/index.html","hash":"47b418dec74d09cf63f3631ffc62e3b690c38d90","modified":1491034250124},{"_id":"public/tags/promise/index.html","hash":"5b6a5e99bb31ae3a33bf9fbec78abdb1e4b0a9ec","modified":1491034250124},{"_id":"public/tags/react/index.html","hash":"d59ead4b59323da49c026b36b95365c8c4e2cea0","modified":1491034250124},{"_id":"public/categories/hexo/index.html","hash":"a34392869456fb77de6e19a50fc2c181eaab16c0","modified":1491034250124},{"_id":"public/tags/smarty/index.html","hash":"aaae535984344c007040bbbc7b0d36b7ea962b3f","modified":1491034250124},{"_id":"public/about/index.html","hash":"eda78a712cabb64459b084df700ebf175a4a5a8e","modified":1491034250124},{"_id":"public/2017/04/01/bigpipe/index.html","hash":"15efc0acc3af1cf2bc4be80049f1990cc2be0c22","modified":1491034250124},{"_id":"public/2017/03/30/react/index.html","hash":"87385d2f1b7f6d722e897de2906a6ecd2bc6f835","modified":1491034250124},{"_id":"public/2017/02/14/first-compelete-node-project/index.html","hash":"7b389e966752f301262096d07eccd9cb98cf3134","modified":1491034250125},{"_id":"public/2016/11/28/whatshouldido/index.html","hash":"938a352f81bbb387b3249c22ae8e728d7b39dfa3","modified":1491034250125},{"_id":"public/2016/11/17/choose/index.html","hash":"23f9624f98d15eb9f16a47ec15b5322017b1c691","modified":1491034250125},{"_id":"public/2016/09/29/EDM/index.html","hash":"1a6894cdf51bad0c854bffd613c63773bedef8ff","modified":1491034250125},{"_id":"public/2016/09/13/BEM/index.html","hash":"31674ba3a73c9c88ee1a267b7925b38cf8db3273","modified":1491034250125},{"_id":"public/2016/08/21/vim02/index.html","hash":"01d28e6c1b5c064cc842ae9663bfeb030bb8aa67","modified":1491034250125},{"_id":"public/2016/08/13/vim01/index.html","hash":"672adc57ba46709f99e36a58386a999c832574ae","modified":1491034250125},{"_id":"public/2016/08/09/promise/index.html","hash":"28594e99a29cb215b7b1736eb0af31feb1f93d55","modified":1491034250125},{"_id":"public/2016/08/07/first-to-vim/index.html","hash":"1f44e65849ff5bc9a4e5524f0bd49fad840de3ca","modified":1491034250125},{"_id":"public/2016/08/05/hing/index.html","hash":"d0e5f54ff7fdf30beb5d50bc8d166f5998538595","modified":1491034250125},{"_id":"public/2016/08/05/here/index.html","hash":"4da8ae6a0fcdb17358625ab884bf919965a1d97d","modified":1491034250125},{"_id":"public/2016/03/15/SVN的浅尝辄止/index.html","hash":"3ae7f77aaecf12d8f9a9a20785671e39b8118679","modified":1491034250125},{"_id":"public/2016/03/10/smarty/index.html","hash":"5113071ae71ebe568a9cbcaac5fb89df3513b7b6","modified":1491034250125},{"_id":"public/2016/01/29/weekly/index.html","hash":"f8f98f102930f9012c0d00c5a0a1ee2ac495d936","modified":1491034250125},{"_id":"public/2016/01/27/hexo/index.html","hash":"d67a639ce7b4f78705d231d6ed0a3440d183e216","modified":1491034250126},{"_id":"public/index.html","hash":"b759df94f42522f180b7f11b0ad89544de83b099","modified":1491034250126},{"_id":"public/page/2/index.html","hash":"a1dfe72816ab7615e062e7fd254a7b8959f1fe60","modified":1491034250126},{"_id":"public/page/3/index.html","hash":"8025ba433455bbbadcd3e49008b9b2322fc9c008","modified":1491034250126},{"_id":"public/images/avatar.jpg","hash":"ecce1650203033990609183f77c9fe5958856822","modified":1491034250140},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1491034250140},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1491034250140},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1491034250140},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1491034250140},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1491034250141},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1491034250141},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1491034250141},{"_id":"public/images/fun.gif","hash":"f4b3f3e82c7f1f41898338fc54229287fa502745","modified":1491034250141},{"_id":"public/images/hing.jpeg","hash":"3329370af82b9c3b8fdf5cd56d3b7742aa643564","modified":1491034250141},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491034250141},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491034250141},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1491034250141},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1491034250141},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491034250141},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1491034250141},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1491034250141},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491034250141},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491034250141},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491034250141},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491034250141},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491034250141},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491034250141},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1491034250141},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1491034250141},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491034250141},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1491034250656},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1491034250661},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1491034250662},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1491034250669},{"_id":"public/js/src/bootstrap.js","hash":"cca1fe42d49d3946f44b6ef1b247175f16ba796c","modified":1491034250669},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1491034250669},{"_id":"public/js/src/motion.js","hash":"9815469d0142811f98384b4f7046edaae7a7f3ff","modified":1491034250669},{"_id":"public/js/src/my.js","hash":"1287f90d67ed74f717ff8395ddcafc7d0a8d9262","modified":1491034250669},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1491034250669},{"_id":"public/js/src/utils.js","hash":"7eb00abf9bc14516463d9f29db41805e808a565c","modified":1491034250669},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1491034250669},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1491034250669},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1491034250669},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1491034250669},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1491034250669},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1491034250669},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1491034250669},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1491034250669},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1491034250669},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1491034250669},{"_id":"public/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1491034250669},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1491034250669},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491034250669},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1491034250669},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1491034250669},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1491034250669},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1491034250670},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1491034250670},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1491034250670},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1491034250670},{"_id":"public/css/main.css","hash":"32b75efa62b3f27a03beadb5df46a94765b315b2","modified":1491034250670},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1491034250670},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1491034250670},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491034250670},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1491034250670},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1491034250670},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1491034250670},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1491034250670},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1491034250670},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1491034250670},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1491034250670},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1491034250680}],"Category":[{"name":"SVN","_id":"cj0yzakzn00054fry3toyc4kh"},{"name":"vim","_id":"cj0yzakzr000c4fryrgy3vhgd"},{"name":"mylife","_id":"cj0yzakzz000i4fry3ckrgdac"},{"name":"hexo","_id":"cj0yzal04000p4fryw2qsoa3y"},{"name":"primise","_id":"cj0yzal0d00114fryc6u6r2yk"},{"name":"react","_id":"cj0yzal0f00164fryd2qi1tc2"},{"name":"smarty","_id":"cj0yzal0g001b4frywynqx0bm"},{"name":"life","_id":"cj0yzal0h001e4fryfjv0likj"}],"Data":[],"Page":[{"title":"这好像是一个关于我","comments":0,"layout":"post","_content":"闷骚而近妖，Hing，正在完善中。。。 \n","source":"about/index.md","raw":"---\ntitle: 这好像是一个关于我 \ncomments: false\nlayout: post\n---\n闷骚而近妖，Hing，正在完善中。。。 \n","date":"2016-08-10T15:39:24.000Z","updated":"2016-08-10T15:39:24.000Z","path":"about/index.html","_id":"cj0yzal4400284fry9pp57617","content":"<p>闷骚而近妖，Hing，正在完善中。。。 </p>\n","excerpt":"","more":"<p>闷骚而近妖，Hing，正在完善中。。。 </p>\n"}],"Post":[{"title":"BEM","date":"2016-09-13T15:04:18.000Z","_content":"#### 前话\n拖延症简直太可怕了！！！这篇迟来的质量还不怎么好的翻译应该还会陆续修改。说说这大半个月的时间在干啥？修改了一个项目的小图标，改得我心力交瘁，其中还出了一些低级错误，实在是心态差点就放不正了。然后去参加了南京的JS.JSconf开发大会，收获也很多，但是和想象中的略有出入。后面会写一篇文章来说一下这次大会。然后就是这篇翻译，这篇翻译来自BEM的官方的文档，快速开始。BEM命名法来自俄罗斯的一个搜索网站，具体的可以google一下，我就不赘述了。内容比较简单，我的渣英语勉强应付得来，有些不知道怎么翻译的词和句我都直接写的原文，相信能意会的。其中可能还有不少错误，后面会陆续修正或者添加内容。（css代码无法高亮我也是醉了😑）\n\n每个web开发者都会遇到相同的问题：\n* How to reuse codebase?\n* How to avoid copy/paste?\n* How to reduce comlexity and simplify refactoring?\n* How to get self-documented code?\n\n> JUST USE BEM\n\n#### 简介\nBEM(Block,Element,Modifier)对与web开发来说一个组件化的方法。这个想法的背后是为了把用户界面划分到独立的块中。这样的话，就算是复杂的UI也能够简单快速的开发，并且能够不通过复制粘贴来复用代码。\n\n#### Block\n一个功能性独立页面组建能够被服用。在HTML里面，blocks通常相当于那些带有`class`属性的元素。\n\n特性：\n* `block`的名字是描述它的用途（“这是什么？”——`menu` or `button`），而不是它的状态（“它看起来是什么样子？”——`red` or `big`）。\n\n举例\n```javascript\n<!-- Correct. the 'error' block is semantically meaningful -->\n<div class=\"error\"></div>\n\n<!-- Incorrect. It describes the appearance -->\n<div class=\"res-text\"></div>\n```\n\n* block不应该影响它的环境，意味着你不应该为这个block设置额外的(geometry)`padding`，影响尺寸的边界或者位置属性。\n* 当你使用BEM的时候也不能用CSS 标签或者ID选择器\n\n以上的这些保证使得那些独立的block能够到处复用。\n\n##### blocks使用指南\n* 层叠嵌套(Nesting)\n1. Blocks能够互相层叠嵌套\n2. 你能够层叠嵌套任意层级\n\n举例：\n```css\n<!-- 'header' block -->\n<header class=\"header\">\n<!-- Nested 'logo' block -->\n<div class=\"logo\"></div>\n\n<!-- nested 'search-form' block -->\n<form class=\"search-form\"></form>\n</header>\n```\n\n#### Element\n一个不能够分离出来的用来拼凑block的部分。\n特性：\n* element的名字描述它的用途（“这是什么”——`item` , `text` , etc.)，而不是它的状态（“这是什么类型？或者这看起来是什么样子？”——`red`,`big`,etc）。\n* 一个`Element`的全称的结构是`block-name__element-name`。element的名字应该是从block的名字分离开来，并用双下划线(`__`)隔开。\n\n举例：\n```less\n<!-- 'search-form` block-->\n<form class=\"cearch-form\">\n    <!-- 'input' element in the 'search-form' block -->\n    <input class=\"search-form__input\">\n\n    <!-- 'button' element in the 'search-form' block -->\n    <button class=\"search-form__button\">Search</button>\n</form>\n```\n\n##### elements使用指南\n* 层叠嵌套（nesting)\n1. element能够互相层叠嵌套。\n2. 能够层叠嵌套任意的层级。\n3. 一个element总会是一个block的部分，而不可能是另外一个element的一部分。也就是说，element的名字不能用像`block_elem1_elem2`一个一个嵌套等级来命名。\n\n举例：\n```less\n<!-- correct. The structure of the full element name follows the pattern:'block-name__element-name' -->\n<form class=\"search-form\">\n    <div class=\"search-form__content\">\n        <input class=\"search-form__input\">\n\n        <button class=\"search-form-button\"></button>\n    </div>\n</form>\n\n<!-- incorrect. the structure of the full element name doesn't follow the pattern:'block-name_element-name' -->\n<form class=\"search-form\">\n    <div class=\"search-form__content\">\n        <!-- recommended:'search-form__imput' or 'search-form__content-input' -->\n        <input class=\"search-form__content-input\">\n\n        <!-- recommended:'search-form__button' or 'search-form__content-input' -->\n        <button class=\"search-form__content__button></button>\n    </div>\n</form>\n```\n\nblock名字定义了命名空间，这个命名空间保证elements有依赖（`block_elem`）。\n一个block能够又一个层叠嵌套的element结构的dom树：\n```less\n<div class=\"block\">\n    <div class=\"block_elem1\"></div>\n    <div class=\"block_elem2\"></div>\n    <div class=\"block_elem3\"></div>\n</div>\n```\n无论如何，在BEM方法里面，block的结构总是表现为一个平坦的element列表。\n```less\n.block{}\n.block__elem1{}\n.block__elem2{}\n.block__elem3{}\n```\n这样能够使你在不用改变每个单独的element的代码的情况下改变block的dom结构。\n```less\n<div class=\"block\">\n    <div class=\"block__elem1\"></div>\n    <div class=\"block__elem2\"></div>\n</div>\n\n<div class=\"block\">\n    <div class=\"block__elem3\"></div>\n</div>\n```\n就算blocks 的结构改变，但是对于elements的作用规则和命名仍然是一样的。\n\n##### 关联(membership)\n一个Element总是一个Block的一部分，并且你不能在该Block之外单独使用它。\n```less\n<!-- correct. elements are located inside the 'search-form' block -->\n<!-- 'search-form' block -->\n<form class=\"search-form\">\n    <!-- 'input' selement in the 'search-form' block -->\n    <input class=\"search-form___input\">\n\n    <!-- 'button' element in the 'search-form' block -->\n    <button class=\"search-form__button\">search</button>\n</form>\n\n<!-- incorrect. elements are located outsde of the context of the 'search-form' block -->\n<!-- 'search-form' block -->\n<form class=\"search-form\"></form>\n\n<!-- 'input' element in the 'search-form' block -->\n<input class=\"search-form_input\">\n\n<!-- 'button' element in the 'search-form' block -->\n<button class=\"search-form__button\">search</button>\n```\n\n##### Optionality\n一个element是一个可选的块组件。并不是所有的blocks都拥有elements。\n```less\n<!-- 'search-form' block -->\n<div class=\"search-form>\n    <!-- 'input' block -->\n    <input class=\"input\">\n\n    <!-- 'button' block -->\n    <button class=\"button\">search</button>\n</div>\n```\n\n#### 我应该创建一个block或者element吗？\n1. 如果一节代码将会被复用，并且不依赖于其他页面组件运行，那么你就应该创建一个block\n2. 如果一节代码在没有parent entity的情况下不能被单独拿出来使用，那么通常情况下应该创建一个element\n\n例外的情况就是elements必须拆分成更小的部分，子元素，以便更简明的开发。在BEM命名法里面，你不能够创建elemets的elements。在这种情况下，代替创建一个elements的更高方法就是创建一个service block。\n\n#### 修饰器（Modifier）\n一个用来定义block or element的是appearance，状态或者动作的实体（entity）。\n特性：\n* 修饰器的名字用来描述它的appearance（“尺寸是什么？”或者“是哪个主题？”等等——`size_s` or `theme_islands`），它的状态（“它为什么与其它的不同？”——`disabled`,`focused`,etc.）或者它的动作（“它的表现是什么？”或者“它是怎么样来相应用户的？”——比如`directions_left-top`）。\n* 修饰器的名字使用下划线`_`来区分于block和element。\n\n##### 修饰器的类型\nBoolean\n* 只有当the presence or absence of the modifier is important,并且它的值是无关紧要的时候才使用，比如`disabled`。如果一个布尔修饰器是存在的，并且假设它的值是`true`。\n* 修饰器的全称的结构如下所示：\n1. `block-name_modifier-name`\n2. `block-name__element-name_modifier-name`\n\n```less\n<!-- The 'search-form' block has the 'focused' boolean modifier -->\n<form class=\"search-form search-form_focused\">\n    <input class=\"search-form__input\">\n\n    <!-- the 'button' element has the 'disabled' boolean modifer -->\n    <button class=\"search-form__button search-form__button_disabled\">Search</button>\n</form>\n```\n\n键值对\n＊ 当修饰器的值是重要的时候使用，比如“一个带有`islands`设计主题的菜单“：`menu_theme_islands`\n* 修饰器名字的全称结构如下所示：\n1. `block-name_modifier-name_modifier-value`\n2. `block-name__element-name-modifier-name_modifier-value`\n\n```less\n<!-- the 'search-form' block has the 'theme' modifier with the value 'islands' -->\n<form class=\"search-form search-form_theme_islands\">\n    <input class=\"search-form__input\">\n\n    <!-- the 'button' element has the 'size' modifier with the value 'm' -->\n    <button class=\"search-form__button search-form__button-size_m\">Search</button>\n</form>\n\n<!-- you cant use two identical modifiers with different values simultaneously -->\n<form class=\"search-form search-form_theme_islands search-form_theme_lite\">\n    <input class=\"search-form__input\">\n    <button class=\"search-form__button search-form__button_size_s search-form__button_size_m\">Search</button>\n</form>\n```\n\n#### 附录\n文章来源：https://en.bem.info/methodology/quick-start/","source":"_posts/BEM.md","raw":"---\ntitle: BEM\ndate: 2016-09-13 23:04:18\ntags:\n- BEM\n---\n#### 前话\n拖延症简直太可怕了！！！这篇迟来的质量还不怎么好的翻译应该还会陆续修改。说说这大半个月的时间在干啥？修改了一个项目的小图标，改得我心力交瘁，其中还出了一些低级错误，实在是心态差点就放不正了。然后去参加了南京的JS.JSconf开发大会，收获也很多，但是和想象中的略有出入。后面会写一篇文章来说一下这次大会。然后就是这篇翻译，这篇翻译来自BEM的官方的文档，快速开始。BEM命名法来自俄罗斯的一个搜索网站，具体的可以google一下，我就不赘述了。内容比较简单，我的渣英语勉强应付得来，有些不知道怎么翻译的词和句我都直接写的原文，相信能意会的。其中可能还有不少错误，后面会陆续修正或者添加内容。（css代码无法高亮我也是醉了😑）\n\n每个web开发者都会遇到相同的问题：\n* How to reuse codebase?\n* How to avoid copy/paste?\n* How to reduce comlexity and simplify refactoring?\n* How to get self-documented code?\n\n> JUST USE BEM\n\n#### 简介\nBEM(Block,Element,Modifier)对与web开发来说一个组件化的方法。这个想法的背后是为了把用户界面划分到独立的块中。这样的话，就算是复杂的UI也能够简单快速的开发，并且能够不通过复制粘贴来复用代码。\n\n#### Block\n一个功能性独立页面组建能够被服用。在HTML里面，blocks通常相当于那些带有`class`属性的元素。\n\n特性：\n* `block`的名字是描述它的用途（“这是什么？”——`menu` or `button`），而不是它的状态（“它看起来是什么样子？”——`red` or `big`）。\n\n举例\n```javascript\n<!-- Correct. the 'error' block is semantically meaningful -->\n<div class=\"error\"></div>\n\n<!-- Incorrect. It describes the appearance -->\n<div class=\"res-text\"></div>\n```\n\n* block不应该影响它的环境，意味着你不应该为这个block设置额外的(geometry)`padding`，影响尺寸的边界或者位置属性。\n* 当你使用BEM的时候也不能用CSS 标签或者ID选择器\n\n以上的这些保证使得那些独立的block能够到处复用。\n\n##### blocks使用指南\n* 层叠嵌套(Nesting)\n1. Blocks能够互相层叠嵌套\n2. 你能够层叠嵌套任意层级\n\n举例：\n```css\n<!-- 'header' block -->\n<header class=\"header\">\n<!-- Nested 'logo' block -->\n<div class=\"logo\"></div>\n\n<!-- nested 'search-form' block -->\n<form class=\"search-form\"></form>\n</header>\n```\n\n#### Element\n一个不能够分离出来的用来拼凑block的部分。\n特性：\n* element的名字描述它的用途（“这是什么”——`item` , `text` , etc.)，而不是它的状态（“这是什么类型？或者这看起来是什么样子？”——`red`,`big`,etc）。\n* 一个`Element`的全称的结构是`block-name__element-name`。element的名字应该是从block的名字分离开来，并用双下划线(`__`)隔开。\n\n举例：\n```less\n<!-- 'search-form` block-->\n<form class=\"cearch-form\">\n    <!-- 'input' element in the 'search-form' block -->\n    <input class=\"search-form__input\">\n\n    <!-- 'button' element in the 'search-form' block -->\n    <button class=\"search-form__button\">Search</button>\n</form>\n```\n\n##### elements使用指南\n* 层叠嵌套（nesting)\n1. element能够互相层叠嵌套。\n2. 能够层叠嵌套任意的层级。\n3. 一个element总会是一个block的部分，而不可能是另外一个element的一部分。也就是说，element的名字不能用像`block_elem1_elem2`一个一个嵌套等级来命名。\n\n举例：\n```less\n<!-- correct. The structure of the full element name follows the pattern:'block-name__element-name' -->\n<form class=\"search-form\">\n    <div class=\"search-form__content\">\n        <input class=\"search-form__input\">\n\n        <button class=\"search-form-button\"></button>\n    </div>\n</form>\n\n<!-- incorrect. the structure of the full element name doesn't follow the pattern:'block-name_element-name' -->\n<form class=\"search-form\">\n    <div class=\"search-form__content\">\n        <!-- recommended:'search-form__imput' or 'search-form__content-input' -->\n        <input class=\"search-form__content-input\">\n\n        <!-- recommended:'search-form__button' or 'search-form__content-input' -->\n        <button class=\"search-form__content__button></button>\n    </div>\n</form>\n```\n\nblock名字定义了命名空间，这个命名空间保证elements有依赖（`block_elem`）。\n一个block能够又一个层叠嵌套的element结构的dom树：\n```less\n<div class=\"block\">\n    <div class=\"block_elem1\"></div>\n    <div class=\"block_elem2\"></div>\n    <div class=\"block_elem3\"></div>\n</div>\n```\n无论如何，在BEM方法里面，block的结构总是表现为一个平坦的element列表。\n```less\n.block{}\n.block__elem1{}\n.block__elem2{}\n.block__elem3{}\n```\n这样能够使你在不用改变每个单独的element的代码的情况下改变block的dom结构。\n```less\n<div class=\"block\">\n    <div class=\"block__elem1\"></div>\n    <div class=\"block__elem2\"></div>\n</div>\n\n<div class=\"block\">\n    <div class=\"block__elem3\"></div>\n</div>\n```\n就算blocks 的结构改变，但是对于elements的作用规则和命名仍然是一样的。\n\n##### 关联(membership)\n一个Element总是一个Block的一部分，并且你不能在该Block之外单独使用它。\n```less\n<!-- correct. elements are located inside the 'search-form' block -->\n<!-- 'search-form' block -->\n<form class=\"search-form\">\n    <!-- 'input' selement in the 'search-form' block -->\n    <input class=\"search-form___input\">\n\n    <!-- 'button' element in the 'search-form' block -->\n    <button class=\"search-form__button\">search</button>\n</form>\n\n<!-- incorrect. elements are located outsde of the context of the 'search-form' block -->\n<!-- 'search-form' block -->\n<form class=\"search-form\"></form>\n\n<!-- 'input' element in the 'search-form' block -->\n<input class=\"search-form_input\">\n\n<!-- 'button' element in the 'search-form' block -->\n<button class=\"search-form__button\">search</button>\n```\n\n##### Optionality\n一个element是一个可选的块组件。并不是所有的blocks都拥有elements。\n```less\n<!-- 'search-form' block -->\n<div class=\"search-form>\n    <!-- 'input' block -->\n    <input class=\"input\">\n\n    <!-- 'button' block -->\n    <button class=\"button\">search</button>\n</div>\n```\n\n#### 我应该创建一个block或者element吗？\n1. 如果一节代码将会被复用，并且不依赖于其他页面组件运行，那么你就应该创建一个block\n2. 如果一节代码在没有parent entity的情况下不能被单独拿出来使用，那么通常情况下应该创建一个element\n\n例外的情况就是elements必须拆分成更小的部分，子元素，以便更简明的开发。在BEM命名法里面，你不能够创建elemets的elements。在这种情况下，代替创建一个elements的更高方法就是创建一个service block。\n\n#### 修饰器（Modifier）\n一个用来定义block or element的是appearance，状态或者动作的实体（entity）。\n特性：\n* 修饰器的名字用来描述它的appearance（“尺寸是什么？”或者“是哪个主题？”等等——`size_s` or `theme_islands`），它的状态（“它为什么与其它的不同？”——`disabled`,`focused`,etc.）或者它的动作（“它的表现是什么？”或者“它是怎么样来相应用户的？”——比如`directions_left-top`）。\n* 修饰器的名字使用下划线`_`来区分于block和element。\n\n##### 修饰器的类型\nBoolean\n* 只有当the presence or absence of the modifier is important,并且它的值是无关紧要的时候才使用，比如`disabled`。如果一个布尔修饰器是存在的，并且假设它的值是`true`。\n* 修饰器的全称的结构如下所示：\n1. `block-name_modifier-name`\n2. `block-name__element-name_modifier-name`\n\n```less\n<!-- The 'search-form' block has the 'focused' boolean modifier -->\n<form class=\"search-form search-form_focused\">\n    <input class=\"search-form__input\">\n\n    <!-- the 'button' element has the 'disabled' boolean modifer -->\n    <button class=\"search-form__button search-form__button_disabled\">Search</button>\n</form>\n```\n\n键值对\n＊ 当修饰器的值是重要的时候使用，比如“一个带有`islands`设计主题的菜单“：`menu_theme_islands`\n* 修饰器名字的全称结构如下所示：\n1. `block-name_modifier-name_modifier-value`\n2. `block-name__element-name-modifier-name_modifier-value`\n\n```less\n<!-- the 'search-form' block has the 'theme' modifier with the value 'islands' -->\n<form class=\"search-form search-form_theme_islands\">\n    <input class=\"search-form__input\">\n\n    <!-- the 'button' element has the 'size' modifier with the value 'm' -->\n    <button class=\"search-form__button search-form__button-size_m\">Search</button>\n</form>\n\n<!-- you cant use two identical modifiers with different values simultaneously -->\n<form class=\"search-form search-form_theme_islands search-form_theme_lite\">\n    <input class=\"search-form__input\">\n    <button class=\"search-form__button search-form__button_size_s search-form__button_size_m\">Search</button>\n</form>\n```\n\n#### 附录\n文章来源：https://en.bem.info/methodology/quick-start/","slug":"BEM","published":1,"updated":"2016-09-13T15:35:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzakz300004frymsxcpq7z","content":"<h4 id=\"前话\"><a href=\"#前话\" class=\"headerlink\" title=\"前话\"></a>前话</h4><p>拖延症简直太可怕了！！！这篇迟来的质量还不怎么好的翻译应该还会陆续修改。说说这大半个月的时间在干啥？修改了一个项目的小图标，改得我心力交瘁，其中还出了一些低级错误，实在是心态差点就放不正了。然后去参加了南京的JS.JSconf开发大会，收获也很多，但是和想象中的略有出入。后面会写一篇文章来说一下这次大会。然后就是这篇翻译，这篇翻译来自BEM的官方的文档，快速开始。BEM命名法来自俄罗斯的一个搜索网站，具体的可以google一下，我就不赘述了。内容比较简单，我的渣英语勉强应付得来，有些不知道怎么翻译的词和句我都直接写的原文，相信能意会的。其中可能还有不少错误，后面会陆续修正或者添加内容。（css代码无法高亮我也是醉了😑）</p>\n<p>每个web开发者都会遇到相同的问题：</p>\n<ul>\n<li>How to reuse codebase?</li>\n<li>How to avoid copy/paste?</li>\n<li>How to reduce comlexity and simplify refactoring?</li>\n<li>How to get self-documented code?</li>\n</ul>\n<blockquote>\n<p>JUST USE BEM</p>\n</blockquote>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>BEM(Block,Element,Modifier)对与web开发来说一个组件化的方法。这个想法的背后是为了把用户界面划分到独立的块中。这样的话，就算是复杂的UI也能够简单快速的开发，并且能够不通过复制粘贴来复用代码。</p>\n<h4 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a>Block</h4><p>一个功能性独立页面组建能够被服用。在HTML里面，blocks通常相当于那些带有<code>class</code>属性的元素。</p>\n<p>特性：</p>\n<ul>\n<li><code>block</code>的名字是描述它的用途（“这是什么？”——<code>menu</code> or <code>button</code>），而不是它的状态（“它看起来是什么样子？”——<code>red</code> or <code>big</code>）。</li>\n</ul>\n<p>举例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- Correct. the <span class=\"string\">'error'</span> block is semantically meaningful --&gt;</div><div class=\"line\">&lt;div class=\"error\"&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- Incorrect. It describes the appearance --&gt;</div><div class=\"line\">&lt;div class=\"res-text\"&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>block不应该影响它的环境，意味着你不应该为这个block设置额外的(geometry)<code>padding</code>，影响尺寸的边界或者位置属性。</li>\n<li>当你使用BEM的时候也不能用CSS 标签或者ID选择器</li>\n</ul>\n<p>以上的这些保证使得那些独立的block能够到处复用。</p>\n<h5 id=\"blocks使用指南\"><a href=\"#blocks使用指南\" class=\"headerlink\" title=\"blocks使用指南\"></a>blocks使用指南</h5><ul>\n<li>层叠嵌套(Nesting)</li>\n</ul>\n<ol>\n<li>Blocks能够互相层叠嵌套</li>\n<li>你能够层叠嵌套任意层级</li>\n</ol>\n<p>举例：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 'header' block --&gt;</div><div class=\"line\">&lt;header class=\"header\"&gt;</div><div class=\"line\">&lt;!-- Nested 'logo' block --&gt;</div><div class=\"line\">&lt;div class=\"logo\"&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- nested 'search-form' block --&gt;</div><div class=\"line\">&lt;form class=\"search-form\"&gt;&lt;/form&gt;</div><div class=\"line\">&lt;/header&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h4><p>一个不能够分离出来的用来拼凑block的部分。<br>特性：</p>\n<ul>\n<li>element的名字描述它的用途（“这是什么”——<code>item</code> , <code>text</code> , etc.)，而不是它的状态（“这是什么类型？或者这看起来是什么样子？”——<code>red</code>,<code>big</code>,etc）。</li>\n<li>一个<code>Element</code>的全称的结构是<code>block-name__element-name</code>。element的名字应该是从block的名字分离开来，并用双下划线(<code>__</code>)隔开。</li>\n</ul>\n<p>举例：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 'search-form` block--&gt;</div><div class=\"line\">&lt;form class=\"cearch-form\"&gt;</div><div class=\"line\">    &lt;!-- 'input' element in the 'search-form' block --&gt;</div><div class=\"line\">    &lt;input class=\"search-form__input\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 'button' element in the 'search-form' block --&gt;</div><div class=\"line\">    &lt;button class=\"search-form__button\"&gt;Search&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"elements使用指南\"><a href=\"#elements使用指南\" class=\"headerlink\" title=\"elements使用指南\"></a>elements使用指南</h5><ul>\n<li>层叠嵌套（nesting)</li>\n</ul>\n<ol>\n<li>element能够互相层叠嵌套。</li>\n<li>能够层叠嵌套任意的层级。</li>\n<li>一个element总会是一个block的部分，而不可能是另外一个element的一部分。也就是说，element的名字不能用像<code>block_elem1_elem2</code>一个一个嵌套等级来命名。</li>\n</ol>\n<p>举例：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- correct. The structure of the full element name follows the pattern:'block-name__element-name' --&gt;</div><div class=\"line\">&lt;form class=\"search-form\"&gt;</div><div class=\"line\">    &lt;div class=\"search-form__content\"&gt;</div><div class=\"line\">        &lt;input class=\"search-form__input\"&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;button class=\"search-form-button\"&gt;&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- incorrect. the structure of the full element name doesn't follow the pattern:'block-name_element-name' --&gt;</div><div class=\"line\">&lt;form class=\"search-form\"&gt;</div><div class=\"line\">    &lt;div class=\"search-form__content\"&gt;</div><div class=\"line\">        &lt;!-- recommended:'search-form__imput' or 'search-form__content-input' --&gt;</div><div class=\"line\">        &lt;input class=\"search-form__content-input\"&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;!-- recommended:'search-form__button' or 'search-form__content-input' --&gt;</div><div class=\"line\">        &lt;button class=\"search-form__content__button&gt;&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>block名字定义了命名空间，这个命名空间保证elements有依赖（<code>block_elem</code>）。<br>一个block能够又一个层叠嵌套的element结构的dom树：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=\"block\"&gt;</div><div class=\"line\">    &lt;div class=\"block_elem1\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=\"block_elem2\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=\"block_elem3\"&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>无论如何，在BEM方法里面，block的结构总是表现为一个平坦的element列表。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.block</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block__elem1</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block__elem2</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block__elem3</span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>这样能够使你在不用改变每个单独的element的代码的情况下改变block的dom结构。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=\"block\"&gt;</div><div class=\"line\">    &lt;div class=\"block__elem1\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=\"block__elem2\"&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=\"block\"&gt;</div><div class=\"line\">    &lt;div class=\"block__elem3\"&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>就算blocks 的结构改变，但是对于elements的作用规则和命名仍然是一样的。</p>\n<h5 id=\"关联-membership\"><a href=\"#关联-membership\" class=\"headerlink\" title=\"关联(membership)\"></a>关联(membership)</h5><p>一个Element总是一个Block的一部分，并且你不能在该Block之外单独使用它。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- correct. elements are located inside the 'search-form' block --&gt;</div><div class=\"line\">&lt;!-- 'search-form' block --&gt;</div><div class=\"line\">&lt;form class=\"search-form\"&gt;</div><div class=\"line\">    &lt;!-- 'input' selement in the 'search-form' block --&gt;</div><div class=\"line\">    &lt;input class=\"search-form___input\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 'button' element in the 'search-form' block --&gt;</div><div class=\"line\">    &lt;button class=\"search-form__button\"&gt;search&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- incorrect. elements are located outsde of the context of the 'search-form' block --&gt;</div><div class=\"line\">&lt;!-- 'search-form' block --&gt;</div><div class=\"line\">&lt;form class=\"search-form\"&gt;&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 'input' element in the 'search-form' block --&gt;</div><div class=\"line\">&lt;input class=\"search-form_input\"&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 'button' element in the 'search-form' block --&gt;</div><div class=\"line\">&lt;button class=\"search-form__button\"&gt;search&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Optionality\"><a href=\"#Optionality\" class=\"headerlink\" title=\"Optionality\"></a>Optionality</h5><p>一个element是一个可选的块组件。并不是所有的blocks都拥有elements。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 'search-form' block --&gt;</div><div class=\"line\">&lt;div class=\"search-form&gt;</div><div class=\"line\">    &lt;!-- 'input' block --&gt;</div><div class=\"line\">    &lt;input class=\"input\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 'button' block --&gt;</div><div class=\"line\">    &lt;button class=\"button\"&gt;search&lt;/button&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"我应该创建一个block或者element吗？\"><a href=\"#我应该创建一个block或者element吗？\" class=\"headerlink\" title=\"我应该创建一个block或者element吗？\"></a>我应该创建一个block或者element吗？</h4><ol>\n<li>如果一节代码将会被复用，并且不依赖于其他页面组件运行，那么你就应该创建一个block</li>\n<li>如果一节代码在没有parent entity的情况下不能被单独拿出来使用，那么通常情况下应该创建一个element</li>\n</ol>\n<p>例外的情况就是elements必须拆分成更小的部分，子元素，以便更简明的开发。在BEM命名法里面，你不能够创建elemets的elements。在这种情况下，代替创建一个elements的更高方法就是创建一个service block。</p>\n<h4 id=\"修饰器（Modifier）\"><a href=\"#修饰器（Modifier）\" class=\"headerlink\" title=\"修饰器（Modifier）\"></a>修饰器（Modifier）</h4><p>一个用来定义block or element的是appearance，状态或者动作的实体（entity）。<br>特性：</p>\n<ul>\n<li>修饰器的名字用来描述它的appearance（“尺寸是什么？”或者“是哪个主题？”等等——<code>size_s</code> or <code>theme_islands</code>），它的状态（“它为什么与其它的不同？”——<code>disabled</code>,<code>focused</code>,etc.）或者它的动作（“它的表现是什么？”或者“它是怎么样来相应用户的？”——比如<code>directions_left-top</code>）。</li>\n<li>修饰器的名字使用下划线<code>_</code>来区分于block和element。</li>\n</ul>\n<h5 id=\"修饰器的类型\"><a href=\"#修饰器的类型\" class=\"headerlink\" title=\"修饰器的类型\"></a>修饰器的类型</h5><p>Boolean</p>\n<ul>\n<li>只有当the presence or absence of the modifier is important,并且它的值是无关紧要的时候才使用，比如<code>disabled</code>。如果一个布尔修饰器是存在的，并且假设它的值是<code>true</code>。</li>\n<li>修饰器的全称的结构如下所示：</li>\n</ul>\n<ol>\n<li><code>block-name_modifier-name</code></li>\n<li><code>block-name__element-name_modifier-name</code></li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- The 'search-form' block has the 'focused' boolean modifier --&gt;</div><div class=\"line\">&lt;form class=\"search-form search-form_focused\"&gt;</div><div class=\"line\">    &lt;input class=\"search-form__input\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- the 'button' element has the 'disabled' boolean modifer --&gt;</div><div class=\"line\">    &lt;button class=\"search-form__button search-form__button_disabled\"&gt;Search&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<p>键值对<br>＊ 当修饰器的值是重要的时候使用，比如“一个带有<code>islands</code>设计主题的菜单“：<code>menu_theme_islands</code></p>\n<ul>\n<li>修饰器名字的全称结构如下所示：</li>\n</ul>\n<ol>\n<li><code>block-name_modifier-name_modifier-value</code></li>\n<li><code>block-name__element-name-modifier-name_modifier-value</code></li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- the 'search-form' block has the 'theme' modifier with the value 'islands' --&gt;</div><div class=\"line\">&lt;form class=\"search-form search-form_theme_islands\"&gt;</div><div class=\"line\">    &lt;input class=\"search-form__input\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- the 'button' element has the 'size' modifier with the value 'm' --&gt;</div><div class=\"line\">    &lt;button class=\"search-form__button search-form__button-size_m\"&gt;Search&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- you cant use two identical modifiers with different values simultaneously --&gt;</div><div class=\"line\">&lt;form class=\"search-form search-form_theme_islands search-form_theme_lite\"&gt;</div><div class=\"line\">    &lt;input class=\"search-form__input\"&gt;</div><div class=\"line\">    &lt;button class=\"search-form__button search-form__button_size_s search-form__button_size_m\"&gt;Search&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h4><p>文章来源：<a href=\"https://en.bem.info/methodology/quick-start/\" target=\"_blank\" rel=\"external\">https://en.bem.info/methodology/quick-start/</a></p>\n","excerpt":"","more":"<h4 id=\"前话\"><a href=\"#前话\" class=\"headerlink\" title=\"前话\"></a>前话</h4><p>拖延症简直太可怕了！！！这篇迟来的质量还不怎么好的翻译应该还会陆续修改。说说这大半个月的时间在干啥？修改了一个项目的小图标，改得我心力交瘁，其中还出了一些低级错误，实在是心态差点就放不正了。然后去参加了南京的JS.JSconf开发大会，收获也很多，但是和想象中的略有出入。后面会写一篇文章来说一下这次大会。然后就是这篇翻译，这篇翻译来自BEM的官方的文档，快速开始。BEM命名法来自俄罗斯的一个搜索网站，具体的可以google一下，我就不赘述了。内容比较简单，我的渣英语勉强应付得来，有些不知道怎么翻译的词和句我都直接写的原文，相信能意会的。其中可能还有不少错误，后面会陆续修正或者添加内容。（css代码无法高亮我也是醉了😑）</p>\n<p>每个web开发者都会遇到相同的问题：</p>\n<ul>\n<li>How to reuse codebase?</li>\n<li>How to avoid copy/paste?</li>\n<li>How to reduce comlexity and simplify refactoring?</li>\n<li>How to get self-documented code?</li>\n</ul>\n<blockquote>\n<p>JUST USE BEM</p>\n</blockquote>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>BEM(Block,Element,Modifier)对与web开发来说一个组件化的方法。这个想法的背后是为了把用户界面划分到独立的块中。这样的话，就算是复杂的UI也能够简单快速的开发，并且能够不通过复制粘贴来复用代码。</p>\n<h4 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a>Block</h4><p>一个功能性独立页面组建能够被服用。在HTML里面，blocks通常相当于那些带有<code>class</code>属性的元素。</p>\n<p>特性：</p>\n<ul>\n<li><code>block</code>的名字是描述它的用途（“这是什么？”——<code>menu</code> or <code>button</code>），而不是它的状态（“它看起来是什么样子？”——<code>red</code> or <code>big</code>）。</li>\n</ul>\n<p>举例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- Correct. the <span class=\"string\">'error'</span> block is semantically meaningful --&gt;</div><div class=\"line\">&lt;div class=\"error\"&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- Incorrect. It describes the appearance --&gt;</div><div class=\"line\">&lt;div class=\"res-text\"&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>block不应该影响它的环境，意味着你不应该为这个block设置额外的(geometry)<code>padding</code>，影响尺寸的边界或者位置属性。</li>\n<li>当你使用BEM的时候也不能用CSS 标签或者ID选择器</li>\n</ul>\n<p>以上的这些保证使得那些独立的block能够到处复用。</p>\n<h5 id=\"blocks使用指南\"><a href=\"#blocks使用指南\" class=\"headerlink\" title=\"blocks使用指南\"></a>blocks使用指南</h5><ul>\n<li>层叠嵌套(Nesting)</li>\n</ul>\n<ol>\n<li>Blocks能够互相层叠嵌套</li>\n<li>你能够层叠嵌套任意层级</li>\n</ol>\n<p>举例：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 'header' block --&gt;</div><div class=\"line\">&lt;header class=\"header\"&gt;</div><div class=\"line\">&lt;!-- Nested 'logo' block --&gt;</div><div class=\"line\">&lt;div class=\"logo\"&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- nested 'search-form' block --&gt;</div><div class=\"line\">&lt;form class=\"search-form\"&gt;&lt;/form&gt;</div><div class=\"line\">&lt;/header&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h4><p>一个不能够分离出来的用来拼凑block的部分。<br>特性：</p>\n<ul>\n<li>element的名字描述它的用途（“这是什么”——<code>item</code> , <code>text</code> , etc.)，而不是它的状态（“这是什么类型？或者这看起来是什么样子？”——<code>red</code>,<code>big</code>,etc）。</li>\n<li>一个<code>Element</code>的全称的结构是<code>block-name__element-name</code>。element的名字应该是从block的名字分离开来，并用双下划线(<code>__</code>)隔开。</li>\n</ul>\n<p>举例：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 'search-form` block--&gt;</div><div class=\"line\">&lt;form class=\"cearch-form\"&gt;</div><div class=\"line\">    &lt;!-- 'input' element in the 'search-form' block --&gt;</div><div class=\"line\">    &lt;input class=\"search-form__input\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 'button' element in the 'search-form' block --&gt;</div><div class=\"line\">    &lt;button class=\"search-form__button\"&gt;Search&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"elements使用指南\"><a href=\"#elements使用指南\" class=\"headerlink\" title=\"elements使用指南\"></a>elements使用指南</h5><ul>\n<li>层叠嵌套（nesting)</li>\n</ul>\n<ol>\n<li>element能够互相层叠嵌套。</li>\n<li>能够层叠嵌套任意的层级。</li>\n<li>一个element总会是一个block的部分，而不可能是另外一个element的一部分。也就是说，element的名字不能用像<code>block_elem1_elem2</code>一个一个嵌套等级来命名。</li>\n</ol>\n<p>举例：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- correct. The structure of the full element name follows the pattern:'block-name__element-name' --&gt;</div><div class=\"line\">&lt;form class=\"search-form\"&gt;</div><div class=\"line\">    &lt;div class=\"search-form__content\"&gt;</div><div class=\"line\">        &lt;input class=\"search-form__input\"&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;button class=\"search-form-button\"&gt;&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- incorrect. the structure of the full element name doesn't follow the pattern:'block-name_element-name' --&gt;</div><div class=\"line\">&lt;form class=\"search-form\"&gt;</div><div class=\"line\">    &lt;div class=\"search-form__content\"&gt;</div><div class=\"line\">        &lt;!-- recommended:'search-form__imput' or 'search-form__content-input' --&gt;</div><div class=\"line\">        &lt;input class=\"search-form__content-input\"&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;!-- recommended:'search-form__button' or 'search-form__content-input' --&gt;</div><div class=\"line\">        &lt;button class=\"search-form__content__button&gt;&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>block名字定义了命名空间，这个命名空间保证elements有依赖（<code>block_elem</code>）。<br>一个block能够又一个层叠嵌套的element结构的dom树：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=\"block\"&gt;</div><div class=\"line\">    &lt;div class=\"block_elem1\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=\"block_elem2\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=\"block_elem3\"&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>无论如何，在BEM方法里面，block的结构总是表现为一个平坦的element列表。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.block</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block__elem1</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block__elem2</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block__elem3</span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>这样能够使你在不用改变每个单独的element的代码的情况下改变block的dom结构。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=\"block\"&gt;</div><div class=\"line\">    &lt;div class=\"block__elem1\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=\"block__elem2\"&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=\"block\"&gt;</div><div class=\"line\">    &lt;div class=\"block__elem3\"&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>就算blocks 的结构改变，但是对于elements的作用规则和命名仍然是一样的。</p>\n<h5 id=\"关联-membership\"><a href=\"#关联-membership\" class=\"headerlink\" title=\"关联(membership)\"></a>关联(membership)</h5><p>一个Element总是一个Block的一部分，并且你不能在该Block之外单独使用它。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- correct. elements are located inside the 'search-form' block --&gt;</div><div class=\"line\">&lt;!-- 'search-form' block --&gt;</div><div class=\"line\">&lt;form class=\"search-form\"&gt;</div><div class=\"line\">    &lt;!-- 'input' selement in the 'search-form' block --&gt;</div><div class=\"line\">    &lt;input class=\"search-form___input\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 'button' element in the 'search-form' block --&gt;</div><div class=\"line\">    &lt;button class=\"search-form__button\"&gt;search&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- incorrect. elements are located outsde of the context of the 'search-form' block --&gt;</div><div class=\"line\">&lt;!-- 'search-form' block --&gt;</div><div class=\"line\">&lt;form class=\"search-form\"&gt;&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 'input' element in the 'search-form' block --&gt;</div><div class=\"line\">&lt;input class=\"search-form_input\"&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 'button' element in the 'search-form' block --&gt;</div><div class=\"line\">&lt;button class=\"search-form__button\"&gt;search&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Optionality\"><a href=\"#Optionality\" class=\"headerlink\" title=\"Optionality\"></a>Optionality</h5><p>一个element是一个可选的块组件。并不是所有的blocks都拥有elements。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 'search-form' block --&gt;</div><div class=\"line\">&lt;div class=\"search-form&gt;</div><div class=\"line\">    &lt;!-- 'input' block --&gt;</div><div class=\"line\">    &lt;input class=\"input\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 'button' block --&gt;</div><div class=\"line\">    &lt;button class=\"button\"&gt;search&lt;/button&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"我应该创建一个block或者element吗？\"><a href=\"#我应该创建一个block或者element吗？\" class=\"headerlink\" title=\"我应该创建一个block或者element吗？\"></a>我应该创建一个block或者element吗？</h4><ol>\n<li>如果一节代码将会被复用，并且不依赖于其他页面组件运行，那么你就应该创建一个block</li>\n<li>如果一节代码在没有parent entity的情况下不能被单独拿出来使用，那么通常情况下应该创建一个element</li>\n</ol>\n<p>例外的情况就是elements必须拆分成更小的部分，子元素，以便更简明的开发。在BEM命名法里面，你不能够创建elemets的elements。在这种情况下，代替创建一个elements的更高方法就是创建一个service block。</p>\n<h4 id=\"修饰器（Modifier）\"><a href=\"#修饰器（Modifier）\" class=\"headerlink\" title=\"修饰器（Modifier）\"></a>修饰器（Modifier）</h4><p>一个用来定义block or element的是appearance，状态或者动作的实体（entity）。<br>特性：</p>\n<ul>\n<li>修饰器的名字用来描述它的appearance（“尺寸是什么？”或者“是哪个主题？”等等——<code>size_s</code> or <code>theme_islands</code>），它的状态（“它为什么与其它的不同？”——<code>disabled</code>,<code>focused</code>,etc.）或者它的动作（“它的表现是什么？”或者“它是怎么样来相应用户的？”——比如<code>directions_left-top</code>）。</li>\n<li>修饰器的名字使用下划线<code>_</code>来区分于block和element。</li>\n</ul>\n<h5 id=\"修饰器的类型\"><a href=\"#修饰器的类型\" class=\"headerlink\" title=\"修饰器的类型\"></a>修饰器的类型</h5><p>Boolean</p>\n<ul>\n<li>只有当the presence or absence of the modifier is important,并且它的值是无关紧要的时候才使用，比如<code>disabled</code>。如果一个布尔修饰器是存在的，并且假设它的值是<code>true</code>。</li>\n<li>修饰器的全称的结构如下所示：</li>\n</ul>\n<ol>\n<li><code>block-name_modifier-name</code></li>\n<li><code>block-name__element-name_modifier-name</code></li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- The 'search-form' block has the 'focused' boolean modifier --&gt;</div><div class=\"line\">&lt;form class=\"search-form search-form_focused\"&gt;</div><div class=\"line\">    &lt;input class=\"search-form__input\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- the 'button' element has the 'disabled' boolean modifer --&gt;</div><div class=\"line\">    &lt;button class=\"search-form__button search-form__button_disabled\"&gt;Search&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<p>键值对<br>＊ 当修饰器的值是重要的时候使用，比如“一个带有<code>islands</code>设计主题的菜单“：<code>menu_theme_islands</code></p>\n<ul>\n<li>修饰器名字的全称结构如下所示：</li>\n</ul>\n<ol>\n<li><code>block-name_modifier-name_modifier-value</code></li>\n<li><code>block-name__element-name-modifier-name_modifier-value</code></li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- the 'search-form' block has the 'theme' modifier with the value 'islands' --&gt;</div><div class=\"line\">&lt;form class=\"search-form search-form_theme_islands\"&gt;</div><div class=\"line\">    &lt;input class=\"search-form__input\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- the 'button' element has the 'size' modifier with the value 'm' --&gt;</div><div class=\"line\">    &lt;button class=\"search-form__button search-form__button-size_m\"&gt;Search&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- you cant use two identical modifiers with different values simultaneously --&gt;</div><div class=\"line\">&lt;form class=\"search-form search-form_theme_islands search-form_theme_lite\"&gt;</div><div class=\"line\">    &lt;input class=\"search-form__input\"&gt;</div><div class=\"line\">    &lt;button class=\"search-form__button search-form__button_size_s search-form__button_size_m\"&gt;Search&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h4><p>文章来源：<a href=\"https://en.bem.info/methodology/quick-start/\">https://en.bem.info/methodology/quick-start/</a></p>\n","sticky":0},{"title":"What is the Fuck EDM and How to Do With That?🤔","date":"2016-09-29T08:18:13.000Z","_content":"看[《你不知道的JavaScript》](https://github.com/getify/You-Dont-Know-JS)的时候，作者老是重复一句话：知其然还要知其所以然，所以我们先看看EDM是啥？\n> EDM,Email Direct Marketing的缩写，翻译过来就是电子邮件营销，是一种利用电子邮件为其传递商业活着募款消息到其听众的直销形式。就广义来说，每封电子邮件发送到潜在活着现行客户都可视为电子邮件营销。——摘自维基百科\n\n更专业一点的叫法叫做HTML Email，虽然也是html，但是在我们用浏览器上使用的html是不同的，不仅是在安全问题上，在标签的使用以及内容的处理上都有差异。营销邮件不外乎有很多敏感词汇，比如：发票、发财、商机、支付什么的，同时如果这封邮件不请自来，那么邮件的服务器设置都会以为这是垃圾邮件然后过滤掉，借用一篇文章里面的一句话，\n> EDM可能让你感觉很困难，非常难搞。\n\n这里有一个拓展阅读，[怎么样才能让自己服务器发出的邮件不被 Gmail、Hotmail、163、QQ 等邮箱放入垃圾箱？](https://www.zhihu.com/question/19574247)，博大精深，反正我是没怎么看懂。一开始觉得EDM，很快嘛，分分钟弄好，现在看来，好像真的有点难搞。我上一次第一次做的那个EDM就是一个反面教材。下面就综合一下我所了解到的东西。\n\n#### Doctype\n既然是html，就得声明文档类型，在HTML Email中，需要再html模版中声明文档类型，来通知邮件客户端来读这一段html模版的代码。但是有些客户端会删掉你写的客户端来换上自己的，从目前收集到的信息来看，兼容性最好的还是XHTML 1.0 transitional，总之不要使用使用html5的文档类型声明\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n        <title>HTML Email编写指南</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    </head>\n</html>\n```\n同时也就意味着不能使用HTML5语法。\n\n#### 布局\nHTML Email是无法支持W3C标准的，在解析`div`、`section` or `article` 等标签的时候各个客户端是不一样的，代替它们的方法就是使用`table`，但是同时`table`中不支持`colspan`和`rowspan`属性，其中table一定要写的几个属性又`cellpadding`、`cellspacing`、`border`，不同的客户端对着几个解析是不同的，所以我们要设定自己的值，也可能会发生table嵌套多个table的情况，不要慌，这是正常的。我们经常使用`h1`、`h2`、`h3` or `p`等，都不建议使用，不然会产生大麻烦（虽然我也不知道什么麻烦，可能就是在邮件客户端渲染时会发生问题），再HTML Email里面几乎只有`table` `tr` `td` `span` `img` `a`这几个标签。（这个说法我也不确定，但是在EDM里面能使用的标签是少之又少）\n\n#### 样式\n几乎再所有编写EDM的建议中都有这么一条：\n> 务必最好的方式是使用內联样式\n\n不要放在头部，因为一些邮件客户端很可能读html的时候会把body甚至table以外的内容删掉，那么写在头部的样式自然就没有了，同时再书写css的时候，不要采用简写模式，有些客户端不支持（什么奇葩的客户端🙄）。\n```html\n    /*如果想表达*/\n    <p style=\"margin:1em 0;\"></p>\n    /*得写成*/\n    <p style=\"margin-top:1em;margin-bottom:1em;margin-left:0;margin-right:0;\"></p>\n    /*连颜色也不能简写，如#999，得写成下面这种完成的*/\n    <p style=\"color:#999999;\"></p>\n```\n\n继承虽然再EDM还能使用，但是还是尽量不要使用，因为多数的邮件的客户端都有自己的一套规则。\n\n#### 图片\n图片是唯一能引用的外部资源，但是有一些邮件客户端再接收非通讯录里面的联系人邮件时，会自动将图片屏蔽掉，所以alt，width，height这三个属性是不能少的，方便在被屏蔽时显示内容以及撑开排版，另外还有两条建议\n- 把仅包含图片的td的`line-height`设置为0，以防止产生间隙，据说在图片并列的时候尤为明显（这里就是没有实践的装逼了，具体情况我也没遇到过）；\n- 一些邮件客户端会默认为图片加上边框，所以要把border设置为0；\n- 切图的时候不要直接把整个psd切成图片导出（上回我做的反面教材就是这里，直接全部图片），这样有可能让有些客户端直接认定为垃圾邮件（😑）\n- 控制大小，据说标准是不超过250kb，太大的话加载时间过长会直接导致加载失败\n\n#### 小结\n以上这些就是在制作EDM中要注意的事情，但是看到的一些资料比较老，都是13年较多，也有15年的，web的发展是飞快的，可能现在邮箱客户端开放了一些限制，但是还是遵守规则来制作比较好，不然被过滤为垃圾邮件就比较尴尬了。\n\n#### 相关阅读\n[邮件客户端CSS支持查询](https://www.campaignmonitor.com/css/)\n[HTML Email 编写指南——阮一峰](http://www.ruanyifeng.com/blog/2013/06/html_email.html)（大师有个地方写错了🙂）\n[推荐的DOCTYPE声明列表](https://www.w3.org/QA/2002/04/valid-dtd-list.html)\n\n\n\n","source":"_posts/EDM.md","raw":"---\ntitle: What is the Fuck EDM and How to Do With That?🤔\ndate: 2016-09-29 16:18:13\ntags: \n- EDM\n- rule\n---\n看[《你不知道的JavaScript》](https://github.com/getify/You-Dont-Know-JS)的时候，作者老是重复一句话：知其然还要知其所以然，所以我们先看看EDM是啥？\n> EDM,Email Direct Marketing的缩写，翻译过来就是电子邮件营销，是一种利用电子邮件为其传递商业活着募款消息到其听众的直销形式。就广义来说，每封电子邮件发送到潜在活着现行客户都可视为电子邮件营销。——摘自维基百科\n\n更专业一点的叫法叫做HTML Email，虽然也是html，但是在我们用浏览器上使用的html是不同的，不仅是在安全问题上，在标签的使用以及内容的处理上都有差异。营销邮件不外乎有很多敏感词汇，比如：发票、发财、商机、支付什么的，同时如果这封邮件不请自来，那么邮件的服务器设置都会以为这是垃圾邮件然后过滤掉，借用一篇文章里面的一句话，\n> EDM可能让你感觉很困难，非常难搞。\n\n这里有一个拓展阅读，[怎么样才能让自己服务器发出的邮件不被 Gmail、Hotmail、163、QQ 等邮箱放入垃圾箱？](https://www.zhihu.com/question/19574247)，博大精深，反正我是没怎么看懂。一开始觉得EDM，很快嘛，分分钟弄好，现在看来，好像真的有点难搞。我上一次第一次做的那个EDM就是一个反面教材。下面就综合一下我所了解到的东西。\n\n#### Doctype\n既然是html，就得声明文档类型，在HTML Email中，需要再html模版中声明文档类型，来通知邮件客户端来读这一段html模版的代码。但是有些客户端会删掉你写的客户端来换上自己的，从目前收集到的信息来看，兼容性最好的还是XHTML 1.0 transitional，总之不要使用使用html5的文档类型声明\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n        <title>HTML Email编写指南</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    </head>\n</html>\n```\n同时也就意味着不能使用HTML5语法。\n\n#### 布局\nHTML Email是无法支持W3C标准的，在解析`div`、`section` or `article` 等标签的时候各个客户端是不一样的，代替它们的方法就是使用`table`，但是同时`table`中不支持`colspan`和`rowspan`属性，其中table一定要写的几个属性又`cellpadding`、`cellspacing`、`border`，不同的客户端对着几个解析是不同的，所以我们要设定自己的值，也可能会发生table嵌套多个table的情况，不要慌，这是正常的。我们经常使用`h1`、`h2`、`h3` or `p`等，都不建议使用，不然会产生大麻烦（虽然我也不知道什么麻烦，可能就是在邮件客户端渲染时会发生问题），再HTML Email里面几乎只有`table` `tr` `td` `span` `img` `a`这几个标签。（这个说法我也不确定，但是在EDM里面能使用的标签是少之又少）\n\n#### 样式\n几乎再所有编写EDM的建议中都有这么一条：\n> 务必最好的方式是使用內联样式\n\n不要放在头部，因为一些邮件客户端很可能读html的时候会把body甚至table以外的内容删掉，那么写在头部的样式自然就没有了，同时再书写css的时候，不要采用简写模式，有些客户端不支持（什么奇葩的客户端🙄）。\n```html\n    /*如果想表达*/\n    <p style=\"margin:1em 0;\"></p>\n    /*得写成*/\n    <p style=\"margin-top:1em;margin-bottom:1em;margin-left:0;margin-right:0;\"></p>\n    /*连颜色也不能简写，如#999，得写成下面这种完成的*/\n    <p style=\"color:#999999;\"></p>\n```\n\n继承虽然再EDM还能使用，但是还是尽量不要使用，因为多数的邮件的客户端都有自己的一套规则。\n\n#### 图片\n图片是唯一能引用的外部资源，但是有一些邮件客户端再接收非通讯录里面的联系人邮件时，会自动将图片屏蔽掉，所以alt，width，height这三个属性是不能少的，方便在被屏蔽时显示内容以及撑开排版，另外还有两条建议\n- 把仅包含图片的td的`line-height`设置为0，以防止产生间隙，据说在图片并列的时候尤为明显（这里就是没有实践的装逼了，具体情况我也没遇到过）；\n- 一些邮件客户端会默认为图片加上边框，所以要把border设置为0；\n- 切图的时候不要直接把整个psd切成图片导出（上回我做的反面教材就是这里，直接全部图片），这样有可能让有些客户端直接认定为垃圾邮件（😑）\n- 控制大小，据说标准是不超过250kb，太大的话加载时间过长会直接导致加载失败\n\n#### 小结\n以上这些就是在制作EDM中要注意的事情，但是看到的一些资料比较老，都是13年较多，也有15年的，web的发展是飞快的，可能现在邮箱客户端开放了一些限制，但是还是遵守规则来制作比较好，不然被过滤为垃圾邮件就比较尴尬了。\n\n#### 相关阅读\n[邮件客户端CSS支持查询](https://www.campaignmonitor.com/css/)\n[HTML Email 编写指南——阮一峰](http://www.ruanyifeng.com/blog/2013/06/html_email.html)（大师有个地方写错了🙂）\n[推荐的DOCTYPE声明列表](https://www.w3.org/QA/2002/04/valid-dtd-list.html)\n\n\n\n","slug":"EDM","published":1,"updated":"2016-09-29T08:58:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzakz700014fryhd9rvevi","content":"<p>看<a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"external\">《你不知道的JavaScript》</a>的时候，作者老是重复一句话：知其然还要知其所以然，所以我们先看看EDM是啥？</p>\n<blockquote>\n<p>EDM,Email Direct Marketing的缩写，翻译过来就是电子邮件营销，是一种利用电子邮件为其传递商业活着募款消息到其听众的直销形式。就广义来说，每封电子邮件发送到潜在活着现行客户都可视为电子邮件营销。——摘自维基百科</p>\n</blockquote>\n<p>更专业一点的叫法叫做HTML Email，虽然也是html，但是在我们用浏览器上使用的html是不同的，不仅是在安全问题上，在标签的使用以及内容的处理上都有差异。营销邮件不外乎有很多敏感词汇，比如：发票、发财、商机、支付什么的，同时如果这封邮件不请自来，那么邮件的服务器设置都会以为这是垃圾邮件然后过滤掉，借用一篇文章里面的一句话，</p>\n<blockquote>\n<p>EDM可能让你感觉很困难，非常难搞。</p>\n</blockquote>\n<p>这里有一个拓展阅读，<a href=\"https://www.zhihu.com/question/19574247\" target=\"_blank\" rel=\"external\">怎么样才能让自己服务器发出的邮件不被 Gmail、Hotmail、163、QQ 等邮箱放入垃圾箱？</a>，博大精深，反正我是没怎么看懂。一开始觉得EDM，很快嘛，分分钟弄好，现在看来，好像真的有点难搞。我上一次第一次做的那个EDM就是一个反面教材。下面就综合一下我所了解到的东西。</p>\n<h4 id=\"Doctype\"><a href=\"#Doctype\" class=\"headerlink\" title=\"Doctype\"></a>Doctype</h4><p>既然是html，就得声明文档类型，在HTML Email中，需要再html模版中声明文档类型，来通知邮件客户端来读这一段html模版的代码。但是有些客户端会删掉你写的客户端来换上自己的，从目前收集到的信息来看，兼容性最好的还是XHTML 1.0 transitional，总之不要使用使用html5的文档类型声明<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HTML Email编写指南<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>同时也就意味着不能使用HTML5语法。</p>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><p>HTML Email是无法支持W3C标准的，在解析<code>div</code>、<code>section</code> or <code>article</code> 等标签的时候各个客户端是不一样的，代替它们的方法就是使用<code>table</code>，但是同时<code>table</code>中不支持<code>colspan</code>和<code>rowspan</code>属性，其中table一定要写的几个属性又<code>cellpadding</code>、<code>cellspacing</code>、<code>border</code>，不同的客户端对着几个解析是不同的，所以我们要设定自己的值，也可能会发生table嵌套多个table的情况，不要慌，这是正常的。我们经常使用<code>h1</code>、<code>h2</code>、<code>h3</code> or <code>p</code>等，都不建议使用，不然会产生大麻烦（虽然我也不知道什么麻烦，可能就是在邮件客户端渲染时会发生问题），再HTML Email里面几乎只有<code>table</code> <code>tr</code> <code>td</code> <code>span</code> <code>img</code> <code>a</code>这几个标签。（这个说法我也不确定，但是在EDM里面能使用的标签是少之又少）</p>\n<h4 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h4><p>几乎再所有编写EDM的建议中都有这么一条：</p>\n<blockquote>\n<p>务必最好的方式是使用內联样式</p>\n</blockquote>\n<p>不要放在头部，因为一些邮件客户端很可能读html的时候会把body甚至table以外的内容删掉，那么写在头部的样式自然就没有了，同时再书写css的时候，不要采用简写模式，有些客户端不支持（什么奇葩的客户端🙄）。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*如果想表达*/</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:1em 0;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">/*得写成*/</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top:1em;margin-bottom:1em;margin-left:0;margin-right:0;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">/*连颜色也不能简写，如#999，得写成下面这种完成的*/</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:#999999;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>继承虽然再EDM还能使用，但是还是尽量不要使用，因为多数的邮件的客户端都有自己的一套规则。</p>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><p>图片是唯一能引用的外部资源，但是有一些邮件客户端再接收非通讯录里面的联系人邮件时，会自动将图片屏蔽掉，所以alt，width，height这三个属性是不能少的，方便在被屏蔽时显示内容以及撑开排版，另外还有两条建议</p>\n<ul>\n<li>把仅包含图片的td的<code>line-height</code>设置为0，以防止产生间隙，据说在图片并列的时候尤为明显（这里就是没有实践的装逼了，具体情况我也没遇到过）；</li>\n<li>一些邮件客户端会默认为图片加上边框，所以要把border设置为0；</li>\n<li>切图的时候不要直接把整个psd切成图片导出（上回我做的反面教材就是这里，直接全部图片），这样有可能让有些客户端直接认定为垃圾邮件（😑）</li>\n<li>控制大小，据说标准是不超过250kb，太大的话加载时间过长会直接导致加载失败</li>\n</ul>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>以上这些就是在制作EDM中要注意的事情，但是看到的一些资料比较老，都是13年较多，也有15年的，web的发展是飞快的，可能现在邮箱客户端开放了一些限制，但是还是遵守规则来制作比较好，不然被过滤为垃圾邮件就比较尴尬了。</p>\n<h4 id=\"相关阅读\"><a href=\"#相关阅读\" class=\"headerlink\" title=\"相关阅读\"></a>相关阅读</h4><p><a href=\"https://www.campaignmonitor.com/css/\" target=\"_blank\" rel=\"external\">邮件客户端CSS支持查询</a><br><a href=\"http://www.ruanyifeng.com/blog/2013/06/html_email.html\" target=\"_blank\" rel=\"external\">HTML Email 编写指南——阮一峰</a>（大师有个地方写错了🙂）<br><a href=\"https://www.w3.org/QA/2002/04/valid-dtd-list.html\" target=\"_blank\" rel=\"external\">推荐的DOCTYPE声明列表</a></p>\n","excerpt":"","more":"<p>看<a href=\"https://github.com/getify/You-Dont-Know-JS\">《你不知道的JavaScript》</a>的时候，作者老是重复一句话：知其然还要知其所以然，所以我们先看看EDM是啥？</p>\n<blockquote>\n<p>EDM,Email Direct Marketing的缩写，翻译过来就是电子邮件营销，是一种利用电子邮件为其传递商业活着募款消息到其听众的直销形式。就广义来说，每封电子邮件发送到潜在活着现行客户都可视为电子邮件营销。——摘自维基百科</p>\n</blockquote>\n<p>更专业一点的叫法叫做HTML Email，虽然也是html，但是在我们用浏览器上使用的html是不同的，不仅是在安全问题上，在标签的使用以及内容的处理上都有差异。营销邮件不外乎有很多敏感词汇，比如：发票、发财、商机、支付什么的，同时如果这封邮件不请自来，那么邮件的服务器设置都会以为这是垃圾邮件然后过滤掉，借用一篇文章里面的一句话，</p>\n<blockquote>\n<p>EDM可能让你感觉很困难，非常难搞。</p>\n</blockquote>\n<p>这里有一个拓展阅读，<a href=\"https://www.zhihu.com/question/19574247\">怎么样才能让自己服务器发出的邮件不被 Gmail、Hotmail、163、QQ 等邮箱放入垃圾箱？</a>，博大精深，反正我是没怎么看懂。一开始觉得EDM，很快嘛，分分钟弄好，现在看来，好像真的有点难搞。我上一次第一次做的那个EDM就是一个反面教材。下面就综合一下我所了解到的东西。</p>\n<h4 id=\"Doctype\"><a href=\"#Doctype\" class=\"headerlink\" title=\"Doctype\"></a>Doctype</h4><p>既然是html，就得声明文档类型，在HTML Email中，需要再html模版中声明文档类型，来通知邮件客户端来读这一段html模版的代码。但是有些客户端会删掉你写的客户端来换上自己的，从目前收集到的信息来看，兼容性最好的还是XHTML 1.0 transitional，总之不要使用使用html5的文档类型声明<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HTML Email编写指南<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>同时也就意味着不能使用HTML5语法。</p>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><p>HTML Email是无法支持W3C标准的，在解析<code>div</code>、<code>section</code> or <code>article</code> 等标签的时候各个客户端是不一样的，代替它们的方法就是使用<code>table</code>，但是同时<code>table</code>中不支持<code>colspan</code>和<code>rowspan</code>属性，其中table一定要写的几个属性又<code>cellpadding</code>、<code>cellspacing</code>、<code>border</code>，不同的客户端对着几个解析是不同的，所以我们要设定自己的值，也可能会发生table嵌套多个table的情况，不要慌，这是正常的。我们经常使用<code>h1</code>、<code>h2</code>、<code>h3</code> or <code>p</code>等，都不建议使用，不然会产生大麻烦（虽然我也不知道什么麻烦，可能就是在邮件客户端渲染时会发生问题），再HTML Email里面几乎只有<code>table</code> <code>tr</code> <code>td</code> <code>span</code> <code>img</code> <code>a</code>这几个标签。（这个说法我也不确定，但是在EDM里面能使用的标签是少之又少）</p>\n<h4 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h4><p>几乎再所有编写EDM的建议中都有这么一条：</p>\n<blockquote>\n<p>务必最好的方式是使用內联样式</p>\n</blockquote>\n<p>不要放在头部，因为一些邮件客户端很可能读html的时候会把body甚至table以外的内容删掉，那么写在头部的样式自然就没有了，同时再书写css的时候，不要采用简写模式，有些客户端不支持（什么奇葩的客户端🙄）。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*如果想表达*/</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:1em 0;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">/*得写成*/</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top:1em;margin-bottom:1em;margin-left:0;margin-right:0;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">/*连颜色也不能简写，如#999，得写成下面这种完成的*/</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:#999999;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>继承虽然再EDM还能使用，但是还是尽量不要使用，因为多数的邮件的客户端都有自己的一套规则。</p>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><p>图片是唯一能引用的外部资源，但是有一些邮件客户端再接收非通讯录里面的联系人邮件时，会自动将图片屏蔽掉，所以alt，width，height这三个属性是不能少的，方便在被屏蔽时显示内容以及撑开排版，另外还有两条建议</p>\n<ul>\n<li>把仅包含图片的td的<code>line-height</code>设置为0，以防止产生间隙，据说在图片并列的时候尤为明显（这里就是没有实践的装逼了，具体情况我也没遇到过）；</li>\n<li>一些邮件客户端会默认为图片加上边框，所以要把border设置为0；</li>\n<li>切图的时候不要直接把整个psd切成图片导出（上回我做的反面教材就是这里，直接全部图片），这样有可能让有些客户端直接认定为垃圾邮件（😑）</li>\n<li>控制大小，据说标准是不超过250kb，太大的话加载时间过长会直接导致加载失败</li>\n</ul>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>以上这些就是在制作EDM中要注意的事情，但是看到的一些资料比较老，都是13年较多，也有15年的，web的发展是飞快的，可能现在邮箱客户端开放了一些限制，但是还是遵守规则来制作比较好，不然被过滤为垃圾邮件就比较尴尬了。</p>\n<h4 id=\"相关阅读\"><a href=\"#相关阅读\" class=\"headerlink\" title=\"相关阅读\"></a>相关阅读</h4><p><a href=\"https://www.campaignmonitor.com/css/\">邮件客户端CSS支持查询</a><br><a href=\"http://www.ruanyifeng.com/blog/2013/06/html_email.html\">HTML Email 编写指南——阮一峰</a>（大师有个地方写错了🙂）<br><a href=\"https://www.w3.org/QA/2002/04/valid-dtd-list.html\">推荐的DOCTYPE声明列表</a></p>\n","sticky":0},{"title":"SVN的浅尝辄止","date":"2016-03-15T13:43:58.000Z","_content":"\n#### SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）\n\n\n* 合并总是在工作副本中进行的。如果想要合并修改到分支，必须检出该分支的工作副本，并且从这个工作副本使用TortoiseSVN-merge来调用合并导向\n\n* 在没有修改的工作副本上执行合并是一个好想法。如果在工作副本上做了修改，先提交。如果合并没有如期的执行，可能需要测小这些修改，用还原会丢弃包含在执行合并之前的所有修改\n\n* 分支的创建\n`Svn copy http://example.com/repos/myproject/trunk  http://example.com/repos/myproject/branches/releaseForAug -m 'create branch for release on now'`为myproject创建了一个分支叫做releaseForAug，使用-m来加入描述信息，之后可以通过`svn checkout http://example.com/repos/myproject/releaseForAug`来迁出你的branche源文件。在上面进行修改和提交\n\n* 合并\n1. 保证当前branch分支是clean的，即使用svn status看不到任何的本地修改\n2. 命令行下切换到Trunk目录中，使用`Svn merge http://example.com/repos/myproject/branches/releaseForAug`来讲Branch分支上的改动merge回Trunk下\n3. 如果出现merge冲突则进行解决，然后执行`Svn ci -m 'description'来提交变动`\n\n* 在merge的时候也可以指定分支上的哪些变更可以合并到Trunk中，命令如下`svn merge http://example.com/repos/myproject/branches/releaseForAug -r150:HEAD`表示将分支的版本从150到当前版本的所有搞懂合并到trunk中\n\n* 查看当前branch和trunk的合并情况，可以使用 `svn mergeinfo branchUrl` 来查看merge情况\n* 目前就这些吧\n\n","source":"_posts/SVN的浅尝辄止.md","raw":"---\ntitle: SVN的浅尝辄止\ndate: 2016-03-15 21:43:58\ntags:\n- SVN\ncategories:\n- SVN\n---\n\n#### SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）\n\n\n* 合并总是在工作副本中进行的。如果想要合并修改到分支，必须检出该分支的工作副本，并且从这个工作副本使用TortoiseSVN-merge来调用合并导向\n\n* 在没有修改的工作副本上执行合并是一个好想法。如果在工作副本上做了修改，先提交。如果合并没有如期的执行，可能需要测小这些修改，用还原会丢弃包含在执行合并之前的所有修改\n\n* 分支的创建\n`Svn copy http://example.com/repos/myproject/trunk  http://example.com/repos/myproject/branches/releaseForAug -m 'create branch for release on now'`为myproject创建了一个分支叫做releaseForAug，使用-m来加入描述信息，之后可以通过`svn checkout http://example.com/repos/myproject/releaseForAug`来迁出你的branche源文件。在上面进行修改和提交\n\n* 合并\n1. 保证当前branch分支是clean的，即使用svn status看不到任何的本地修改\n2. 命令行下切换到Trunk目录中，使用`Svn merge http://example.com/repos/myproject/branches/releaseForAug`来讲Branch分支上的改动merge回Trunk下\n3. 如果出现merge冲突则进行解决，然后执行`Svn ci -m 'description'来提交变动`\n\n* 在merge的时候也可以指定分支上的哪些变更可以合并到Trunk中，命令如下`svn merge http://example.com/repos/myproject/branches/releaseForAug -r150:HEAD`表示将分支的版本从150到当前版本的所有搞懂合并到trunk中\n\n* 查看当前branch和trunk的合并情况，可以使用 `svn mergeinfo branchUrl` 来查看merge情况\n* 目前就这些吧\n\n","slug":"SVN的浅尝辄止","published":1,"updated":"2016-08-04T16:42:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzakzc00034fry620lwprq","content":"<h4 id=\"SVN的创建以及合并分支（windows命令行-ಥ-ಥ-）\"><a href=\"#SVN的创建以及合并分支（windows命令行-ಥ-ಥ-）\" class=\"headerlink\" title=\"SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）\"></a>SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）</h4><ul>\n<li><p>合并总是在工作副本中进行的。如果想要合并修改到分支，必须检出该分支的工作副本，并且从这个工作副本使用TortoiseSVN-merge来调用合并导向</p>\n</li>\n<li><p>在没有修改的工作副本上执行合并是一个好想法。如果在工作副本上做了修改，先提交。如果合并没有如期的执行，可能需要测小这些修改，用还原会丢弃包含在执行合并之前的所有修改</p>\n</li>\n<li><p>分支的创建<br><code>Svn copy http://example.com/repos/myproject/trunk  http://example.com/repos/myproject/branches/releaseForAug -m &#39;create branch for release on now&#39;</code>为myproject创建了一个分支叫做releaseForAug，使用-m来加入描述信息，之后可以通过<code>svn checkout http://example.com/repos/myproject/releaseForAug</code>来迁出你的branche源文件。在上面进行修改和提交</p>\n</li>\n<li><p>合并</p>\n</li>\n</ul>\n<ol>\n<li>保证当前branch分支是clean的，即使用svn status看不到任何的本地修改</li>\n<li>命令行下切换到Trunk目录中，使用<code>Svn merge http://example.com/repos/myproject/branches/releaseForAug</code>来讲Branch分支上的改动merge回Trunk下</li>\n<li>如果出现merge冲突则进行解决，然后执行<code>Svn ci -m &#39;description&#39;来提交变动</code></li>\n</ol>\n<ul>\n<li><p>在merge的时候也可以指定分支上的哪些变更可以合并到Trunk中，命令如下<code>svn merge http://example.com/repos/myproject/branches/releaseForAug -r150:HEAD</code>表示将分支的版本从150到当前版本的所有搞懂合并到trunk中</p>\n</li>\n<li><p>查看当前branch和trunk的合并情况，可以使用 <code>svn mergeinfo branchUrl</code> 来查看merge情况</p>\n</li>\n<li>目前就这些吧</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"SVN的创建以及合并分支（windows命令行-ಥ-ಥ-）\"><a href=\"#SVN的创建以及合并分支（windows命令行-ಥ-ಥ-）\" class=\"headerlink\" title=\"SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）\"></a>SVN的创建以及合并分支（windows命令行(ಥ _ ಥ)）</h4><ul>\n<li><p>合并总是在工作副本中进行的。如果想要合并修改到分支，必须检出该分支的工作副本，并且从这个工作副本使用TortoiseSVN-merge来调用合并导向</p>\n</li>\n<li><p>在没有修改的工作副本上执行合并是一个好想法。如果在工作副本上做了修改，先提交。如果合并没有如期的执行，可能需要测小这些修改，用还原会丢弃包含在执行合并之前的所有修改</p>\n</li>\n<li><p>分支的创建<br><code>Svn copy http://example.com/repos/myproject/trunk  http://example.com/repos/myproject/branches/releaseForAug -m &#39;create branch for release on now&#39;</code>为myproject创建了一个分支叫做releaseForAug，使用-m来加入描述信息，之后可以通过<code>svn checkout http://example.com/repos/myproject/releaseForAug</code>来迁出你的branche源文件。在上面进行修改和提交</p>\n</li>\n<li><p>合并</p>\n</li>\n</ul>\n<ol>\n<li>保证当前branch分支是clean的，即使用svn status看不到任何的本地修改</li>\n<li>命令行下切换到Trunk目录中，使用<code>Svn merge http://example.com/repos/myproject/branches/releaseForAug</code>来讲Branch分支上的改动merge回Trunk下</li>\n<li>如果出现merge冲突则进行解决，然后执行<code>Svn ci -m &#39;description&#39;来提交变动</code></li>\n</ol>\n<ul>\n<li><p>在merge的时候也可以指定分支上的哪些变更可以合并到Trunk中，命令如下<code>svn merge http://example.com/repos/myproject/branches/releaseForAug -r150:HEAD</code>表示将分支的版本从150到当前版本的所有搞懂合并到trunk中</p>\n</li>\n<li><p>查看当前branch和trunk的合并情况，可以使用 <code>svn mergeinfo branchUrl</code> 来查看merge情况</p>\n</li>\n<li>目前就这些吧</li>\n</ul>\n","sticky":0},{"title":"bigpipe","date":"2017-04-01T07:51:30.000Z","_content":"\n#### bigpipe原理小记\n\nIn the traditional model, the life cycle of a user request is the following:\n\n- Browser sends an HTTP request to web server.\n- Web server parses the request, pulls data from storage tier then formulates an HTML document and sends it to the client in an HTTP response. \n- HTTP response is transferred over the Internet to browser. \n- Browser parses the response from web server, constructs a DOM tree representation of the HTML document, and downloads CSS and JavaScript resources referenced by the document. \n- After downloading CSS resources, browser parses them and applies them to the DOM tree.\n- After downloading JavaScript resources, browser parses and executes them.\n\n在传统的模式中，一个用户请求的生命周期如下：\n\n- 浏览器向服务器发送一个请求\n- 服务器解析请求，从数据层拉取数据然后构建HTML文档，然后在响应中返回这个文档\n- HTTP响应通过互联网向浏览器传输。\n- 浏览器解析从服务器得到的响应，构建一个描述HTML文档的DOM树，然后从文档中的引用中下载css和JavaScript资源\n- 下载完css后，浏览器解析css并应用到DOM树上\n- 下载完成JavaScript后，浏览器解析JavaScript并执行它们\n\nJust as a [pipelining microprocessor](https://en.wikipedia.org/wiki/Instruction_pipelining) divides an instruction’s life cycle into multiple stages (such as “instruction fetch”, “instruction decode”, “execution”, “register write back” etc.), BigPipe breaks the page generation process into several stages:\n\nRequest parsing: web server parses and sanity checks the HTTP request. \nData fetching: web server fetches data from storage tier.\nMarkup generation: web server generates HTML markup for the response. \nNetwork transport: the response is transferred from web server to browser.\nCSS downloading: browser downloads CSS required by the page.\nDOM tree construction and CSS styling: browser constructs DOM tree of the document, and then applies CSS rules on it. \nJavaScript downloading: browser downloads JavaScript resources referenced by the page.\nJavaScript execution: browser executes JavaScript code of the page.\n\n就像一个[流水线微处理器](https://en.wikipedia.org/wiki/Instruction_pipelining)一样，将一个指令的生命周期分成几个状态（比如指令的fetch，指令的decode，执行，注册回写（register write back）等等），bigpipe就将页面的生成过程分成几个状态：\n\n- Request parsing：服务器解析并全面检查HTTP请求\n- Data fetching: 服务器从数据层抓取数据\n- Markup generation: 服务器为响应生成HTML标记\n- Network transport：服务器向浏览器传输响应内容\n- CSS downloading：浏览器下载页面需要的CSS\n- DOM tree construction add css styling: 浏览器构建文档的DOM树，然后应用CSS规则\n- JavaScript downloading：浏览器下载页面引用的JavaScript 资源\n- JavaScript execution：浏览器执行页面的JavaScript 代码。\n\n以上内容摘抄自[BigPipe: Pipelining web pages for high performance](https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919/)，然后下面我自己翻译的。这里做个记录，算一个知识点，具体实现的话，各个语言基本都能实现。在NODEJS的实现中，个人的理解为：以前使用AJAX请求数据渲染模板，分为：全部（或者大部分）模板一次请求完成，然后请求接口获取数据，最后拼接HTML字符串进行渲染，bigpipe的话，模板部分分成了小块，最开始的请求当中只返回模板的一个简单的骨架，然后在后端获取该小块的数据后，使用`response.write`（简单实现的话）返回一段JavaScript代码来加载已经完成数据请求的模板。","source":"_posts/bigpipe.md","raw":"---\ntitle: bigpipe\ndate: 2017-04-01 15:51:30\ntags:\n- bigpipe\n---\n\n#### bigpipe原理小记\n\nIn the traditional model, the life cycle of a user request is the following:\n\n- Browser sends an HTTP request to web server.\n- Web server parses the request, pulls data from storage tier then formulates an HTML document and sends it to the client in an HTTP response. \n- HTTP response is transferred over the Internet to browser. \n- Browser parses the response from web server, constructs a DOM tree representation of the HTML document, and downloads CSS and JavaScript resources referenced by the document. \n- After downloading CSS resources, browser parses them and applies them to the DOM tree.\n- After downloading JavaScript resources, browser parses and executes them.\n\n在传统的模式中，一个用户请求的生命周期如下：\n\n- 浏览器向服务器发送一个请求\n- 服务器解析请求，从数据层拉取数据然后构建HTML文档，然后在响应中返回这个文档\n- HTTP响应通过互联网向浏览器传输。\n- 浏览器解析从服务器得到的响应，构建一个描述HTML文档的DOM树，然后从文档中的引用中下载css和JavaScript资源\n- 下载完css后，浏览器解析css并应用到DOM树上\n- 下载完成JavaScript后，浏览器解析JavaScript并执行它们\n\nJust as a [pipelining microprocessor](https://en.wikipedia.org/wiki/Instruction_pipelining) divides an instruction’s life cycle into multiple stages (such as “instruction fetch”, “instruction decode”, “execution”, “register write back” etc.), BigPipe breaks the page generation process into several stages:\n\nRequest parsing: web server parses and sanity checks the HTTP request. \nData fetching: web server fetches data from storage tier.\nMarkup generation: web server generates HTML markup for the response. \nNetwork transport: the response is transferred from web server to browser.\nCSS downloading: browser downloads CSS required by the page.\nDOM tree construction and CSS styling: browser constructs DOM tree of the document, and then applies CSS rules on it. \nJavaScript downloading: browser downloads JavaScript resources referenced by the page.\nJavaScript execution: browser executes JavaScript code of the page.\n\n就像一个[流水线微处理器](https://en.wikipedia.org/wiki/Instruction_pipelining)一样，将一个指令的生命周期分成几个状态（比如指令的fetch，指令的decode，执行，注册回写（register write back）等等），bigpipe就将页面的生成过程分成几个状态：\n\n- Request parsing：服务器解析并全面检查HTTP请求\n- Data fetching: 服务器从数据层抓取数据\n- Markup generation: 服务器为响应生成HTML标记\n- Network transport：服务器向浏览器传输响应内容\n- CSS downloading：浏览器下载页面需要的CSS\n- DOM tree construction add css styling: 浏览器构建文档的DOM树，然后应用CSS规则\n- JavaScript downloading：浏览器下载页面引用的JavaScript 资源\n- JavaScript execution：浏览器执行页面的JavaScript 代码。\n\n以上内容摘抄自[BigPipe: Pipelining web pages for high performance](https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919/)，然后下面我自己翻译的。这里做个记录，算一个知识点，具体实现的话，各个语言基本都能实现。在NODEJS的实现中，个人的理解为：以前使用AJAX请求数据渲染模板，分为：全部（或者大部分）模板一次请求完成，然后请求接口获取数据，最后拼接HTML字符串进行渲染，bigpipe的话，模板部分分成了小块，最开始的请求当中只返回模板的一个简单的骨架，然后在后端获取该小块的数据后，使用`response.write`（简单实现的话）返回一段JavaScript代码来加载已经完成数据请求的模板。","slug":"bigpipe","published":1,"updated":"2017-04-01T08:02:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzakzk00044fryiq15a5qz","content":"<h4 id=\"bigpipe原理小记\"><a href=\"#bigpipe原理小记\" class=\"headerlink\" title=\"bigpipe原理小记\"></a>bigpipe原理小记</h4><p>In the traditional model, the life cycle of a user request is the following:</p>\n<ul>\n<li>Browser sends an HTTP request to web server.</li>\n<li>Web server parses the request, pulls data from storage tier then formulates an HTML document and sends it to the client in an HTTP response. </li>\n<li>HTTP response is transferred over the Internet to browser. </li>\n<li>Browser parses the response from web server, constructs a DOM tree representation of the HTML document, and downloads CSS and JavaScript resources referenced by the document. </li>\n<li>After downloading CSS resources, browser parses them and applies them to the DOM tree.</li>\n<li>After downloading JavaScript resources, browser parses and executes them.</li>\n</ul>\n<p>在传统的模式中，一个用户请求的生命周期如下：</p>\n<ul>\n<li>浏览器向服务器发送一个请求</li>\n<li>服务器解析请求，从数据层拉取数据然后构建HTML文档，然后在响应中返回这个文档</li>\n<li>HTTP响应通过互联网向浏览器传输。</li>\n<li>浏览器解析从服务器得到的响应，构建一个描述HTML文档的DOM树，然后从文档中的引用中下载css和JavaScript资源</li>\n<li>下载完css后，浏览器解析css并应用到DOM树上</li>\n<li>下载完成JavaScript后，浏览器解析JavaScript并执行它们</li>\n</ul>\n<p>Just as a <a href=\"https://en.wikipedia.org/wiki/Instruction_pipelining\" target=\"_blank\" rel=\"external\">pipelining microprocessor</a> divides an instruction’s life cycle into multiple stages (such as “instruction fetch”, “instruction decode”, “execution”, “register write back” etc.), BigPipe breaks the page generation process into several stages:</p>\n<p>Request parsing: web server parses and sanity checks the HTTP request.<br>Data fetching: web server fetches data from storage tier.<br>Markup generation: web server generates HTML markup for the response.<br>Network transport: the response is transferred from web server to browser.<br>CSS downloading: browser downloads CSS required by the page.<br>DOM tree construction and CSS styling: browser constructs DOM tree of the document, and then applies CSS rules on it.<br>JavaScript downloading: browser downloads JavaScript resources referenced by the page.<br>JavaScript execution: browser executes JavaScript code of the page.</p>\n<p>就像一个<a href=\"https://en.wikipedia.org/wiki/Instruction_pipelining\" target=\"_blank\" rel=\"external\">流水线微处理器</a>一样，将一个指令的生命周期分成几个状态（比如指令的fetch，指令的decode，执行，注册回写（register write back）等等），bigpipe就将页面的生成过程分成几个状态：</p>\n<ul>\n<li>Request parsing：服务器解析并全面检查HTTP请求</li>\n<li>Data fetching: 服务器从数据层抓取数据</li>\n<li>Markup generation: 服务器为响应生成HTML标记</li>\n<li>Network transport：服务器向浏览器传输响应内容</li>\n<li>CSS downloading：浏览器下载页面需要的CSS</li>\n<li>DOM tree construction add css styling: 浏览器构建文档的DOM树，然后应用CSS规则</li>\n<li>JavaScript downloading：浏览器下载页面引用的JavaScript 资源</li>\n<li>JavaScript execution：浏览器执行页面的JavaScript 代码。</li>\n</ul>\n<p>以上内容摘抄自<a href=\"https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919/\" target=\"_blank\" rel=\"external\">BigPipe: Pipelining web pages for high performance</a>，然后下面我自己翻译的。这里做个记录，算一个知识点，具体实现的话，各个语言基本都能实现。在NODEJS的实现中，个人的理解为：以前使用AJAX请求数据渲染模板，分为：全部（或者大部分）模板一次请求完成，然后请求接口获取数据，最后拼接HTML字符串进行渲染，bigpipe的话，模板部分分成了小块，最开始的请求当中只返回模板的一个简单的骨架，然后在后端获取该小块的数据后，使用<code>response.write</code>（简单实现的话）返回一段JavaScript代码来加载已经完成数据请求的模板。</p>\n","excerpt":"","more":"<h4 id=\"bigpipe原理小记\"><a href=\"#bigpipe原理小记\" class=\"headerlink\" title=\"bigpipe原理小记\"></a>bigpipe原理小记</h4><p>In the traditional model, the life cycle of a user request is the following:</p>\n<ul>\n<li>Browser sends an HTTP request to web server.</li>\n<li>Web server parses the request, pulls data from storage tier then formulates an HTML document and sends it to the client in an HTTP response. </li>\n<li>HTTP response is transferred over the Internet to browser. </li>\n<li>Browser parses the response from web server, constructs a DOM tree representation of the HTML document, and downloads CSS and JavaScript resources referenced by the document. </li>\n<li>After downloading CSS resources, browser parses them and applies them to the DOM tree.</li>\n<li>After downloading JavaScript resources, browser parses and executes them.</li>\n</ul>\n<p>在传统的模式中，一个用户请求的生命周期如下：</p>\n<ul>\n<li>浏览器向服务器发送一个请求</li>\n<li>服务器解析请求，从数据层拉取数据然后构建HTML文档，然后在响应中返回这个文档</li>\n<li>HTTP响应通过互联网向浏览器传输。</li>\n<li>浏览器解析从服务器得到的响应，构建一个描述HTML文档的DOM树，然后从文档中的引用中下载css和JavaScript资源</li>\n<li>下载完css后，浏览器解析css并应用到DOM树上</li>\n<li>下载完成JavaScript后，浏览器解析JavaScript并执行它们</li>\n</ul>\n<p>Just as a <a href=\"https://en.wikipedia.org/wiki/Instruction_pipelining\">pipelining microprocessor</a> divides an instruction’s life cycle into multiple stages (such as “instruction fetch”, “instruction decode”, “execution”, “register write back” etc.), BigPipe breaks the page generation process into several stages:</p>\n<p>Request parsing: web server parses and sanity checks the HTTP request.<br>Data fetching: web server fetches data from storage tier.<br>Markup generation: web server generates HTML markup for the response.<br>Network transport: the response is transferred from web server to browser.<br>CSS downloading: browser downloads CSS required by the page.<br>DOM tree construction and CSS styling: browser constructs DOM tree of the document, and then applies CSS rules on it.<br>JavaScript downloading: browser downloads JavaScript resources referenced by the page.<br>JavaScript execution: browser executes JavaScript code of the page.</p>\n<p>就像一个<a href=\"https://en.wikipedia.org/wiki/Instruction_pipelining\">流水线微处理器</a>一样，将一个指令的生命周期分成几个状态（比如指令的fetch，指令的decode，执行，注册回写（register write back）等等），bigpipe就将页面的生成过程分成几个状态：</p>\n<ul>\n<li>Request parsing：服务器解析并全面检查HTTP请求</li>\n<li>Data fetching: 服务器从数据层抓取数据</li>\n<li>Markup generation: 服务器为响应生成HTML标记</li>\n<li>Network transport：服务器向浏览器传输响应内容</li>\n<li>CSS downloading：浏览器下载页面需要的CSS</li>\n<li>DOM tree construction add css styling: 浏览器构建文档的DOM树，然后应用CSS规则</li>\n<li>JavaScript downloading：浏览器下载页面引用的JavaScript 资源</li>\n<li>JavaScript execution：浏览器执行页面的JavaScript 代码。</li>\n</ul>\n<p>以上内容摘抄自<a href=\"https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919/\">BigPipe: Pipelining web pages for high performance</a>，然后下面我自己翻译的。这里做个记录，算一个知识点，具体实现的话，各个语言基本都能实现。在NODEJS的实现中，个人的理解为：以前使用AJAX请求数据渲染模板，分为：全部（或者大部分）模板一次请求完成，然后请求接口获取数据，最后拼接HTML字符串进行渲染，bigpipe的话，模板部分分成了小块，最开始的请求当中只返回模板的一个简单的骨架，然后在后端获取该小块的数据后，使用<code>response.write</code>（简单实现的话）返回一段JavaScript代码来加载已经完成数据请求的模板。</p>\n","sticky":0},{"title":"I am here","_content":"\"Go home or stand up.It’s your fucking choice.Do you still remember the reason why you are here?\"\n\n","source":"_posts/here.md","raw":"---\ntitle: I am here\ntags: \n- my life\n---\n\"Go home or stand up.It’s your fucking choice.Do you still remember the reason why you are here?\"\n\n","slug":"here","published":1,"date":"2016-08-04T16:42:11.000Z","updated":"2016-08-04T16:42:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzakzo00074frybya0j332","content":"<p>“Go home or stand up.It’s your fucking choice.Do you still remember the reason why you are here?”</p>\n","excerpt":"","more":"<p>“Go home or stand up.It’s your fucking choice.Do you still remember the reason why you are here?”</p>\n","sticky":0},{"title":"vim的第一次接触","date":"2016-08-06T16:22:41.000Z","_content":"#### vim的以一次接触\n\n废话只有一句，我只是觉得很cool，所以想学会它。\n\n全键盘操作，想想就觉得全身舒坦。\n\n在早些的时候使用github终端的时候一不小心接触到vim这个东西，当是不知道怎么按进去了，然后一脸蒙逼，这个啥？怎么按键盘没啥反应？现在看来，姑且原谅我那个时候的无知了。\n\n网上流传着vim的学习曲线很陡峭，几乎呈九十度，确实有点骇人，我查看了很多教程之类的东西，开篇的时候无非都一句话，学习这玩意儿是很痛苦的，承受得住就是superstar，承受不住还是不要浪费时间，在第一次接触中，我已经有点体会的，来复习一下今天学到的并且记住的几个命令吧。\n\n* :help  查看帮助\n* hjkl 左下上右(边摸索边记住...)\n* :w 写入，姑且这么理解吧\n* :q 退出vim\n* :q! 强制退出，放弃更改\n* :wq 保存并退出\n* :0 回到编辑内容的开头\n* :$ 回到编辑内容的最后\n* :a 在光标后插入(这个还真有点难以马上上手)\n\n不带`:`的\n* dd 删除一行\n* x 删除当前光标所在的一个字符，后面向前删，真不知道我表清楚没有 \n* 0 回到光标说在行的开头\n* $ 回到光标说在行的结尾\n* dw 删除一个单词\n* u 表示undo\n* Ctrl+r 表示redo (这两个的精华还有待更深入的体验...)\n\n今天就这些，熟练的过程是相当的。。。低效率，有点相当于死记硬背的感觉的，但是还是感觉挺有趣的，这篇短小的文章就是vim写的，感觉的是相当的别扭，但是在进步就是好的。\n","source":"_posts/first-to-vim.md","raw":"---\ntitle: vim的第一次接触 \ndate: 2016-08-07 00:22:41\ntags:\n- vim \ncategories:\n- vim \n---\n#### vim的以一次接触\n\n废话只有一句，我只是觉得很cool，所以想学会它。\n\n全键盘操作，想想就觉得全身舒坦。\n\n在早些的时候使用github终端的时候一不小心接触到vim这个东西，当是不知道怎么按进去了，然后一脸蒙逼，这个啥？怎么按键盘没啥反应？现在看来，姑且原谅我那个时候的无知了。\n\n网上流传着vim的学习曲线很陡峭，几乎呈九十度，确实有点骇人，我查看了很多教程之类的东西，开篇的时候无非都一句话，学习这玩意儿是很痛苦的，承受得住就是superstar，承受不住还是不要浪费时间，在第一次接触中，我已经有点体会的，来复习一下今天学到的并且记住的几个命令吧。\n\n* :help  查看帮助\n* hjkl 左下上右(边摸索边记住...)\n* :w 写入，姑且这么理解吧\n* :q 退出vim\n* :q! 强制退出，放弃更改\n* :wq 保存并退出\n* :0 回到编辑内容的开头\n* :$ 回到编辑内容的最后\n* :a 在光标后插入(这个还真有点难以马上上手)\n\n不带`:`的\n* dd 删除一行\n* x 删除当前光标所在的一个字符，后面向前删，真不知道我表清楚没有 \n* 0 回到光标说在行的开头\n* $ 回到光标说在行的结尾\n* dw 删除一个单词\n* u 表示undo\n* Ctrl+r 表示redo (这两个的精华还有待更深入的体验...)\n\n今天就这些，熟练的过程是相当的。。。低效率，有点相当于死记硬背的感觉的，但是还是感觉挺有趣的，这篇短小的文章就是vim写的，感觉的是相当的别扭，但是在进步就是好的。\n","slug":"first-to-vim","published":1,"updated":"2016-08-06T17:17:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzakzp00094fryy2e150zv","content":"<h4 id=\"vim的以一次接触\"><a href=\"#vim的以一次接触\" class=\"headerlink\" title=\"vim的以一次接触\"></a>vim的以一次接触</h4><p>废话只有一句，我只是觉得很cool，所以想学会它。</p>\n<p>全键盘操作，想想就觉得全身舒坦。</p>\n<p>在早些的时候使用github终端的时候一不小心接触到vim这个东西，当是不知道怎么按进去了，然后一脸蒙逼，这个啥？怎么按键盘没啥反应？现在看来，姑且原谅我那个时候的无知了。</p>\n<p>网上流传着vim的学习曲线很陡峭，几乎呈九十度，确实有点骇人，我查看了很多教程之类的东西，开篇的时候无非都一句话，学习这玩意儿是很痛苦的，承受得住就是superstar，承受不住还是不要浪费时间，在第一次接触中，我已经有点体会的，来复习一下今天学到的并且记住的几个命令吧。</p>\n<ul>\n<li>:help  查看帮助</li>\n<li>hjkl 左下上右(边摸索边记住…)</li>\n<li>:w 写入，姑且这么理解吧</li>\n<li>:q 退出vim</li>\n<li>:q! 强制退出，放弃更改</li>\n<li>:wq 保存并退出</li>\n<li>:0 回到编辑内容的开头</li>\n<li>:$ 回到编辑内容的最后</li>\n<li>:a 在光标后插入(这个还真有点难以马上上手)</li>\n</ul>\n<p>不带<code>:</code>的</p>\n<ul>\n<li>dd 删除一行</li>\n<li>x 删除当前光标所在的一个字符，后面向前删，真不知道我表清楚没有 </li>\n<li>0 回到光标说在行的开头</li>\n<li>$ 回到光标说在行的结尾</li>\n<li>dw 删除一个单词</li>\n<li>u 表示undo</li>\n<li>Ctrl+r 表示redo (这两个的精华还有待更深入的体验…)</li>\n</ul>\n<p>今天就这些，熟练的过程是相当的。。。低效率，有点相当于死记硬背的感觉的，但是还是感觉挺有趣的，这篇短小的文章就是vim写的，感觉的是相当的别扭，但是在进步就是好的。</p>\n","excerpt":"","more":"<h4 id=\"vim的以一次接触\"><a href=\"#vim的以一次接触\" class=\"headerlink\" title=\"vim的以一次接触\"></a>vim的以一次接触</h4><p>废话只有一句，我只是觉得很cool，所以想学会它。</p>\n<p>全键盘操作，想想就觉得全身舒坦。</p>\n<p>在早些的时候使用github终端的时候一不小心接触到vim这个东西，当是不知道怎么按进去了，然后一脸蒙逼，这个啥？怎么按键盘没啥反应？现在看来，姑且原谅我那个时候的无知了。</p>\n<p>网上流传着vim的学习曲线很陡峭，几乎呈九十度，确实有点骇人，我查看了很多教程之类的东西，开篇的时候无非都一句话，学习这玩意儿是很痛苦的，承受得住就是superstar，承受不住还是不要浪费时间，在第一次接触中，我已经有点体会的，来复习一下今天学到的并且记住的几个命令吧。</p>\n<ul>\n<li>:help  查看帮助</li>\n<li>hjkl 左下上右(边摸索边记住…)</li>\n<li>:w 写入，姑且这么理解吧</li>\n<li>:q 退出vim</li>\n<li>:q! 强制退出，放弃更改</li>\n<li>:wq 保存并退出</li>\n<li>:0 回到编辑内容的开头</li>\n<li>:$ 回到编辑内容的最后</li>\n<li>:a 在光标后插入(这个还真有点难以马上上手)</li>\n</ul>\n<p>不带<code>:</code>的</p>\n<ul>\n<li>dd 删除一行</li>\n<li>x 删除当前光标所在的一个字符，后面向前删，真不知道我表清楚没有 </li>\n<li>0 回到光标说在行的开头</li>\n<li>$ 回到光标说在行的结尾</li>\n<li>dw 删除一个单词</li>\n<li>u 表示undo</li>\n<li>Ctrl+r 表示redo (这两个的精华还有待更深入的体验…)</li>\n</ul>\n<p>今天就这些，熟练的过程是相当的。。。低效率，有点相当于死记硬背的感觉的，但是还是感觉挺有趣的，这篇短小的文章就是vim写的，感觉的是相当的别扭，但是在进步就是好的。</p>\n","sticky":0},{"title":"关于一次NODE项目的总结","date":"2017-02-14T14:38:48.000Z","categorise":["node"],"_content":"\n#### 终于又更新\n是的，很久没更新了，除了懒（(*≧▽≦*)）的原因之外，还在忙这个第一次接手的完整的node项目，肝了两个月，终于上线了（算上开发和测试）。确实和毕业设计比起来（显然是一个不完成的毕业设计），不管在公司的流程上还是一些知识上都学到很多东西，这里做一个小小的总结吧。\n\n#### 页面\n页面上的东西其实不用多说，但是第一次使用NODE开发，以为页面可以使用ES6这样的新东西，可惜的是，还是不行，必须兼容IE8（悄悄地说，其实在开发时候并没有使用IE8自测），公司的用的还是很老很老的jQuery1.7.1😑，虽然页面的开发我没有完全参数（我主要开发NODE对接JAVA的接口），但是到中后期的时候，人手不够，原来的另外两个前端被分出去做其他的了，所以基本上我是接手了整个项目。可能其中有一个前端是刚来的原因（或者人家问了我没看到😑）,页面基本所有的AJAX请求的部分里面的模板全是写在JS里面的，😑一个页面的脚本达到了四五百行，后面测试修改BUG的时候也不得不说是一件痛苦的事情，其中在一个页面用到了`window.localStorage`，这个东西。说实话，光顾着修改BUG，没有仔细了解，只是知道有个`localStorage`和`sessionStorage`，这两个东西。其中呢\n\n> 存储在 localStorage 里面的数据没有过期时间（expiration time），而存储在 sessionStorage 里面的数据会在浏览器会话（browsing session）结束时被清除，即浏览器关闭时。 --[window.localStorage](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage)\n\n这么个概念，好吧，既然以前那个前端的使用的`window.localStorage`，那就顺着改吧。其实主要使用到的也就是：\n\n```JavaScript\nwindow.localStorage.setItem();//存值\nwindow.localStorage.removeItem();//删值\nwindow.localStorage.clear();//删除所有存储的东西\n```\n\n这么三个方法，其实在这里的时候遇到一个问题，发现有一些Chrome的插件会存一些数据在`window.localStorage`里面，导致我再页面最开始加载的时候使用`JSON.parse()`解析`window.localStorage`数据的时候会发生错误，然而如果我每次都使用`window.localStorage.clear()`全部干掉的话，也是不好的，所以最终使用了一个`try{}catch(){}`勉强算解决了。而且在这个过程中，我发现如果IE8是在标准文档模式下的话是可以执行`JSON.parse()`的，所以这里我就没有作细看了（请原谅我极度嫌弃IE8）。\n\n还有一个比较重要的问题就是，JAVA在传输数据的时候，传到页面上数据太多，无用的数据（提交的时候要提交回去），同时页面的模板和JS混合在一起，极大的提升了修改的难度（千万不能这样做😌)。\n\n#### NODE\n关于NODE，那说的可就多了，毕竟第一次搞完成项目，同时使用的是公司框架（老实说，公司框架--老框架，目前开发了一个新的，还没用过）并不是很好用，文档缺失（写了一半多吧），框架与框架之间的升级太突然，所以几乎是摸索着前进。\n\n##### 框架核心概念\n框架只要是调用JAVA的Dubbo服务，从接口获取数据（这里不得不吐槽一下，开发过程的Dubbo之不稳定，有时候一直掉，貌似是Zookeeper的问题，这里我就不是很清楚了）。在NODE中使用`Promise`进行对接口的异步调用，然后获取数据处理。大概看了一下框架中封装的`Promise`，可以传多个接口进去（以数据的形式），然后遍历调用，不好做评价（因为我也是菜鸡😂）。\n\n##### 无及附加的蛋疼过程--session&cookie\n这里主要就是状态以及数据的保存的问题了（不得不说，这里也有自己的一些原因，以为自己是老司机，结果没想到一发动就翻车了😂）。\n\n* Session ： 最开始，也就是项目的启动初期，本来是商量使用`redis`来存储数据的，但是后来又说`redis`服务不够，就放弃了。因为我主要是写NODE接口，但是JAVA需要的数据又太多（包括很多无用的数据，据说是为了后期好扩展）。所以最开始，是让页面值传一些数据的关键ID给我，然后由我来进行数据的筛选与拼装，不得不说，NODE能使用ES6真的是太好了，`for...of`帮了很大忙（因为使用NODE版本为4.2.x，所以有些语法不支持，比如解构，也没有使用`Babel`）。然后在测试过程中，问题就浮现出来了，在保存用户提交的数据的时候，也就是那一坨ID的时候，我是直接保存在Session里面的，但是每次刷新页面的时候，页面的数据都是不一样的，所以每次都会重写Session，然而用户的数据没有提交到JAVA的时候，是得保存用户上一次浏览页面是所产生的数据以便好拼装得到用户最终要提交的数据，可是每次重写Session过后，上次浏览产生的数据就不在了，这不行呀，想到存到cookie中，但是数据太多，有可能会超出cookie最大容量（4M左右），这样最后的最后，还是由页面从`window.localStorage`里面拼装并提交所有数据（其实这里还好，只是改得那个过程就不多说了😑）。其次就是在`Promise`中直接修改Session或者频繁的修改Session是无效的，其实这个过程我也没有很清楚的弄明白，在`app.js`的文件中最开始设置session时，有一个属性为`resave`，它的作用是：\n> Forces the session to be saved back to the session store, even if the session was never modified during the request. --[express-session](https://www.npmjs.com/package/express-session)\n\n(英语比较渣，就不翻译了😂)把这个`resave`设置为`true`的时候就会发生上述的作用，然后同时把`Promise`里面的session拿出来到外面使用一个变量保存，最后还使用了：\n```JavaScript\nreq.session.save(function(err){\n    //session saved\n})\n```\n这个函数（但是好像没产生什么作用）\n\n* cookie ： 这里就花费了比较多的时间了，以前只撸页面的时候天真的以为`document.cookie`嘛，然后把里面需要的数据处理出来就行了，然而并不是。经过一番了解过后，cookie有很多种，在浏览器设置上 Cookie 存在：\n  &nbsp;&nbsp;&nbsp;&nbsp;1 httpOnly\n  &nbsp;&nbsp;&nbsp;&nbsp;2 session\n  &nbsp;&nbsp;&nbsp;&nbsp;3 secure\n三种形态，这里简要说一下吧，后面会有一篇（不知道猴年马月能写完的）文章来专门说浏览器中的Session和Cookie。其中如果设置了httpOnly，那么在页面的JS里面是无法通过`document.cookie`来获取的；secure是只有在保证请求为安全请求时才会被发送的，如`HTTPS`；那么`sesseion cookie`，就是在设置cookie的时候没有设置生命周期产生的，只会在浏览器会话结束（应该就是关闭时）才会被删除。\n那么问题来了，其中有个需求是在项目中做的登录页里面，有一个注册链接，会跳转到公司主站的公共注册页面去，然后在注册页面注册完成后，会默认变成登录状态，然后通过一个参数，调回到我们项目的页面，并也同时变成登录状态，这里是没问题。问题是在项目下点击登出后，再点击登录页面里面的注册链接时，并不会跳转到注册页，而是直接跳转到主站首页并且为登录状态，当时想到的时候，主站肯定通过cookie某个（或多个值）来保存状态的，果然也是这样，看了php那里得源码（主站的大部分还是用php写的），找到了那两个值，然后我再我的NODE里面，访问我的登出路由时，使用：\n```JavaScript\nres.cookie('xxx',null,{ maxAge: 0, path: '/'});\n```\n来清空这两个cookie值，发现并没有成功😑，最开始以为是session cookie的原因，发现那两个cookie值并不是，只是设置了`httpOnly:true`，JS无法操作而已，那为什么不行了，再看cookie的设置域为顶级域名，而我们的项目在三级域名，网上说（应该是准确的，不知道有没有被误导，我查了一些RFC文件也没找到）,子域名对父域名的cookie只读而不可写，当时就很陷入了沉思了，那怎么搞呢，这样没法做啊，最后的最后虽然是使用JAVA提供的一个接口来进行登出状态的清除，但是通过查看Express的文档，发现了`res.cookie`里面的另一个参数`domain`，设置为cookie所在域的话是能清除的，这就比较尴尬了，\n```JavaScript\nres.cookie('xxx',null,{ maxAge: 0, path: '/', domain: '.xxx.com'});//即可\n```\n\n##### 搞服务器的一次成长\n我觉得这里是公司做得不好的一个地方，我们开发者，只有开发环境服务器的root权限，而测试服务器（或其他的一些服务器，正式环境不用说了），是只有一些查看权限，而且查看的目录不全，导致一些日志看不到，无法进行高效率的BUG修复。后来发现确实对我来说不好搞，干脆把我生成ssh加入到服务器上，由我自行查看调试，不得不说方便很多了。然而这个过程因为权限不足导致的错误都能讲一个故事了。同时使用Nginx做代理时获取到真实IP的配置过程也加强了一点对Nginx理解，这个过程甚至调用了NODE中原生的OS模块来获取机器的真实IP，确实能获得到，但是IP却是本机的，不符合需求😂。\n\n#### 总结吧(๑•ᴗ•๑)\n(我知道这篇文章肯定也有很多错别字😂，再改吧，手速跟不上思维了)总的来说虽然这次完整的NODE踩了很多坑，工期的延期也还好吧（单方面觉得），却是学到很多东西，视角也正从一个页面仔到前后都要顾及的角色转换，算是不错的一次体验。然后又开始搞我的React配合Webpack2重构的简历，这里后面也会有一个总结（搞完了来了，也是遍地是坑😂）。\n","source":"_posts/first-compelete-node-project.md","raw":"---\ntitle: 关于一次NODE项目的总结\ndate: 2017-02-14 22:38:48\ntags:\n- node\n- express\ncategorise:\n- node\n---\n\n#### 终于又更新\n是的，很久没更新了，除了懒（(*≧▽≦*)）的原因之外，还在忙这个第一次接手的完整的node项目，肝了两个月，终于上线了（算上开发和测试）。确实和毕业设计比起来（显然是一个不完成的毕业设计），不管在公司的流程上还是一些知识上都学到很多东西，这里做一个小小的总结吧。\n\n#### 页面\n页面上的东西其实不用多说，但是第一次使用NODE开发，以为页面可以使用ES6这样的新东西，可惜的是，还是不行，必须兼容IE8（悄悄地说，其实在开发时候并没有使用IE8自测），公司的用的还是很老很老的jQuery1.7.1😑，虽然页面的开发我没有完全参数（我主要开发NODE对接JAVA的接口），但是到中后期的时候，人手不够，原来的另外两个前端被分出去做其他的了，所以基本上我是接手了整个项目。可能其中有一个前端是刚来的原因（或者人家问了我没看到😑）,页面基本所有的AJAX请求的部分里面的模板全是写在JS里面的，😑一个页面的脚本达到了四五百行，后面测试修改BUG的时候也不得不说是一件痛苦的事情，其中在一个页面用到了`window.localStorage`，这个东西。说实话，光顾着修改BUG，没有仔细了解，只是知道有个`localStorage`和`sessionStorage`，这两个东西。其中呢\n\n> 存储在 localStorage 里面的数据没有过期时间（expiration time），而存储在 sessionStorage 里面的数据会在浏览器会话（browsing session）结束时被清除，即浏览器关闭时。 --[window.localStorage](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage)\n\n这么个概念，好吧，既然以前那个前端的使用的`window.localStorage`，那就顺着改吧。其实主要使用到的也就是：\n\n```JavaScript\nwindow.localStorage.setItem();//存值\nwindow.localStorage.removeItem();//删值\nwindow.localStorage.clear();//删除所有存储的东西\n```\n\n这么三个方法，其实在这里的时候遇到一个问题，发现有一些Chrome的插件会存一些数据在`window.localStorage`里面，导致我再页面最开始加载的时候使用`JSON.parse()`解析`window.localStorage`数据的时候会发生错误，然而如果我每次都使用`window.localStorage.clear()`全部干掉的话，也是不好的，所以最终使用了一个`try{}catch(){}`勉强算解决了。而且在这个过程中，我发现如果IE8是在标准文档模式下的话是可以执行`JSON.parse()`的，所以这里我就没有作细看了（请原谅我极度嫌弃IE8）。\n\n还有一个比较重要的问题就是，JAVA在传输数据的时候，传到页面上数据太多，无用的数据（提交的时候要提交回去），同时页面的模板和JS混合在一起，极大的提升了修改的难度（千万不能这样做😌)。\n\n#### NODE\n关于NODE，那说的可就多了，毕竟第一次搞完成项目，同时使用的是公司框架（老实说，公司框架--老框架，目前开发了一个新的，还没用过）并不是很好用，文档缺失（写了一半多吧），框架与框架之间的升级太突然，所以几乎是摸索着前进。\n\n##### 框架核心概念\n框架只要是调用JAVA的Dubbo服务，从接口获取数据（这里不得不吐槽一下，开发过程的Dubbo之不稳定，有时候一直掉，貌似是Zookeeper的问题，这里我就不是很清楚了）。在NODE中使用`Promise`进行对接口的异步调用，然后获取数据处理。大概看了一下框架中封装的`Promise`，可以传多个接口进去（以数据的形式），然后遍历调用，不好做评价（因为我也是菜鸡😂）。\n\n##### 无及附加的蛋疼过程--session&cookie\n这里主要就是状态以及数据的保存的问题了（不得不说，这里也有自己的一些原因，以为自己是老司机，结果没想到一发动就翻车了😂）。\n\n* Session ： 最开始，也就是项目的启动初期，本来是商量使用`redis`来存储数据的，但是后来又说`redis`服务不够，就放弃了。因为我主要是写NODE接口，但是JAVA需要的数据又太多（包括很多无用的数据，据说是为了后期好扩展）。所以最开始，是让页面值传一些数据的关键ID给我，然后由我来进行数据的筛选与拼装，不得不说，NODE能使用ES6真的是太好了，`for...of`帮了很大忙（因为使用NODE版本为4.2.x，所以有些语法不支持，比如解构，也没有使用`Babel`）。然后在测试过程中，问题就浮现出来了，在保存用户提交的数据的时候，也就是那一坨ID的时候，我是直接保存在Session里面的，但是每次刷新页面的时候，页面的数据都是不一样的，所以每次都会重写Session，然而用户的数据没有提交到JAVA的时候，是得保存用户上一次浏览页面是所产生的数据以便好拼装得到用户最终要提交的数据，可是每次重写Session过后，上次浏览产生的数据就不在了，这不行呀，想到存到cookie中，但是数据太多，有可能会超出cookie最大容量（4M左右），这样最后的最后，还是由页面从`window.localStorage`里面拼装并提交所有数据（其实这里还好，只是改得那个过程就不多说了😑）。其次就是在`Promise`中直接修改Session或者频繁的修改Session是无效的，其实这个过程我也没有很清楚的弄明白，在`app.js`的文件中最开始设置session时，有一个属性为`resave`，它的作用是：\n> Forces the session to be saved back to the session store, even if the session was never modified during the request. --[express-session](https://www.npmjs.com/package/express-session)\n\n(英语比较渣，就不翻译了😂)把这个`resave`设置为`true`的时候就会发生上述的作用，然后同时把`Promise`里面的session拿出来到外面使用一个变量保存，最后还使用了：\n```JavaScript\nreq.session.save(function(err){\n    //session saved\n})\n```\n这个函数（但是好像没产生什么作用）\n\n* cookie ： 这里就花费了比较多的时间了，以前只撸页面的时候天真的以为`document.cookie`嘛，然后把里面需要的数据处理出来就行了，然而并不是。经过一番了解过后，cookie有很多种，在浏览器设置上 Cookie 存在：\n  &nbsp;&nbsp;&nbsp;&nbsp;1 httpOnly\n  &nbsp;&nbsp;&nbsp;&nbsp;2 session\n  &nbsp;&nbsp;&nbsp;&nbsp;3 secure\n三种形态，这里简要说一下吧，后面会有一篇（不知道猴年马月能写完的）文章来专门说浏览器中的Session和Cookie。其中如果设置了httpOnly，那么在页面的JS里面是无法通过`document.cookie`来获取的；secure是只有在保证请求为安全请求时才会被发送的，如`HTTPS`；那么`sesseion cookie`，就是在设置cookie的时候没有设置生命周期产生的，只会在浏览器会话结束（应该就是关闭时）才会被删除。\n那么问题来了，其中有个需求是在项目中做的登录页里面，有一个注册链接，会跳转到公司主站的公共注册页面去，然后在注册页面注册完成后，会默认变成登录状态，然后通过一个参数，调回到我们项目的页面，并也同时变成登录状态，这里是没问题。问题是在项目下点击登出后，再点击登录页面里面的注册链接时，并不会跳转到注册页，而是直接跳转到主站首页并且为登录状态，当时想到的时候，主站肯定通过cookie某个（或多个值）来保存状态的，果然也是这样，看了php那里得源码（主站的大部分还是用php写的），找到了那两个值，然后我再我的NODE里面，访问我的登出路由时，使用：\n```JavaScript\nres.cookie('xxx',null,{ maxAge: 0, path: '/'});\n```\n来清空这两个cookie值，发现并没有成功😑，最开始以为是session cookie的原因，发现那两个cookie值并不是，只是设置了`httpOnly:true`，JS无法操作而已，那为什么不行了，再看cookie的设置域为顶级域名，而我们的项目在三级域名，网上说（应该是准确的，不知道有没有被误导，我查了一些RFC文件也没找到）,子域名对父域名的cookie只读而不可写，当时就很陷入了沉思了，那怎么搞呢，这样没法做啊，最后的最后虽然是使用JAVA提供的一个接口来进行登出状态的清除，但是通过查看Express的文档，发现了`res.cookie`里面的另一个参数`domain`，设置为cookie所在域的话是能清除的，这就比较尴尬了，\n```JavaScript\nres.cookie('xxx',null,{ maxAge: 0, path: '/', domain: '.xxx.com'});//即可\n```\n\n##### 搞服务器的一次成长\n我觉得这里是公司做得不好的一个地方，我们开发者，只有开发环境服务器的root权限，而测试服务器（或其他的一些服务器，正式环境不用说了），是只有一些查看权限，而且查看的目录不全，导致一些日志看不到，无法进行高效率的BUG修复。后来发现确实对我来说不好搞，干脆把我生成ssh加入到服务器上，由我自行查看调试，不得不说方便很多了。然而这个过程因为权限不足导致的错误都能讲一个故事了。同时使用Nginx做代理时获取到真实IP的配置过程也加强了一点对Nginx理解，这个过程甚至调用了NODE中原生的OS模块来获取机器的真实IP，确实能获得到，但是IP却是本机的，不符合需求😂。\n\n#### 总结吧(๑•ᴗ•๑)\n(我知道这篇文章肯定也有很多错别字😂，再改吧，手速跟不上思维了)总的来说虽然这次完整的NODE踩了很多坑，工期的延期也还好吧（单方面觉得），却是学到很多东西，视角也正从一个页面仔到前后都要顾及的角色转换，算是不错的一次体验。然后又开始搞我的React配合Webpack2重构的简历，这里后面也会有一个总结（搞完了来了，也是遍地是坑😂）。\n","slug":"first-compelete-node-project","published":1,"updated":"2017-02-15T02:20:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzakzq000a4fryeptxh2t2","content":"<h4 id=\"终于又更新\"><a href=\"#终于又更新\" class=\"headerlink\" title=\"终于又更新\"></a>终于又更新</h4><p>是的，很久没更新了，除了懒（(<em>≧▽≦</em>)）的原因之外，还在忙这个第一次接手的完整的node项目，肝了两个月，终于上线了（算上开发和测试）。确实和毕业设计比起来（显然是一个不完成的毕业设计），不管在公司的流程上还是一些知识上都学到很多东西，这里做一个小小的总结吧。</p>\n<h4 id=\"页面\"><a href=\"#页面\" class=\"headerlink\" title=\"页面\"></a>页面</h4><p>页面上的东西其实不用多说，但是第一次使用NODE开发，以为页面可以使用ES6这样的新东西，可惜的是，还是不行，必须兼容IE8（悄悄地说，其实在开发时候并没有使用IE8自测），公司的用的还是很老很老的jQuery1.7.1😑，虽然页面的开发我没有完全参数（我主要开发NODE对接JAVA的接口），但是到中后期的时候，人手不够，原来的另外两个前端被分出去做其他的了，所以基本上我是接手了整个项目。可能其中有一个前端是刚来的原因（或者人家问了我没看到😑）,页面基本所有的AJAX请求的部分里面的模板全是写在JS里面的，😑一个页面的脚本达到了四五百行，后面测试修改BUG的时候也不得不说是一件痛苦的事情，其中在一个页面用到了<code>window.localStorage</code>，这个东西。说实话，光顾着修改BUG，没有仔细了解，只是知道有个<code>localStorage</code>和<code>sessionStorage</code>，这两个东西。其中呢</p>\n<blockquote>\n<p>存储在 localStorage 里面的数据没有过期时间（expiration time），而存储在 sessionStorage 里面的数据会在浏览器会话（browsing session）结束时被清除，即浏览器关闭时。 –<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage\" target=\"_blank\" rel=\"external\">window.localStorage</a></p>\n</blockquote>\n<p>这么个概念，好吧，既然以前那个前端的使用的<code>window.localStorage</code>，那就顺着改吧。其实主要使用到的也就是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.localStorage.setItem();<span class=\"comment\">//存值</span></div><div class=\"line\"><span class=\"built_in\">window</span>.localStorage.removeItem();<span class=\"comment\">//删值</span></div><div class=\"line\"><span class=\"built_in\">window</span>.localStorage.clear();<span class=\"comment\">//删除所有存储的东西</span></div></pre></td></tr></table></figure>\n<p>这么三个方法，其实在这里的时候遇到一个问题，发现有一些Chrome的插件会存一些数据在<code>window.localStorage</code>里面，导致我再页面最开始加载的时候使用<code>JSON.parse()</code>解析<code>window.localStorage</code>数据的时候会发生错误，然而如果我每次都使用<code>window.localStorage.clear()</code>全部干掉的话，也是不好的，所以最终使用了一个<code>try{}catch(){}</code>勉强算解决了。而且在这个过程中，我发现如果IE8是在标准文档模式下的话是可以执行<code>JSON.parse()</code>的，所以这里我就没有作细看了（请原谅我极度嫌弃IE8）。</p>\n<p>还有一个比较重要的问题就是，JAVA在传输数据的时候，传到页面上数据太多，无用的数据（提交的时候要提交回去），同时页面的模板和JS混合在一起，极大的提升了修改的难度（千万不能这样做😌)。</p>\n<h4 id=\"NODE\"><a href=\"#NODE\" class=\"headerlink\" title=\"NODE\"></a>NODE</h4><p>关于NODE，那说的可就多了，毕竟第一次搞完成项目，同时使用的是公司框架（老实说，公司框架–老框架，目前开发了一个新的，还没用过）并不是很好用，文档缺失（写了一半多吧），框架与框架之间的升级太突然，所以几乎是摸索着前进。</p>\n<h5 id=\"框架核心概念\"><a href=\"#框架核心概念\" class=\"headerlink\" title=\"框架核心概念\"></a>框架核心概念</h5><p>框架只要是调用JAVA的Dubbo服务，从接口获取数据（这里不得不吐槽一下，开发过程的Dubbo之不稳定，有时候一直掉，貌似是Zookeeper的问题，这里我就不是很清楚了）。在NODE中使用<code>Promise</code>进行对接口的异步调用，然后获取数据处理。大概看了一下框架中封装的<code>Promise</code>，可以传多个接口进去（以数据的形式），然后遍历调用，不好做评价（因为我也是菜鸡😂）。</p>\n<h5 id=\"无及附加的蛋疼过程–session-amp-cookie\"><a href=\"#无及附加的蛋疼过程–session-amp-cookie\" class=\"headerlink\" title=\"无及附加的蛋疼过程–session&amp;cookie\"></a>无及附加的蛋疼过程–session&amp;cookie</h5><p>这里主要就是状态以及数据的保存的问题了（不得不说，这里也有自己的一些原因，以为自己是老司机，结果没想到一发动就翻车了😂）。</p>\n<ul>\n<li>Session ： 最开始，也就是项目的启动初期，本来是商量使用<code>redis</code>来存储数据的，但是后来又说<code>redis</code>服务不够，就放弃了。因为我主要是写NODE接口，但是JAVA需要的数据又太多（包括很多无用的数据，据说是为了后期好扩展）。所以最开始，是让页面值传一些数据的关键ID给我，然后由我来进行数据的筛选与拼装，不得不说，NODE能使用ES6真的是太好了，<code>for...of</code>帮了很大忙（因为使用NODE版本为4.2.x，所以有些语法不支持，比如解构，也没有使用<code>Babel</code>）。然后在测试过程中，问题就浮现出来了，在保存用户提交的数据的时候，也就是那一坨ID的时候，我是直接保存在Session里面的，但是每次刷新页面的时候，页面的数据都是不一样的，所以每次都会重写Session，然而用户的数据没有提交到JAVA的时候，是得保存用户上一次浏览页面是所产生的数据以便好拼装得到用户最终要提交的数据，可是每次重写Session过后，上次浏览产生的数据就不在了，这不行呀，想到存到cookie中，但是数据太多，有可能会超出cookie最大容量（4M左右），这样最后的最后，还是由页面从<code>window.localStorage</code>里面拼装并提交所有数据（其实这里还好，只是改得那个过程就不多说了😑）。其次就是在<code>Promise</code>中直接修改Session或者频繁的修改Session是无效的，其实这个过程我也没有很清楚的弄明白，在<code>app.js</code>的文件中最开始设置session时，有一个属性为<code>resave</code>，它的作用是：<blockquote>\n<p>Forces the session to be saved back to the session store, even if the session was never modified during the request. –<a href=\"https://www.npmjs.com/package/express-session\" target=\"_blank\" rel=\"external\">express-session</a></p>\n</blockquote>\n</li>\n</ul>\n<p>(英语比较渣，就不翻译了😂)把这个<code>resave</code>设置为<code>true</code>的时候就会发生上述的作用，然后同时把<code>Promise</code>里面的session拿出来到外面使用一个变量保存，最后还使用了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">req.session.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//session saved</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这个函数（但是好像没产生什么作用）</p>\n<ul>\n<li>cookie ： 这里就花费了比较多的时间了，以前只撸页面的时候天真的以为<code>document.cookie</code>嘛，然后把里面需要的数据处理出来就行了，然而并不是。经过一番了解过后，cookie有很多种，在浏览器设置上 Cookie 存在：<br>&nbsp;&nbsp;&nbsp;&nbsp;1 httpOnly<br>&nbsp;&nbsp;&nbsp;&nbsp;2 session<br>&nbsp;&nbsp;&nbsp;&nbsp;3 secure<br>三种形态，这里简要说一下吧，后面会有一篇（不知道猴年马月能写完的）文章来专门说浏览器中的Session和Cookie。其中如果设置了httpOnly，那么在页面的JS里面是无法通过<code>document.cookie</code>来获取的；secure是只有在保证请求为安全请求时才会被发送的，如<code>HTTPS</code>；那么<code>sesseion cookie</code>，就是在设置cookie的时候没有设置生命周期产生的，只会在浏览器会话结束（应该就是关闭时）才会被删除。<br>那么问题来了，其中有个需求是在项目中做的登录页里面，有一个注册链接，会跳转到公司主站的公共注册页面去，然后在注册页面注册完成后，会默认变成登录状态，然后通过一个参数，调回到我们项目的页面，并也同时变成登录状态，这里是没问题。问题是在项目下点击登出后，再点击登录页面里面的注册链接时，并不会跳转到注册页，而是直接跳转到主站首页并且为登录状态，当时想到的时候，主站肯定通过cookie某个（或多个值）来保存状态的，果然也是这样，看了php那里得源码（主站的大部分还是用php写的），找到了那两个值，然后我再我的NODE里面，访问我的登出路由时，使用：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">res.cookie(<span class=\"string\">'xxx'</span>,<span class=\"literal\">null</span>,&#123; maxAge: <span class=\"number\">0</span>, path: <span class=\"string\">'/'</span>&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>来清空这两个cookie值，发现并没有成功😑，最开始以为是session cookie的原因，发现那两个cookie值并不是，只是设置了<code>httpOnly:true</code>，JS无法操作而已，那为什么不行了，再看cookie的设置域为顶级域名，而我们的项目在三级域名，网上说（应该是准确的，不知道有没有被误导，我查了一些RFC文件也没找到）,子域名对父域名的cookie只读而不可写，当时就很陷入了沉思了，那怎么搞呢，这样没法做啊，最后的最后虽然是使用JAVA提供的一个接口来进行登出状态的清除，但是通过查看Express的文档，发现了<code>res.cookie</code>里面的另一个参数<code>domain</code>，设置为cookie所在域的话是能清除的，这就比较尴尬了，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">res.cookie(<span class=\"string\">'xxx'</span>,<span class=\"literal\">null</span>,&#123; maxAge: <span class=\"number\">0</span>, path: <span class=\"string\">'/'</span>, domain: <span class=\"string\">'.xxx.com'</span>&#125;);<span class=\"comment\">//即可</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"搞服务器的一次成长\"><a href=\"#搞服务器的一次成长\" class=\"headerlink\" title=\"搞服务器的一次成长\"></a>搞服务器的一次成长</h5><p>我觉得这里是公司做得不好的一个地方，我们开发者，只有开发环境服务器的root权限，而测试服务器（或其他的一些服务器，正式环境不用说了），是只有一些查看权限，而且查看的目录不全，导致一些日志看不到，无法进行高效率的BUG修复。后来发现确实对我来说不好搞，干脆把我生成ssh加入到服务器上，由我自行查看调试，不得不说方便很多了。然而这个过程因为权限不足导致的错误都能讲一个故事了。同时使用Nginx做代理时获取到真实IP的配置过程也加强了一点对Nginx理解，这个过程甚至调用了NODE中原生的OS模块来获取机器的真实IP，确实能获得到，但是IP却是本机的，不符合需求😂。</p>\n<h4 id=\"总结吧-๑•ᴗ•๑\"><a href=\"#总结吧-๑•ᴗ•๑\" class=\"headerlink\" title=\"总结吧(๑•ᴗ•๑)\"></a>总结吧(๑•ᴗ•๑)</h4><p>(我知道这篇文章肯定也有很多错别字😂，再改吧，手速跟不上思维了)总的来说虽然这次完整的NODE踩了很多坑，工期的延期也还好吧（单方面觉得），却是学到很多东西，视角也正从一个页面仔到前后都要顾及的角色转换，算是不错的一次体验。然后又开始搞我的React配合Webpack2重构的简历，这里后面也会有一个总结（搞完了来了，也是遍地是坑😂）。</p>\n","excerpt":"","more":"<h4 id=\"终于又更新\"><a href=\"#终于又更新\" class=\"headerlink\" title=\"终于又更新\"></a>终于又更新</h4><p>是的，很久没更新了，除了懒（(<em>≧▽≦</em>)）的原因之外，还在忙这个第一次接手的完整的node项目，肝了两个月，终于上线了（算上开发和测试）。确实和毕业设计比起来（显然是一个不完成的毕业设计），不管在公司的流程上还是一些知识上都学到很多东西，这里做一个小小的总结吧。</p>\n<h4 id=\"页面\"><a href=\"#页面\" class=\"headerlink\" title=\"页面\"></a>页面</h4><p>页面上的东西其实不用多说，但是第一次使用NODE开发，以为页面可以使用ES6这样的新东西，可惜的是，还是不行，必须兼容IE8（悄悄地说，其实在开发时候并没有使用IE8自测），公司的用的还是很老很老的jQuery1.7.1😑，虽然页面的开发我没有完全参数（我主要开发NODE对接JAVA的接口），但是到中后期的时候，人手不够，原来的另外两个前端被分出去做其他的了，所以基本上我是接手了整个项目。可能其中有一个前端是刚来的原因（或者人家问了我没看到😑）,页面基本所有的AJAX请求的部分里面的模板全是写在JS里面的，😑一个页面的脚本达到了四五百行，后面测试修改BUG的时候也不得不说是一件痛苦的事情，其中在一个页面用到了<code>window.localStorage</code>，这个东西。说实话，光顾着修改BUG，没有仔细了解，只是知道有个<code>localStorage</code>和<code>sessionStorage</code>，这两个东西。其中呢</p>\n<blockquote>\n<p>存储在 localStorage 里面的数据没有过期时间（expiration time），而存储在 sessionStorage 里面的数据会在浏览器会话（browsing session）结束时被清除，即浏览器关闭时。 –<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage\">window.localStorage</a></p>\n</blockquote>\n<p>这么个概念，好吧，既然以前那个前端的使用的<code>window.localStorage</code>，那就顺着改吧。其实主要使用到的也就是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.localStorage.setItem();<span class=\"comment\">//存值</span></div><div class=\"line\"><span class=\"built_in\">window</span>.localStorage.removeItem();<span class=\"comment\">//删值</span></div><div class=\"line\"><span class=\"built_in\">window</span>.localStorage.clear();<span class=\"comment\">//删除所有存储的东西</span></div></pre></td></tr></table></figure>\n<p>这么三个方法，其实在这里的时候遇到一个问题，发现有一些Chrome的插件会存一些数据在<code>window.localStorage</code>里面，导致我再页面最开始加载的时候使用<code>JSON.parse()</code>解析<code>window.localStorage</code>数据的时候会发生错误，然而如果我每次都使用<code>window.localStorage.clear()</code>全部干掉的话，也是不好的，所以最终使用了一个<code>try{}catch(){}</code>勉强算解决了。而且在这个过程中，我发现如果IE8是在标准文档模式下的话是可以执行<code>JSON.parse()</code>的，所以这里我就没有作细看了（请原谅我极度嫌弃IE8）。</p>\n<p>还有一个比较重要的问题就是，JAVA在传输数据的时候，传到页面上数据太多，无用的数据（提交的时候要提交回去），同时页面的模板和JS混合在一起，极大的提升了修改的难度（千万不能这样做😌)。</p>\n<h4 id=\"NODE\"><a href=\"#NODE\" class=\"headerlink\" title=\"NODE\"></a>NODE</h4><p>关于NODE，那说的可就多了，毕竟第一次搞完成项目，同时使用的是公司框架（老实说，公司框架–老框架，目前开发了一个新的，还没用过）并不是很好用，文档缺失（写了一半多吧），框架与框架之间的升级太突然，所以几乎是摸索着前进。</p>\n<h5 id=\"框架核心概念\"><a href=\"#框架核心概念\" class=\"headerlink\" title=\"框架核心概念\"></a>框架核心概念</h5><p>框架只要是调用JAVA的Dubbo服务，从接口获取数据（这里不得不吐槽一下，开发过程的Dubbo之不稳定，有时候一直掉，貌似是Zookeeper的问题，这里我就不是很清楚了）。在NODE中使用<code>Promise</code>进行对接口的异步调用，然后获取数据处理。大概看了一下框架中封装的<code>Promise</code>，可以传多个接口进去（以数据的形式），然后遍历调用，不好做评价（因为我也是菜鸡😂）。</p>\n<h5 id=\"无及附加的蛋疼过程–session-amp-cookie\"><a href=\"#无及附加的蛋疼过程–session-amp-cookie\" class=\"headerlink\" title=\"无及附加的蛋疼过程–session&amp;cookie\"></a>无及附加的蛋疼过程–session&amp;cookie</h5><p>这里主要就是状态以及数据的保存的问题了（不得不说，这里也有自己的一些原因，以为自己是老司机，结果没想到一发动就翻车了😂）。</p>\n<ul>\n<li>Session ： 最开始，也就是项目的启动初期，本来是商量使用<code>redis</code>来存储数据的，但是后来又说<code>redis</code>服务不够，就放弃了。因为我主要是写NODE接口，但是JAVA需要的数据又太多（包括很多无用的数据，据说是为了后期好扩展）。所以最开始，是让页面值传一些数据的关键ID给我，然后由我来进行数据的筛选与拼装，不得不说，NODE能使用ES6真的是太好了，<code>for...of</code>帮了很大忙（因为使用NODE版本为4.2.x，所以有些语法不支持，比如解构，也没有使用<code>Babel</code>）。然后在测试过程中，问题就浮现出来了，在保存用户提交的数据的时候，也就是那一坨ID的时候，我是直接保存在Session里面的，但是每次刷新页面的时候，页面的数据都是不一样的，所以每次都会重写Session，然而用户的数据没有提交到JAVA的时候，是得保存用户上一次浏览页面是所产生的数据以便好拼装得到用户最终要提交的数据，可是每次重写Session过后，上次浏览产生的数据就不在了，这不行呀，想到存到cookie中，但是数据太多，有可能会超出cookie最大容量（4M左右），这样最后的最后，还是由页面从<code>window.localStorage</code>里面拼装并提交所有数据（其实这里还好，只是改得那个过程就不多说了😑）。其次就是在<code>Promise</code>中直接修改Session或者频繁的修改Session是无效的，其实这个过程我也没有很清楚的弄明白，在<code>app.js</code>的文件中最开始设置session时，有一个属性为<code>resave</code>，它的作用是：<blockquote>\n<p>Forces the session to be saved back to the session store, even if the session was never modified during the request. –<a href=\"https://www.npmjs.com/package/express-session\">express-session</a></p>\n</blockquote>\n</li>\n</ul>\n<p>(英语比较渣，就不翻译了😂)把这个<code>resave</code>设置为<code>true</code>的时候就会发生上述的作用，然后同时把<code>Promise</code>里面的session拿出来到外面使用一个变量保存，最后还使用了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">req.session.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//session saved</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这个函数（但是好像没产生什么作用）</p>\n<ul>\n<li>cookie ： 这里就花费了比较多的时间了，以前只撸页面的时候天真的以为<code>document.cookie</code>嘛，然后把里面需要的数据处理出来就行了，然而并不是。经过一番了解过后，cookie有很多种，在浏览器设置上 Cookie 存在：<br>&nbsp;&nbsp;&nbsp;&nbsp;1 httpOnly<br>&nbsp;&nbsp;&nbsp;&nbsp;2 session<br>&nbsp;&nbsp;&nbsp;&nbsp;3 secure<br>三种形态，这里简要说一下吧，后面会有一篇（不知道猴年马月能写完的）文章来专门说浏览器中的Session和Cookie。其中如果设置了httpOnly，那么在页面的JS里面是无法通过<code>document.cookie</code>来获取的；secure是只有在保证请求为安全请求时才会被发送的，如<code>HTTPS</code>；那么<code>sesseion cookie</code>，就是在设置cookie的时候没有设置生命周期产生的，只会在浏览器会话结束（应该就是关闭时）才会被删除。<br>那么问题来了，其中有个需求是在项目中做的登录页里面，有一个注册链接，会跳转到公司主站的公共注册页面去，然后在注册页面注册完成后，会默认变成登录状态，然后通过一个参数，调回到我们项目的页面，并也同时变成登录状态，这里是没问题。问题是在项目下点击登出后，再点击登录页面里面的注册链接时，并不会跳转到注册页，而是直接跳转到主站首页并且为登录状态，当时想到的时候，主站肯定通过cookie某个（或多个值）来保存状态的，果然也是这样，看了php那里得源码（主站的大部分还是用php写的），找到了那两个值，然后我再我的NODE里面，访问我的登出路由时，使用：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">res.cookie(<span class=\"string\">'xxx'</span>,<span class=\"literal\">null</span>,&#123; maxAge: <span class=\"number\">0</span>, path: <span class=\"string\">'/'</span>&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>来清空这两个cookie值，发现并没有成功😑，最开始以为是session cookie的原因，发现那两个cookie值并不是，只是设置了<code>httpOnly:true</code>，JS无法操作而已，那为什么不行了，再看cookie的设置域为顶级域名，而我们的项目在三级域名，网上说（应该是准确的，不知道有没有被误导，我查了一些RFC文件也没找到）,子域名对父域名的cookie只读而不可写，当时就很陷入了沉思了，那怎么搞呢，这样没法做啊，最后的最后虽然是使用JAVA提供的一个接口来进行登出状态的清除，但是通过查看Express的文档，发现了<code>res.cookie</code>里面的另一个参数<code>domain</code>，设置为cookie所在域的话是能清除的，这就比较尴尬了，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">res.cookie(<span class=\"string\">'xxx'</span>,<span class=\"literal\">null</span>,&#123; maxAge: <span class=\"number\">0</span>, path: <span class=\"string\">'/'</span>, domain: <span class=\"string\">'.xxx.com'</span>&#125;);<span class=\"comment\">//即可</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"搞服务器的一次成长\"><a href=\"#搞服务器的一次成长\" class=\"headerlink\" title=\"搞服务器的一次成长\"></a>搞服务器的一次成长</h5><p>我觉得这里是公司做得不好的一个地方，我们开发者，只有开发环境服务器的root权限，而测试服务器（或其他的一些服务器，正式环境不用说了），是只有一些查看权限，而且查看的目录不全，导致一些日志看不到，无法进行高效率的BUG修复。后来发现确实对我来说不好搞，干脆把我生成ssh加入到服务器上，由我自行查看调试，不得不说方便很多了。然而这个过程因为权限不足导致的错误都能讲一个故事了。同时使用Nginx做代理时获取到真实IP的配置过程也加强了一点对Nginx理解，这个过程甚至调用了NODE中原生的OS模块来获取机器的真实IP，确实能获得到，但是IP却是本机的，不符合需求😂。</p>\n<h4 id=\"总结吧-๑•ᴗ•๑\"><a href=\"#总结吧-๑•ᴗ•๑\" class=\"headerlink\" title=\"总结吧(๑•ᴗ•๑)\"></a>总结吧(๑•ᴗ•๑)</h4><p>(我知道这篇文章肯定也有很多错别字😂，再改吧，手速跟不上思维了)总的来说虽然这次完整的NODE踩了很多坑，工期的延期也还好吧（单方面觉得），却是学到很多东西，视角也正从一个页面仔到前后都要顾及的角色转换，算是不错的一次体验。然后又开始搞我的React配合Webpack2重构的简历，这里后面也会有一个总结（搞完了来了，也是遍地是坑😂）。</p>\n","sticky":0},{"title":"我才不想写这种东西😑","date":"2016-11-17T14:19:09.000Z","_content":"够幸运的话，假设我能活70岁，现在我23岁，那么我还有47年存在的时间，除去闰年什么的，假设每年都是365天，那么我还有17155天的时间，我每天睡觉的时间大约是7小时（如果我能在以后每一天都睡7个小时的话），那么我睡觉的时间就占了我剩下生命的大约5004天，所以我剩下的时间只有12151天，如果我能每天按时下班，每天工作7个小时（除去中午休息的两个小时），我真正的自由时间还有8607天，也就是24年左右。我已经花了23年来长成现在的一个有思想，有认知，有喜欢和厌恶，有自己想做的事情的一个人，明明感觉才一瞬间，我才感觉自己刚刚起步，才感觉为了自己喜欢的东西激动到无法睡觉，但是时间也是只剩另一个瞬间了，然而不幸的是，我有了很多很多想做的事情，时间也显得很紧迫。\n\n最近我竟然为了工作中的人际关系感到一些焦虑，但是现在看来，完全是……自己想多了。每个人都有有限的精力和自己的选择，每个人也不可能让每个人都喜欢。我选择我把我的精力放在我想在做的事情上面，我不愿去搞交际，不愿意去闲聊。其实我真的不是孤僻，某种程度来说，可以算是一个话多的人，只是很自私不愿意分出我一方面的精力来应付这些东西。我记得我上高中的时候就很喜欢和别人出去玩，感觉多好啊，我有这么多聊得来的朋友，嗯，只是玩的朋友，我有收获什么吗？说现实点，我的成绩提高了吗？我的见识增长了吗？\n\n没有。\n\n我印象特别深刻的一个段子就是，平时国企的员工都在聊什么？今天蒜涨了几毛，明天哪个超市有优惠。这些为生活操碎了心的人很实实在在的生活着。只是我不明白，关注这个那个明星出轨了怀孕了对我现如今的生活有什么影响。关注今天明天这个那个店铺打折要早点去抢到底有什么意义。了解这个那个同事发生了不幸或者愉快的事情有什么可高兴的。知道要在什么时候掐好点进公司能和大佬相遇有什么荣誉感。我是个特别容易分心的人，我只有把耳机调到最大声。\n\nTime waits for no one.\n\n我是只是想干自己的事情。\n\n（懒癌晚期，虽然遇到很多有趣的东西和问题，但是尼玛就是“忘记”来写博客，但是郁闷的时候才想起🤔）\n\n\n\n\n","source":"_posts/choose.md","raw":"---\ntitle: 我才不想写这种东西😑\ndate: 2016-11-17 22:19:09\ntags:\n- mylife\ncategories:\n- mylife\n---\n够幸运的话，假设我能活70岁，现在我23岁，那么我还有47年存在的时间，除去闰年什么的，假设每年都是365天，那么我还有17155天的时间，我每天睡觉的时间大约是7小时（如果我能在以后每一天都睡7个小时的话），那么我睡觉的时间就占了我剩下生命的大约5004天，所以我剩下的时间只有12151天，如果我能每天按时下班，每天工作7个小时（除去中午休息的两个小时），我真正的自由时间还有8607天，也就是24年左右。我已经花了23年来长成现在的一个有思想，有认知，有喜欢和厌恶，有自己想做的事情的一个人，明明感觉才一瞬间，我才感觉自己刚刚起步，才感觉为了自己喜欢的东西激动到无法睡觉，但是时间也是只剩另一个瞬间了，然而不幸的是，我有了很多很多想做的事情，时间也显得很紧迫。\n\n最近我竟然为了工作中的人际关系感到一些焦虑，但是现在看来，完全是……自己想多了。每个人都有有限的精力和自己的选择，每个人也不可能让每个人都喜欢。我选择我把我的精力放在我想在做的事情上面，我不愿去搞交际，不愿意去闲聊。其实我真的不是孤僻，某种程度来说，可以算是一个话多的人，只是很自私不愿意分出我一方面的精力来应付这些东西。我记得我上高中的时候就很喜欢和别人出去玩，感觉多好啊，我有这么多聊得来的朋友，嗯，只是玩的朋友，我有收获什么吗？说现实点，我的成绩提高了吗？我的见识增长了吗？\n\n没有。\n\n我印象特别深刻的一个段子就是，平时国企的员工都在聊什么？今天蒜涨了几毛，明天哪个超市有优惠。这些为生活操碎了心的人很实实在在的生活着。只是我不明白，关注这个那个明星出轨了怀孕了对我现如今的生活有什么影响。关注今天明天这个那个店铺打折要早点去抢到底有什么意义。了解这个那个同事发生了不幸或者愉快的事情有什么可高兴的。知道要在什么时候掐好点进公司能和大佬相遇有什么荣誉感。我是个特别容易分心的人，我只有把耳机调到最大声。\n\nTime waits for no one.\n\n我是只是想干自己的事情。\n\n（懒癌晚期，虽然遇到很多有趣的东西和问题，但是尼玛就是“忘记”来写博客，但是郁闷的时候才想起🤔）\n\n\n\n\n","slug":"choose","published":1,"updated":"2016-11-17T15:24:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzakzr000d4fry24ccfr21","content":"<p>够幸运的话，假设我能活70岁，现在我23岁，那么我还有47年存在的时间，除去闰年什么的，假设每年都是365天，那么我还有17155天的时间，我每天睡觉的时间大约是7小时（如果我能在以后每一天都睡7个小时的话），那么我睡觉的时间就占了我剩下生命的大约5004天，所以我剩下的时间只有12151天，如果我能每天按时下班，每天工作7个小时（除去中午休息的两个小时），我真正的自由时间还有8607天，也就是24年左右。我已经花了23年来长成现在的一个有思想，有认知，有喜欢和厌恶，有自己想做的事情的一个人，明明感觉才一瞬间，我才感觉自己刚刚起步，才感觉为了自己喜欢的东西激动到无法睡觉，但是时间也是只剩另一个瞬间了，然而不幸的是，我有了很多很多想做的事情，时间也显得很紧迫。</p>\n<p>最近我竟然为了工作中的人际关系感到一些焦虑，但是现在看来，完全是……自己想多了。每个人都有有限的精力和自己的选择，每个人也不可能让每个人都喜欢。我选择我把我的精力放在我想在做的事情上面，我不愿去搞交际，不愿意去闲聊。其实我真的不是孤僻，某种程度来说，可以算是一个话多的人，只是很自私不愿意分出我一方面的精力来应付这些东西。我记得我上高中的时候就很喜欢和别人出去玩，感觉多好啊，我有这么多聊得来的朋友，嗯，只是玩的朋友，我有收获什么吗？说现实点，我的成绩提高了吗？我的见识增长了吗？</p>\n<p>没有。</p>\n<p>我印象特别深刻的一个段子就是，平时国企的员工都在聊什么？今天蒜涨了几毛，明天哪个超市有优惠。这些为生活操碎了心的人很实实在在的生活着。只是我不明白，关注这个那个明星出轨了怀孕了对我现如今的生活有什么影响。关注今天明天这个那个店铺打折要早点去抢到底有什么意义。了解这个那个同事发生了不幸或者愉快的事情有什么可高兴的。知道要在什么时候掐好点进公司能和大佬相遇有什么荣誉感。我是个特别容易分心的人，我只有把耳机调到最大声。</p>\n<p>Time waits for no one.</p>\n<p>我是只是想干自己的事情。</p>\n<p>（懒癌晚期，虽然遇到很多有趣的东西和问题，但是尼玛就是“忘记”来写博客，但是郁闷的时候才想起🤔）</p>\n","excerpt":"","more":"<p>够幸运的话，假设我能活70岁，现在我23岁，那么我还有47年存在的时间，除去闰年什么的，假设每年都是365天，那么我还有17155天的时间，我每天睡觉的时间大约是7小时（如果我能在以后每一天都睡7个小时的话），那么我睡觉的时间就占了我剩下生命的大约5004天，所以我剩下的时间只有12151天，如果我能每天按时下班，每天工作7个小时（除去中午休息的两个小时），我真正的自由时间还有8607天，也就是24年左右。我已经花了23年来长成现在的一个有思想，有认知，有喜欢和厌恶，有自己想做的事情的一个人，明明感觉才一瞬间，我才感觉自己刚刚起步，才感觉为了自己喜欢的东西激动到无法睡觉，但是时间也是只剩另一个瞬间了，然而不幸的是，我有了很多很多想做的事情，时间也显得很紧迫。</p>\n<p>最近我竟然为了工作中的人际关系感到一些焦虑，但是现在看来，完全是……自己想多了。每个人都有有限的精力和自己的选择，每个人也不可能让每个人都喜欢。我选择我把我的精力放在我想在做的事情上面，我不愿去搞交际，不愿意去闲聊。其实我真的不是孤僻，某种程度来说，可以算是一个话多的人，只是很自私不愿意分出我一方面的精力来应付这些东西。我记得我上高中的时候就很喜欢和别人出去玩，感觉多好啊，我有这么多聊得来的朋友，嗯，只是玩的朋友，我有收获什么吗？说现实点，我的成绩提高了吗？我的见识增长了吗？</p>\n<p>没有。</p>\n<p>我印象特别深刻的一个段子就是，平时国企的员工都在聊什么？今天蒜涨了几毛，明天哪个超市有优惠。这些为生活操碎了心的人很实实在在的生活着。只是我不明白，关注这个那个明星出轨了怀孕了对我现如今的生活有什么影响。关注今天明天这个那个店铺打折要早点去抢到底有什么意义。了解这个那个同事发生了不幸或者愉快的事情有什么可高兴的。知道要在什么时候掐好点进公司能和大佬相遇有什么荣誉感。我是个特别容易分心的人，我只有把耳机调到最大声。</p>\n<p>Time waits for no one.</p>\n<p>我是只是想干自己的事情。</p>\n<p>（懒癌晚期，虽然遇到很多有趣的东西和问题，但是尼玛就是“忘记”来写博客，但是郁闷的时候才想起🤔）</p>\n","sticky":0},{"title":"使用hexo与GitHub Pages搭建自己的博客","date":"2016-01-27T13:55:37.000Z","_content":"本文是我如何使用hexo与github pages搭建个人博客的过程，虽然网上教程已经很多了。那这就姑且算作回顾一下吧。\n\n#### 使用的版本\n - node 4.2.2\n - hexo 3.1.1\n - Git 2.6.1\n\n\n{% blockquote GitHub Pages http://pages.github.com pages.github.com%}\nGit、Node的使用在这里就不赘述了。如何使用GitHub Pages，可以参考官方网站，仔细阅读，已经写得很详细了，特别是在新建仓库的时候，username.github.io中的username一定要和自己的username相同，区分大小写，不要问我为什么知道的。\n{% endblockquote %}\n\n\n#### Hexo的使用\n{% blockquote HEXO http://hexo.io/zh-cn/docs hexo %}\n关于hexo，一开始接触的时候会觉得茫然一片，不知道干啥，网上也有教程，但是搜到大部分教程已经过时，在package.json里面已经写好了依赖包，npm install的时候会安装好所需要的包，不用再单独去安装一次hexo server了，具体可以参考官方网站，文档已经写得很清楚了。\n{% endblockquote %}\n\n\n\n#### 评论插件\nhexo自带的是Disqus，但是这个需要使用facebook，twitter，google+等登录，如果你没有，或者没有走到墙外面，你还可选择国内的 多说 ，我就是使用的这个，具体效果看文章最后的评论区域就知道。如何在博客中使用，这里可能有一点差异，有些主题可能已经集成了duoshuo，只需要在配置文件中开启即可，比如使用的 hexo-theme-next :https://github.com/iissnan/hexo-theme-next 有些主题没有集成，则需要去duoshuo的官网生成一段通用代码，复制到你的评论模板里面，覆盖原来的Disqus评论代码。\n\n\n#### 使用主题\n在使用hexo初始化一个博客之后，会有一个自带的默认主题landscape，当然，我们都是追求个性的人不是吗？虽然可以随便改这个默认主题的模板样式，但是我们需要追求更加高Big的。我使用的是比较收欢迎的next主题，上面已经给出了地址。你只需要通过git将它clone到你博客目录下的themes文件夹里面，然后在站点的配置文件里面将使用的名字改为你clone下来的next主题文件夹名字就可以了。\n\n\n最后我捣鼓了大半天，最后总结到一个非常重要的知识点，学习一个新的东西，官方的文档真的真的真的（重要的事情说三遍）很重要。网上博客写出来的东西，有可能只是当时博主遇到的问题，也有可能当时博主搭建博客使用的东西版本与你目前使用的版本是有差距。所以官方文档才是最正宗的。\n","source":"_posts/hexo.md","raw":"---\ntitle: 使用hexo与GitHub Pages搭建自己的博客\ndate: 2016-01-27 21:55:37\ntags: \n- hexo\n- duoshuo\n- 搭建自己的博客\n- GitHub Pages\ncategories:\n- hexo\n---\n本文是我如何使用hexo与github pages搭建个人博客的过程，虽然网上教程已经很多了。那这就姑且算作回顾一下吧。\n\n#### 使用的版本\n - node 4.2.2\n - hexo 3.1.1\n - Git 2.6.1\n\n\n{% blockquote GitHub Pages http://pages.github.com pages.github.com%}\nGit、Node的使用在这里就不赘述了。如何使用GitHub Pages，可以参考官方网站，仔细阅读，已经写得很详细了，特别是在新建仓库的时候，username.github.io中的username一定要和自己的username相同，区分大小写，不要问我为什么知道的。\n{% endblockquote %}\n\n\n#### Hexo的使用\n{% blockquote HEXO http://hexo.io/zh-cn/docs hexo %}\n关于hexo，一开始接触的时候会觉得茫然一片，不知道干啥，网上也有教程，但是搜到大部分教程已经过时，在package.json里面已经写好了依赖包，npm install的时候会安装好所需要的包，不用再单独去安装一次hexo server了，具体可以参考官方网站，文档已经写得很清楚了。\n{% endblockquote %}\n\n\n\n#### 评论插件\nhexo自带的是Disqus，但是这个需要使用facebook，twitter，google+等登录，如果你没有，或者没有走到墙外面，你还可选择国内的 多说 ，我就是使用的这个，具体效果看文章最后的评论区域就知道。如何在博客中使用，这里可能有一点差异，有些主题可能已经集成了duoshuo，只需要在配置文件中开启即可，比如使用的 hexo-theme-next :https://github.com/iissnan/hexo-theme-next 有些主题没有集成，则需要去duoshuo的官网生成一段通用代码，复制到你的评论模板里面，覆盖原来的Disqus评论代码。\n\n\n#### 使用主题\n在使用hexo初始化一个博客之后，会有一个自带的默认主题landscape，当然，我们都是追求个性的人不是吗？虽然可以随便改这个默认主题的模板样式，但是我们需要追求更加高Big的。我使用的是比较收欢迎的next主题，上面已经给出了地址。你只需要通过git将它clone到你博客目录下的themes文件夹里面，然后在站点的配置文件里面将使用的名字改为你clone下来的next主题文件夹名字就可以了。\n\n\n最后我捣鼓了大半天，最后总结到一个非常重要的知识点，学习一个新的东西，官方的文档真的真的真的（重要的事情说三遍）很重要。网上博客写出来的东西，有可能只是当时博主遇到的问题，也有可能当时博主搭建博客使用的东西版本与你目前使用的版本是有差距。所以官方文档才是最正宗的。\n","slug":"hexo","published":1,"updated":"2016-08-04T16:42:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzakzu000f4fryb25wxf3f","content":"<p>本文是我如何使用hexo与github pages搭建个人博客的过程，虽然网上教程已经很多了。那这就姑且算作回顾一下吧。</p>\n<h4 id=\"使用的版本\"><a href=\"#使用的版本\" class=\"headerlink\" title=\"使用的版本\"></a>使用的版本</h4><ul>\n<li>node 4.2.2</li>\n<li>hexo 3.1.1</li>\n<li>Git 2.6.1</li>\n</ul>\n<blockquote><p>Git、Node的使用在这里就不赘述了。如何使用GitHub Pages，可以参考官方网站，仔细阅读，已经写得很详细了，特别是在新建仓库的时候，username.github.io中的username一定要和自己的username相同，区分大小写，不要问我为什么知道的。</p>\n<footer><strong>GitHub Pages</strong><cite><a href=\"http://pages.github.com\" target=\"_blank\" rel=\"external\">pages.github.com</a></cite></footer></blockquote>\n<h4 id=\"Hexo的使用\"><a href=\"#Hexo的使用\" class=\"headerlink\" title=\"Hexo的使用\"></a>Hexo的使用</h4><blockquote><p>关于hexo，一开始接触的时候会觉得茫然一片，不知道干啥，网上也有教程，但是搜到大部分教程已经过时，在package.json里面已经写好了依赖包，npm install的时候会安装好所需要的包，不用再单独去安装一次hexo server了，具体可以参考官方网站，文档已经写得很清楚了。</p>\n<footer><strong>HEXO</strong><cite><a href=\"http://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"external\">hexo</a></cite></footer></blockquote>\n<h4 id=\"评论插件\"><a href=\"#评论插件\" class=\"headerlink\" title=\"评论插件\"></a>评论插件</h4><p>hexo自带的是Disqus，但是这个需要使用facebook，twitter，google+等登录，如果你没有，或者没有走到墙外面，你还可选择国内的 多说 ，我就是使用的这个，具体效果看文章最后的评论区域就知道。如何在博客中使用，这里可能有一点差异，有些主题可能已经集成了duoshuo，只需要在配置文件中开启即可，比如使用的 hexo-theme-next :<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">https://github.com/iissnan/hexo-theme-next</a> 有些主题没有集成，则需要去duoshuo的官网生成一段通用代码，复制到你的评论模板里面，覆盖原来的Disqus评论代码。</p>\n<h4 id=\"使用主题\"><a href=\"#使用主题\" class=\"headerlink\" title=\"使用主题\"></a>使用主题</h4><p>在使用hexo初始化一个博客之后，会有一个自带的默认主题landscape，当然，我们都是追求个性的人不是吗？虽然可以随便改这个默认主题的模板样式，但是我们需要追求更加高Big的。我使用的是比较收欢迎的next主题，上面已经给出了地址。你只需要通过git将它clone到你博客目录下的themes文件夹里面，然后在站点的配置文件里面将使用的名字改为你clone下来的next主题文件夹名字就可以了。</p>\n<p>最后我捣鼓了大半天，最后总结到一个非常重要的知识点，学习一个新的东西，官方的文档真的真的真的（重要的事情说三遍）很重要。网上博客写出来的东西，有可能只是当时博主遇到的问题，也有可能当时博主搭建博客使用的东西版本与你目前使用的版本是有差距。所以官方文档才是最正宗的。</p>\n","excerpt":"","more":"<p>本文是我如何使用hexo与github pages搭建个人博客的过程，虽然网上教程已经很多了。那这就姑且算作回顾一下吧。</p>\n<h4 id=\"使用的版本\"><a href=\"#使用的版本\" class=\"headerlink\" title=\"使用的版本\"></a>使用的版本</h4><ul>\n<li>node 4.2.2</li>\n<li>hexo 3.1.1</li>\n<li>Git 2.6.1</li>\n</ul>\n<blockquote><p>Git、Node的使用在这里就不赘述了。如何使用GitHub Pages，可以参考官方网站，仔细阅读，已经写得很详细了，特别是在新建仓库的时候，username.github.io中的username一定要和自己的username相同，区分大小写，不要问我为什么知道的。</p>\n<footer><strong>GitHub Pages</strong><cite><a href=\"http://pages.github.com\">pages.github.com</a></cite></footer></blockquote>\n<h4 id=\"Hexo的使用\"><a href=\"#Hexo的使用\" class=\"headerlink\" title=\"Hexo的使用\"></a>Hexo的使用</h4><blockquote><p>关于hexo，一开始接触的时候会觉得茫然一片，不知道干啥，网上也有教程，但是搜到大部分教程已经过时，在package.json里面已经写好了依赖包，npm install的时候会安装好所需要的包，不用再单独去安装一次hexo server了，具体可以参考官方网站，文档已经写得很清楚了。</p>\n<footer><strong>HEXO</strong><cite><a href=\"http://hexo.io/zh-cn/docs\">hexo</a></cite></footer></blockquote>\n<h4 id=\"评论插件\"><a href=\"#评论插件\" class=\"headerlink\" title=\"评论插件\"></a>评论插件</h4><p>hexo自带的是Disqus，但是这个需要使用facebook，twitter，google+等登录，如果你没有，或者没有走到墙外面，你还可选择国内的 多说 ，我就是使用的这个，具体效果看文章最后的评论区域就知道。如何在博客中使用，这里可能有一点差异，有些主题可能已经集成了duoshuo，只需要在配置文件中开启即可，比如使用的 hexo-theme-next :<a href=\"https://github.com/iissnan/hexo-theme-next\">https://github.com/iissnan/hexo-theme-next</a> 有些主题没有集成，则需要去duoshuo的官网生成一段通用代码，复制到你的评论模板里面，覆盖原来的Disqus评论代码。</p>\n<h4 id=\"使用主题\"><a href=\"#使用主题\" class=\"headerlink\" title=\"使用主题\"></a>使用主题</h4><p>在使用hexo初始化一个博客之后，会有一个自带的默认主题landscape，当然，我们都是追求个性的人不是吗？虽然可以随便改这个默认主题的模板样式，但是我们需要追求更加高Big的。我使用的是比较收欢迎的next主题，上面已经给出了地址。你只需要通过git将它clone到你博客目录下的themes文件夹里面，然后在站点的配置文件里面将使用的名字改为你clone下来的next主题文件夹名字就可以了。</p>\n<p>最后我捣鼓了大半天，最后总结到一个非常重要的知识点，学习一个新的东西，官方的文档真的真的真的（重要的事情说三遍）很重要。网上博客写出来的东西，有可能只是当时博主遇到的问题，也有可能当时博主搭建博客使用的东西版本与你目前使用的版本是有差距。所以官方文档才是最正宗的。</p>\n","sticky":0},{"title":"我住在32楼的18楼","date":"2016-08-05T14:44:22.000Z","_content":"\n距离上一次更新是好几个月以前，虽然确实有很多事情，但是总来说，就是比较懒。\n\n确实经历了一次比较骇人的变化，从毕业到正式工作；从拿着渣渣的A4的windows笔记本到现在Mac，以及其他的一些经历，总是感觉自己还是一个学生，没有长大，这一切来得确实有些快，措手不及。\n\n我想反思一下自己，总要做出一些改变。\n\n以前自己：懒，拖延，害怕尝试新的东西，有时候会斤斤计较，有点小心机，还有小小的自以为是，耐心也确实不好，对不想理的人就是爱理不理，强行想去说话也没办法，没办法和别人好好的沟通，主观意识略强，情商确实很低，不会做事，不会好好的和别人相处，不会好好的表达自己，事情也做得不够好，明明能力也很低。\n\n很不喜欢那些给别人贴标签的人，而我现在在给自己贴标签，我是否在逐渐成为那个我讨厌的人，我是否会像村上春树说的样要成长为一个不动声色的大人了，我是否会像这样毫无作为的走下去，不甘平凡却屈于平凡，我不觉得这是生活常态，这恐怕是丢失了某些热情。这些都让我感到害怕，却装作一副无所谓的样子，一副努力的样子，安慰自己。\n\n现在每天都给自己洗脑，最好的方式就是将一件事做到极致。我害怕痛苦和失败，更害怕再更久远一点的以后，依旧困在牢笼之中，没有办法和时间来证明我的英勇。二十三年按部就班的过来，循规蹈矩的上学，某种程度上说，已经庸到极致了。\n\n如果不是现在，那是什么时候。\n\n姑娘啊，我想要去开辟我自己的世界了，没办法再继续陪伴你了。我真的很想要你一起来体验我发现的不用世界，也真的很想体验你眼里看到的世界，可是你不愿意，那么希望你也能发现自己的精彩，愿你因爱而欢喜。\n\n若以后还能相遇，我定会不顾一切。\n\n\n\n","source":"_posts/hing.md","raw":"---\ntitle: 我住在32楼的18楼\ndate: 2016-08-05 22:44:22\ntags: \n- mylife\ncategories: \n- mylife\n---\n\n距离上一次更新是好几个月以前，虽然确实有很多事情，但是总来说，就是比较懒。\n\n确实经历了一次比较骇人的变化，从毕业到正式工作；从拿着渣渣的A4的windows笔记本到现在Mac，以及其他的一些经历，总是感觉自己还是一个学生，没有长大，这一切来得确实有些快，措手不及。\n\n我想反思一下自己，总要做出一些改变。\n\n以前自己：懒，拖延，害怕尝试新的东西，有时候会斤斤计较，有点小心机，还有小小的自以为是，耐心也确实不好，对不想理的人就是爱理不理，强行想去说话也没办法，没办法和别人好好的沟通，主观意识略强，情商确实很低，不会做事，不会好好的和别人相处，不会好好的表达自己，事情也做得不够好，明明能力也很低。\n\n很不喜欢那些给别人贴标签的人，而我现在在给自己贴标签，我是否在逐渐成为那个我讨厌的人，我是否会像村上春树说的样要成长为一个不动声色的大人了，我是否会像这样毫无作为的走下去，不甘平凡却屈于平凡，我不觉得这是生活常态，这恐怕是丢失了某些热情。这些都让我感到害怕，却装作一副无所谓的样子，一副努力的样子，安慰自己。\n\n现在每天都给自己洗脑，最好的方式就是将一件事做到极致。我害怕痛苦和失败，更害怕再更久远一点的以后，依旧困在牢笼之中，没有办法和时间来证明我的英勇。二十三年按部就班的过来，循规蹈矩的上学，某种程度上说，已经庸到极致了。\n\n如果不是现在，那是什么时候。\n\n姑娘啊，我想要去开辟我自己的世界了，没办法再继续陪伴你了。我真的很想要你一起来体验我发现的不用世界，也真的很想体验你眼里看到的世界，可是你不愿意，那么希望你也能发现自己的精彩，愿你因爱而欢喜。\n\n若以后还能相遇，我定会不顾一切。\n\n\n\n","slug":"hing","published":1,"updated":"2016-08-05T17:21:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzakzy000h4fryx6kxwefd","content":"<p>距离上一次更新是好几个月以前，虽然确实有很多事情，但是总来说，就是比较懒。</p>\n<p>确实经历了一次比较骇人的变化，从毕业到正式工作；从拿着渣渣的A4的windows笔记本到现在Mac，以及其他的一些经历，总是感觉自己还是一个学生，没有长大，这一切来得确实有些快，措手不及。</p>\n<p>我想反思一下自己，总要做出一些改变。</p>\n<p>以前自己：懒，拖延，害怕尝试新的东西，有时候会斤斤计较，有点小心机，还有小小的自以为是，耐心也确实不好，对不想理的人就是爱理不理，强行想去说话也没办法，没办法和别人好好的沟通，主观意识略强，情商确实很低，不会做事，不会好好的和别人相处，不会好好的表达自己，事情也做得不够好，明明能力也很低。</p>\n<p>很不喜欢那些给别人贴标签的人，而我现在在给自己贴标签，我是否在逐渐成为那个我讨厌的人，我是否会像村上春树说的样要成长为一个不动声色的大人了，我是否会像这样毫无作为的走下去，不甘平凡却屈于平凡，我不觉得这是生活常态，这恐怕是丢失了某些热情。这些都让我感到害怕，却装作一副无所谓的样子，一副努力的样子，安慰自己。</p>\n<p>现在每天都给自己洗脑，最好的方式就是将一件事做到极致。我害怕痛苦和失败，更害怕再更久远一点的以后，依旧困在牢笼之中，没有办法和时间来证明我的英勇。二十三年按部就班的过来，循规蹈矩的上学，某种程度上说，已经庸到极致了。</p>\n<p>如果不是现在，那是什么时候。</p>\n<p>姑娘啊，我想要去开辟我自己的世界了，没办法再继续陪伴你了。我真的很想要你一起来体验我发现的不用世界，也真的很想体验你眼里看到的世界，可是你不愿意，那么希望你也能发现自己的精彩，愿你因爱而欢喜。</p>\n<p>若以后还能相遇，我定会不顾一切。</p>\n","excerpt":"","more":"<p>距离上一次更新是好几个月以前，虽然确实有很多事情，但是总来说，就是比较懒。</p>\n<p>确实经历了一次比较骇人的变化，从毕业到正式工作；从拿着渣渣的A4的windows笔记本到现在Mac，以及其他的一些经历，总是感觉自己还是一个学生，没有长大，这一切来得确实有些快，措手不及。</p>\n<p>我想反思一下自己，总要做出一些改变。</p>\n<p>以前自己：懒，拖延，害怕尝试新的东西，有时候会斤斤计较，有点小心机，还有小小的自以为是，耐心也确实不好，对不想理的人就是爱理不理，强行想去说话也没办法，没办法和别人好好的沟通，主观意识略强，情商确实很低，不会做事，不会好好的和别人相处，不会好好的表达自己，事情也做得不够好，明明能力也很低。</p>\n<p>很不喜欢那些给别人贴标签的人，而我现在在给自己贴标签，我是否在逐渐成为那个我讨厌的人，我是否会像村上春树说的样要成长为一个不动声色的大人了，我是否会像这样毫无作为的走下去，不甘平凡却屈于平凡，我不觉得这是生活常态，这恐怕是丢失了某些热情。这些都让我感到害怕，却装作一副无所谓的样子，一副努力的样子，安慰自己。</p>\n<p>现在每天都给自己洗脑，最好的方式就是将一件事做到极致。我害怕痛苦和失败，更害怕再更久远一点的以后，依旧困在牢笼之中，没有办法和时间来证明我的英勇。二十三年按部就班的过来，循规蹈矩的上学，某种程度上说，已经庸到极致了。</p>\n<p>如果不是现在，那是什么时候。</p>\n<p>姑娘啊，我想要去开辟我自己的世界了，没办法再继续陪伴你了。我真的很想要你一起来体验我发现的不用世界，也真的很想体验你眼里看到的世界，可是你不愿意，那么希望你也能发现自己的精彩，愿你因爱而欢喜。</p>\n<p>若以后还能相遇，我定会不顾一切。</p>\n","sticky":0},{"title":"Promise的初体验","date":"2016-08-09T15:02:22.000Z","_content":"#### Promise是什么？\nPromise对象在不久的将来可能会是一个代理完整异步操作的值......好吧，英语确实不是很好，原话就是：\n> Proxy for a value that may be known in the future after an asynchronous operation completes\n\n在JavaScript的异步处理中，以jQuery为例，通过调用回调函数来处理请求返回的数据或者失败的请求，简单的如下的代码(jQuery):\n```javascript\n    $.get('url',{data:data},function(json){\n        //the things you'll do\n    },'JSON');\n```\n \n而在Promise这是把上述的操作规范化，按照统一的接口来进行编写。下面是一个简单的例子：\n```javascript\n    var promise = new Promise(function(resolve,reject){\n        //here,you can transfer the callback function resolve & reject to do what you want to do \n    });\n    promise().then(function(value){\n        console.log(value); \n    },function(error){\n        console.log(error);\n    });\n```\n\n在上面简单的栗子中，then()中的两个回调函数分别用来处理当请求完成是成功和失败的操作，其中上面的代码，在处理失败的使用可以用catch()来操作，代码如下：\n```javascript\n    var promise = new Promise(function(resolve,reject){\n        //here,you can transfer the callback function resolve & reject to do what you want to do\n    });\n    promise().then(function(value){\n        console.log(value);\n    }).catch(function(error){\n        console.log(error);\n    });\n```\ncatch()就是专门用来处理操作失败时候的函数。\n\n#### Promise的三种状态\n在Promise中除了resolve和reject两种调用，即除了fullFilled和rejected两种状态外，还存在一个pending的状态，改状态表示在Promise对象刚被创建初始化后的初始化状态或者其他状态，只要Promise的状态是fullFilled或者rejected，那么就不会返回到pending状态。\n\n#### Promise的简单编写\n\n编写Promise的过程简单可以描述如下\n1. 创建Promise(fn)对象\n2. 等待fn中的异步处理完成\n3. 如果成功，调用resolve(data)函数，其中data为处理成功的返回值\n4. 如果失败，调用reject(error)函数\n\n代码示例如下：\n```javascript\n    function asyncOperation(url){\n        return new Promise(function(resolve,reject){\n            var req = new XMLHttpRequest();\n            req.open('GET',url,true);\n            req.onload = function(){\n                if(req.status === 200){\n                    resolve(req.responseText);\n                }else{\n                    reject(new Error(req.statusText);\n                }\n            };\n            req.onerror = function(){\n                reject(new Error(req.statusText);\n            };\n            req.send();\n         });\n    }\n\n    var url = 'youtesturl.com';\n    asyncOperation(url).them(function onFullfilled(value){\n        console.log(value);\n    }).catch(function onRejected(error){\n       console.log(error);\n    });\n```\n \n当然这里使用： \n```javascript\n    then(function(value){\n        //TODO\n    },function(error){\n        //TODO\n    });\n```\n也是一样的效果。\n\n#### 可能是个小结\n深知自己确实比较笨，有些东西不能深刻理解就是不能运用自如，而且感觉自己的思维确实和常规的有些偏差。第一次开始学Promise，不仅是一个新的API，更是一种编程的思想。当然这篇文章也是用vim写的，感觉熟练多了，这两天断网了，还没修好，着实有点难受。 \n","source":"_posts/promise.md","raw":"---\ntitle: Promise的初体验 \ndate: 2016-08-09 23:02:22\ntag:\n- promise \ncategories:\n- primise \n---\n#### Promise是什么？\nPromise对象在不久的将来可能会是一个代理完整异步操作的值......好吧，英语确实不是很好，原话就是：\n> Proxy for a value that may be known in the future after an asynchronous operation completes\n\n在JavaScript的异步处理中，以jQuery为例，通过调用回调函数来处理请求返回的数据或者失败的请求，简单的如下的代码(jQuery):\n```javascript\n    $.get('url',{data:data},function(json){\n        //the things you'll do\n    },'JSON');\n```\n \n而在Promise这是把上述的操作规范化，按照统一的接口来进行编写。下面是一个简单的例子：\n```javascript\n    var promise = new Promise(function(resolve,reject){\n        //here,you can transfer the callback function resolve & reject to do what you want to do \n    });\n    promise().then(function(value){\n        console.log(value); \n    },function(error){\n        console.log(error);\n    });\n```\n\n在上面简单的栗子中，then()中的两个回调函数分别用来处理当请求完成是成功和失败的操作，其中上面的代码，在处理失败的使用可以用catch()来操作，代码如下：\n```javascript\n    var promise = new Promise(function(resolve,reject){\n        //here,you can transfer the callback function resolve & reject to do what you want to do\n    });\n    promise().then(function(value){\n        console.log(value);\n    }).catch(function(error){\n        console.log(error);\n    });\n```\ncatch()就是专门用来处理操作失败时候的函数。\n\n#### Promise的三种状态\n在Promise中除了resolve和reject两种调用，即除了fullFilled和rejected两种状态外，还存在一个pending的状态，改状态表示在Promise对象刚被创建初始化后的初始化状态或者其他状态，只要Promise的状态是fullFilled或者rejected，那么就不会返回到pending状态。\n\n#### Promise的简单编写\n\n编写Promise的过程简单可以描述如下\n1. 创建Promise(fn)对象\n2. 等待fn中的异步处理完成\n3. 如果成功，调用resolve(data)函数，其中data为处理成功的返回值\n4. 如果失败，调用reject(error)函数\n\n代码示例如下：\n```javascript\n    function asyncOperation(url){\n        return new Promise(function(resolve,reject){\n            var req = new XMLHttpRequest();\n            req.open('GET',url,true);\n            req.onload = function(){\n                if(req.status === 200){\n                    resolve(req.responseText);\n                }else{\n                    reject(new Error(req.statusText);\n                }\n            };\n            req.onerror = function(){\n                reject(new Error(req.statusText);\n            };\n            req.send();\n         });\n    }\n\n    var url = 'youtesturl.com';\n    asyncOperation(url).them(function onFullfilled(value){\n        console.log(value);\n    }).catch(function onRejected(error){\n       console.log(error);\n    });\n```\n \n当然这里使用： \n```javascript\n    then(function(value){\n        //TODO\n    },function(error){\n        //TODO\n    });\n```\n也是一样的效果。\n\n#### 可能是个小结\n深知自己确实比较笨，有些东西不能深刻理解就是不能运用自如，而且感觉自己的思维确实和常规的有些偏差。第一次开始学Promise，不仅是一个新的API，更是一种编程的思想。当然这篇文章也是用vim写的，感觉熟练多了，这两天断网了，还没修好，着实有点难受。 \n","slug":"promise","published":1,"updated":"2016-08-10T02:11:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzal00000k4fryojauzqd7","content":"<h4 id=\"Promise是什么？\"><a href=\"#Promise是什么？\" class=\"headerlink\" title=\"Promise是什么？\"></a>Promise是什么？</h4><p>Promise对象在不久的将来可能会是一个代理完整异步操作的值……好吧，英语确实不是很好，原话就是：</p>\n<blockquote>\n<p>Proxy for a value that may be known in the future after an asynchronous operation completes</p>\n</blockquote>\n<p>在JavaScript的异步处理中，以jQuery为例，通过调用回调函数来处理请求返回的数据或者失败的请求，简单的如下的代码(jQuery):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>,&#123;data:data&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//the things you'll do</span></div><div class=\"line\">&#125;,<span class=\"string\">'JSON'</span>);</div></pre></td></tr></table></figure></p>\n<p>而在Promise这是把上述的操作规范化，按照统一的接口来进行编写。下面是一个简单的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//here,you can transfer the callback function resolve &amp; reject to do what you want to do </span></div><div class=\"line\">&#125;);</div><div class=\"line\">promise().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value); </div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在上面简单的栗子中，then()中的两个回调函数分别用来处理当请求完成是成功和失败的操作，其中上面的代码，在处理失败的使用可以用catch()来操作，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//here,you can transfer the callback function resolve &amp; reject to do what you want to do</span></div><div class=\"line\">&#125;);</div><div class=\"line\">promise().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>catch()就是专门用来处理操作失败时候的函数。</p>\n<h4 id=\"Promise的三种状态\"><a href=\"#Promise的三种状态\" class=\"headerlink\" title=\"Promise的三种状态\"></a>Promise的三种状态</h4><p>在Promise中除了resolve和reject两种调用，即除了fullFilled和rejected两种状态外，还存在一个pending的状态，改状态表示在Promise对象刚被创建初始化后的初始化状态或者其他状态，只要Promise的状态是fullFilled或者rejected，那么就不会返回到pending状态。</p>\n<h4 id=\"Promise的简单编写\"><a href=\"#Promise的简单编写\" class=\"headerlink\" title=\"Promise的简单编写\"></a>Promise的简单编写</h4><p>编写Promise的过程简单可以描述如下</p>\n<ol>\n<li>创建Promise(fn)对象</li>\n<li>等待fn中的异步处理完成</li>\n<li>如果成功，调用resolve(data)函数，其中data为处理成功的返回值</li>\n<li>如果失败，调用reject(error)函数</li>\n</ol>\n<p>代码示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncOperation</span>(<span class=\"params\">url</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">        req.open(<span class=\"string\">'GET'</span>,url,<span class=\"literal\">true</span>);</div><div class=\"line\">        req.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(req.status === <span class=\"number\">200</span>)&#123;</div><div class=\"line\">                resolve(req.responseText);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(req.statusText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        req.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(req.statusText);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        req.send();</div><div class=\"line\">     &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'youtesturl.com'</span>;</div><div class=\"line\">asyncOperation(url).them(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onFullfilled</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRejected</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>当然这里使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//TODO</span></div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//TODO</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>也是一样的效果。</p>\n<h4 id=\"可能是个小结\"><a href=\"#可能是个小结\" class=\"headerlink\" title=\"可能是个小结\"></a>可能是个小结</h4><p>深知自己确实比较笨，有些东西不能深刻理解就是不能运用自如，而且感觉自己的思维确实和常规的有些偏差。第一次开始学Promise，不仅是一个新的API，更是一种编程的思想。当然这篇文章也是用vim写的，感觉熟练多了，这两天断网了，还没修好，着实有点难受。 </p>\n","excerpt":"","more":"<h4 id=\"Promise是什么？\"><a href=\"#Promise是什么？\" class=\"headerlink\" title=\"Promise是什么？\"></a>Promise是什么？</h4><p>Promise对象在不久的将来可能会是一个代理完整异步操作的值……好吧，英语确实不是很好，原话就是：</p>\n<blockquote>\n<p>Proxy for a value that may be known in the future after an asynchronous operation completes</p>\n</blockquote>\n<p>在JavaScript的异步处理中，以jQuery为例，通过调用回调函数来处理请求返回的数据或者失败的请求，简单的如下的代码(jQuery):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>,&#123;data:data&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//the things you'll do</span></div><div class=\"line\">&#125;,<span class=\"string\">'JSON'</span>);</div></pre></td></tr></table></figure></p>\n<p>而在Promise这是把上述的操作规范化，按照统一的接口来进行编写。下面是一个简单的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//here,you can transfer the callback function resolve &amp; reject to do what you want to do </span></div><div class=\"line\">&#125;);</div><div class=\"line\">promise().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value); </div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在上面简单的栗子中，then()中的两个回调函数分别用来处理当请求完成是成功和失败的操作，其中上面的代码，在处理失败的使用可以用catch()来操作，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//here,you can transfer the callback function resolve &amp; reject to do what you want to do</span></div><div class=\"line\">&#125;);</div><div class=\"line\">promise().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>catch()就是专门用来处理操作失败时候的函数。</p>\n<h4 id=\"Promise的三种状态\"><a href=\"#Promise的三种状态\" class=\"headerlink\" title=\"Promise的三种状态\"></a>Promise的三种状态</h4><p>在Promise中除了resolve和reject两种调用，即除了fullFilled和rejected两种状态外，还存在一个pending的状态，改状态表示在Promise对象刚被创建初始化后的初始化状态或者其他状态，只要Promise的状态是fullFilled或者rejected，那么就不会返回到pending状态。</p>\n<h4 id=\"Promise的简单编写\"><a href=\"#Promise的简单编写\" class=\"headerlink\" title=\"Promise的简单编写\"></a>Promise的简单编写</h4><p>编写Promise的过程简单可以描述如下</p>\n<ol>\n<li>创建Promise(fn)对象</li>\n<li>等待fn中的异步处理完成</li>\n<li>如果成功，调用resolve(data)函数，其中data为处理成功的返回值</li>\n<li>如果失败，调用reject(error)函数</li>\n</ol>\n<p>代码示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncOperation</span>(<span class=\"params\">url</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">        req.open(<span class=\"string\">'GET'</span>,url,<span class=\"literal\">true</span>);</div><div class=\"line\">        req.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(req.status === <span class=\"number\">200</span>)&#123;</div><div class=\"line\">                resolve(req.responseText);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(req.statusText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        req.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(req.statusText);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        req.send();</div><div class=\"line\">     &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'youtesturl.com'</span>;</div><div class=\"line\">asyncOperation(url).them(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onFullfilled</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRejected</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>当然这里使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//TODO</span></div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//TODO</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>也是一样的效果。</p>\n<h4 id=\"可能是个小结\"><a href=\"#可能是个小结\" class=\"headerlink\" title=\"可能是个小结\"></a>可能是个小结</h4><p>深知自己确实比较笨，有些东西不能深刻理解就是不能运用自如，而且感觉自己的思维确实和常规的有些偏差。第一次开始学Promise，不仅是一个新的API，更是一种编程的思想。当然这篇文章也是用vim写的，感觉熟练多了，这两天断网了，还没修好，着实有点难受。 </p>\n","sticky":0},{"title":"react组件通讯","date":"2017-03-30T14:01:46.000Z","_content":"\n### react组件通讯\n#### 父组件向子组件通讯\n父组件向子组件用过传props的方式向子组件进行通讯。\n\n```JavaScript\nclass Parent extends Component {\n    state = {\n        msg: 'start'\n    };\n    \n    componentDidMount() {\n        setTimeout( () => {\n            this.setState({\n                msg: 'end'\n            });\n        }, 1000);\n    }\n    \n    render() {\n        return <Child_1 msg={this.state.msg} />;\n    }\n}\n\nclass Child_1 extends Component {\n    render() {\n        return <p>{this.props.msg}</p>\n    }\n}\n```\n\n如果父组件与子组件之间不知一个层级，则可以用过`... 运算符`(Object 剩余和展开属性)，将父组件的信息，以更简洁的方式传递给更深层级的子组件。性能经过babel转义后与原生一直。\n\n```JavaScript\n class Child_1 extends Component {\n    render() {\n        return <div>\n            <p>{this.props.msg}</p>\n            <Child_1_1 {...this.props}/>\n            </div>\n    }\n }\n \n class Child_1_1 extends Component {\n    render() {\n        return <p>{this.props.msg}</p>\n    }\n }\n```\n\n#### 子组件向父组件通信\n在子组件向父组件通讯时，同样也需要父组件向子组件传递props进行通讯，只是父组件传递的，是作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数传递到父组件的作用域中。\n\n```JavaScript\nclass Parent extends Component {\n    state = {\n        msg: 'start'\n    };\n    \n    transferMsg(msg) {\n        this.setState({\n        msg});\n    }\n    \n    render() {\n        return <div>\n            <p>child msg: {this.state.msg}</p>\n            <Child_1 transferMsg = {msg => this.transferMsg(msg)} />\n        </div>\n    }\n}\n\nclass Child_1 extends Component {\n    componentDidMount() {\n       setTimeout( () => {\n            this.props.transferMsg('end')\n       }, 1000); \n    }\n    render() {\n        return <div><p>child_1 component</p></div>\n    }\n}\n```\n\n#### 兄弟组件通讯\n对于两个没有之间关联关系的节点，那么唯一的关联就是拥有想用的父组件。那么这个时候改两个节点的通讯，可以先用过Child_1想Parent组件通讯，再由Parent向Child_2组件通讯。\n\n```JavaScript\nclass Parent extends Component {\n    state = {\n        msg: 'start'\n    };\n    \n    transferMsg(msg) {\n        this.setState({msg});\n    }\n    \n    componentDidUpdate() {\n        console.log('parent update');\n    }\n    \n    render() {\n        return (\n            <div>\n                <Child_1 transferMsg =  { msg => this.transferMsg(msg)} />\n                <Child_2 msg = {this.state.msg} />\n        );\n    }\n}\n```\n但是这样会出现一个问题，那就是由于Parent的state发生变化，会出发Parent及从属于Parent的子组件的生命周期，所以我们在控制台中可以看到，在各个组件中的componentDidUpdate方法都会被触发。那么更好的方法便是采用观察者模式（即 发布者-订阅者模式）。\n\n```JavaScript\nimport eventProxy from '../eventProxy'\n\nclass Parent extends Component {\n    render() {\n        return (\n            <div>\n                <Child_1/>\n                <Child_2/>\n            </div>\n        );\n    }\n}\n\nclass Child_1 extends Component {\n    componentDidMount() {\n        setTimeOut( () => {\n            eventProxy.trigger('msg','end');\n        }, 1000);\n    }\n}\n\nclass Child_2 extends Component {\n    state = {\n        msg: 'start'\n    };\n    \n    componentDidMount() {\n        eventProxy.on('msg', (msg) => {\n            this.setState({msg});\n        });\n    }\n    \n    render() {\n        return (\n            <div>\n            <p>child_2 component: {this.state.msg}</p>\n            <Child_2_1/>\n            </div>\n        );\n    }\n}\n```\n我们来看看神奇的`eventProxy.js`\n\n```JavaScript\n'use strict';\nconst eventProxy = {\n    onObj: {},\n    oneObj: {},\n    on: function(key, fn) {\n        if(this.onObj[key] === undefined) {\n            this.onObj[key] = [];\n        }\n        \n        this.onObj[key].push(fn);\n    },\n    one: function(key ,fn) {\n        if(this.oneObj{key] === undefined) {\n            this.oneObj[key] = [];\n        }\n        \n        this.oneObj[key].push(fn);\n    },\n    off: function(key) {\n        this.onObj[key] = [];\n        this.oneObj[key] = [];\n    },\n    trigger: function() {\n        let key, args;\n        if(arguments.length == 0) {\n            return false;\n        }\n        key = arguments[0];\n        args = [].concat(Array.prototype.slice.call(arguments, 1));\n        \n        if(this.onObj[key] !== undefined && this.onObj[key].length > 0) {\n            for( let i in this.onObj[key]) {\n                this.onObj[key][i].apply(null, args);\n            }\n        }\n        \n        if(this.oneObj[key] !== undefined && this.oneObj[key].length > 0) {\n            for( let i in this.oneObj[key] ) {\n                this.oneObj[key][i].apply(null, args);\n                this.oneObj[key][i] = undefined;\n            }\n            this.oneObj[key] = [];\n        }\n    }\n};\n\nexport default eventProxy;\n```\n\nredux中的数据传递\n\n```JavaScript\nimport {createStore} from 'redux';\n/*\n *用reducer来制造一个store\n */\nfunction reducer(state = {}, action) {\n    switch(action.type) {\n        case 'child_2':\n            state.child_2 = action.data + 'child_2';\n            return state;\n        case 'child_2_1':\n            state.child_2_1 = action.data + 'child_2_1';\n            return state;\n        default:\n            return state;\n    }\n}\n\nlet store = createStore(reducer);\n\nclass Child_1 extends Component {\n    componentDidMount() {\n        setTimeout ( () => {\n            store.dispatch({//发布事件\n                type: 'child_2',//事件名称\n                data: 'hello'//要传递的数据\n            })\n        }, 1000);\n        \n        setTimeout( () => {\n            store.dispatch({//发布事件\n                type: 'child_2_1',\n                data: 'bye'\n            })\n        }, 2000);\n    }\n}\n\nclass Child_2 extends Component {\n    componentDidMount() {\n        store.subscribe( () => {//订阅事件\n            let state = store.getState();\n            \n            if(state.hasOwnProperty('child_2')) {\n                this.setState({\n                    msg: state.child_2\n                });\n            }\n        });\n    }\n}\n\nclass Child_2_1 extends Component {\n    componentDidMount() {\n        store.subscribe( () => {//订阅事件\n            let state = store.getState();\n            \n            if( state.hasOwnProperty('child_2_1') ){\n                this.setState({\n                    msg: state.child_2_1\n                });\n            }\n        });\n    }\n}\n```\n\n以上的代码都摘抄（其实就是抄自🙄）[淘宝前端博客——React 组件间通讯](http://taobaofed.org/blog/2016/11/17/react-components-communication/)；其实在写我自己的[demo](https://github.com/Neras/react-resume) 的时候就遇到过这个问题，在没有直接关联的节点之间传输数据，然后网上查找一番，最终也利用`事件的订阅-发布`搞定的，当时才知道redux这个东西，说实话，但是看得很迷茫，感觉有点绕，然后今天看到这篇文章，然后手抄了一遍代码😂过后，感觉其实就是这么回事。\n\n下面是以前通过网络查找写的简陋的事件订阅-发布\n\n```JavaScript\n/*\n * 在写react中，遇到一个情况，就是在两个没有层级的组件之间传递数据\n * 在vue里面貌似有一个store这个全局的值，来存储\n * 或许在react中也可以使用一个全局变量来存值\n * 但是通过查询看到一个Signals模式\n * 下面就是一个简单的实现\n *\n * 其中存在一个事件列表_events\n * subscribe表示订阅，相当于往事件列表里面传递一个事件，其中回调函数可以穿多个\n * 然后再dispatch中来检测事件列表是否存在该事件，如果存在则依次执行在subscribe中传入的多个回调函数\n *\n * 以此可以来传递两个组件之间的值\n */\nvar EventEmitter = {\n    _events: {},\n    dispatch: function(event, data) {\n        if (!this._events[event]) {\n            return false;\n        }\n        for (var i = 0; i < this._events[event].length; i++) {\n            this._events[event][i](data);\n        }\n    },\n    subscribe: function(event, callback) {\n        if (!this._events[event]) {\n            this._events[event] = [];\n        }\n\n        this._events[event].push(callback);\n    }\n}\n\nvar a = Object.create(EventEmitter);\n\na.subscribe('et', function(data) {\n    console.log(data);\n});\n\na.dispatch('et', 'hehe');\n```\n\n最后那几行是测试用的。在次做个记录吧（里面有些地方，比如`...`运算符还不是很理解，后面补充）。","source":"_posts/react.md","raw":"---\ntitle: react组件通讯\ndate: 2017-03-30 22:01:46\ntags:\n- react\ncategories:\n- react\n\n---\n\n### react组件通讯\n#### 父组件向子组件通讯\n父组件向子组件用过传props的方式向子组件进行通讯。\n\n```JavaScript\nclass Parent extends Component {\n    state = {\n        msg: 'start'\n    };\n    \n    componentDidMount() {\n        setTimeout( () => {\n            this.setState({\n                msg: 'end'\n            });\n        }, 1000);\n    }\n    \n    render() {\n        return <Child_1 msg={this.state.msg} />;\n    }\n}\n\nclass Child_1 extends Component {\n    render() {\n        return <p>{this.props.msg}</p>\n    }\n}\n```\n\n如果父组件与子组件之间不知一个层级，则可以用过`... 运算符`(Object 剩余和展开属性)，将父组件的信息，以更简洁的方式传递给更深层级的子组件。性能经过babel转义后与原生一直。\n\n```JavaScript\n class Child_1 extends Component {\n    render() {\n        return <div>\n            <p>{this.props.msg}</p>\n            <Child_1_1 {...this.props}/>\n            </div>\n    }\n }\n \n class Child_1_1 extends Component {\n    render() {\n        return <p>{this.props.msg}</p>\n    }\n }\n```\n\n#### 子组件向父组件通信\n在子组件向父组件通讯时，同样也需要父组件向子组件传递props进行通讯，只是父组件传递的，是作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数传递到父组件的作用域中。\n\n```JavaScript\nclass Parent extends Component {\n    state = {\n        msg: 'start'\n    };\n    \n    transferMsg(msg) {\n        this.setState({\n        msg});\n    }\n    \n    render() {\n        return <div>\n            <p>child msg: {this.state.msg}</p>\n            <Child_1 transferMsg = {msg => this.transferMsg(msg)} />\n        </div>\n    }\n}\n\nclass Child_1 extends Component {\n    componentDidMount() {\n       setTimeout( () => {\n            this.props.transferMsg('end')\n       }, 1000); \n    }\n    render() {\n        return <div><p>child_1 component</p></div>\n    }\n}\n```\n\n#### 兄弟组件通讯\n对于两个没有之间关联关系的节点，那么唯一的关联就是拥有想用的父组件。那么这个时候改两个节点的通讯，可以先用过Child_1想Parent组件通讯，再由Parent向Child_2组件通讯。\n\n```JavaScript\nclass Parent extends Component {\n    state = {\n        msg: 'start'\n    };\n    \n    transferMsg(msg) {\n        this.setState({msg});\n    }\n    \n    componentDidUpdate() {\n        console.log('parent update');\n    }\n    \n    render() {\n        return (\n            <div>\n                <Child_1 transferMsg =  { msg => this.transferMsg(msg)} />\n                <Child_2 msg = {this.state.msg} />\n        );\n    }\n}\n```\n但是这样会出现一个问题，那就是由于Parent的state发生变化，会出发Parent及从属于Parent的子组件的生命周期，所以我们在控制台中可以看到，在各个组件中的componentDidUpdate方法都会被触发。那么更好的方法便是采用观察者模式（即 发布者-订阅者模式）。\n\n```JavaScript\nimport eventProxy from '../eventProxy'\n\nclass Parent extends Component {\n    render() {\n        return (\n            <div>\n                <Child_1/>\n                <Child_2/>\n            </div>\n        );\n    }\n}\n\nclass Child_1 extends Component {\n    componentDidMount() {\n        setTimeOut( () => {\n            eventProxy.trigger('msg','end');\n        }, 1000);\n    }\n}\n\nclass Child_2 extends Component {\n    state = {\n        msg: 'start'\n    };\n    \n    componentDidMount() {\n        eventProxy.on('msg', (msg) => {\n            this.setState({msg});\n        });\n    }\n    \n    render() {\n        return (\n            <div>\n            <p>child_2 component: {this.state.msg}</p>\n            <Child_2_1/>\n            </div>\n        );\n    }\n}\n```\n我们来看看神奇的`eventProxy.js`\n\n```JavaScript\n'use strict';\nconst eventProxy = {\n    onObj: {},\n    oneObj: {},\n    on: function(key, fn) {\n        if(this.onObj[key] === undefined) {\n            this.onObj[key] = [];\n        }\n        \n        this.onObj[key].push(fn);\n    },\n    one: function(key ,fn) {\n        if(this.oneObj{key] === undefined) {\n            this.oneObj[key] = [];\n        }\n        \n        this.oneObj[key].push(fn);\n    },\n    off: function(key) {\n        this.onObj[key] = [];\n        this.oneObj[key] = [];\n    },\n    trigger: function() {\n        let key, args;\n        if(arguments.length == 0) {\n            return false;\n        }\n        key = arguments[0];\n        args = [].concat(Array.prototype.slice.call(arguments, 1));\n        \n        if(this.onObj[key] !== undefined && this.onObj[key].length > 0) {\n            for( let i in this.onObj[key]) {\n                this.onObj[key][i].apply(null, args);\n            }\n        }\n        \n        if(this.oneObj[key] !== undefined && this.oneObj[key].length > 0) {\n            for( let i in this.oneObj[key] ) {\n                this.oneObj[key][i].apply(null, args);\n                this.oneObj[key][i] = undefined;\n            }\n            this.oneObj[key] = [];\n        }\n    }\n};\n\nexport default eventProxy;\n```\n\nredux中的数据传递\n\n```JavaScript\nimport {createStore} from 'redux';\n/*\n *用reducer来制造一个store\n */\nfunction reducer(state = {}, action) {\n    switch(action.type) {\n        case 'child_2':\n            state.child_2 = action.data + 'child_2';\n            return state;\n        case 'child_2_1':\n            state.child_2_1 = action.data + 'child_2_1';\n            return state;\n        default:\n            return state;\n    }\n}\n\nlet store = createStore(reducer);\n\nclass Child_1 extends Component {\n    componentDidMount() {\n        setTimeout ( () => {\n            store.dispatch({//发布事件\n                type: 'child_2',//事件名称\n                data: 'hello'//要传递的数据\n            })\n        }, 1000);\n        \n        setTimeout( () => {\n            store.dispatch({//发布事件\n                type: 'child_2_1',\n                data: 'bye'\n            })\n        }, 2000);\n    }\n}\n\nclass Child_2 extends Component {\n    componentDidMount() {\n        store.subscribe( () => {//订阅事件\n            let state = store.getState();\n            \n            if(state.hasOwnProperty('child_2')) {\n                this.setState({\n                    msg: state.child_2\n                });\n            }\n        });\n    }\n}\n\nclass Child_2_1 extends Component {\n    componentDidMount() {\n        store.subscribe( () => {//订阅事件\n            let state = store.getState();\n            \n            if( state.hasOwnProperty('child_2_1') ){\n                this.setState({\n                    msg: state.child_2_1\n                });\n            }\n        });\n    }\n}\n```\n\n以上的代码都摘抄（其实就是抄自🙄）[淘宝前端博客——React 组件间通讯](http://taobaofed.org/blog/2016/11/17/react-components-communication/)；其实在写我自己的[demo](https://github.com/Neras/react-resume) 的时候就遇到过这个问题，在没有直接关联的节点之间传输数据，然后网上查找一番，最终也利用`事件的订阅-发布`搞定的，当时才知道redux这个东西，说实话，但是看得很迷茫，感觉有点绕，然后今天看到这篇文章，然后手抄了一遍代码😂过后，感觉其实就是这么回事。\n\n下面是以前通过网络查找写的简陋的事件订阅-发布\n\n```JavaScript\n/*\n * 在写react中，遇到一个情况，就是在两个没有层级的组件之间传递数据\n * 在vue里面貌似有一个store这个全局的值，来存储\n * 或许在react中也可以使用一个全局变量来存值\n * 但是通过查询看到一个Signals模式\n * 下面就是一个简单的实现\n *\n * 其中存在一个事件列表_events\n * subscribe表示订阅，相当于往事件列表里面传递一个事件，其中回调函数可以穿多个\n * 然后再dispatch中来检测事件列表是否存在该事件，如果存在则依次执行在subscribe中传入的多个回调函数\n *\n * 以此可以来传递两个组件之间的值\n */\nvar EventEmitter = {\n    _events: {},\n    dispatch: function(event, data) {\n        if (!this._events[event]) {\n            return false;\n        }\n        for (var i = 0; i < this._events[event].length; i++) {\n            this._events[event][i](data);\n        }\n    },\n    subscribe: function(event, callback) {\n        if (!this._events[event]) {\n            this._events[event] = [];\n        }\n\n        this._events[event].push(callback);\n    }\n}\n\nvar a = Object.create(EventEmitter);\n\na.subscribe('et', function(data) {\n    console.log(data);\n});\n\na.dispatch('et', 'hehe');\n```\n\n最后那几行是测试用的。在次做个记录吧（里面有些地方，比如`...`运算符还不是很理解，后面补充）。","slug":"react","published":1,"updated":"2017-03-30T14:19:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzal02000o4fryvmx6ljfp","content":"<h3 id=\"react组件通讯\"><a href=\"#react组件通讯\" class=\"headerlink\" title=\"react组件通讯\"></a>react组件通讯</h3><h4 id=\"父组件向子组件通讯\"><a href=\"#父组件向子组件通讯\" class=\"headerlink\" title=\"父组件向子组件通讯\"></a>父组件向子组件通讯</h4><p>父组件向子组件用过传props的方式向子组件进行通讯。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    state = &#123;</div><div class=\"line\">        msg: <span class=\"string\">'start'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        setTimeout( () =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                msg: <span class=\"string\">'end'</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Child_1</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.msg&#125;</span> /&gt;</span>;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Child_1 extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;this.props.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果父组件与子组件之间不知一个层级，则可以用过<code>... 运算符</code>(Object 剩余和展开属性)，将父组件的信息，以更简洁的方式传递给更深层级的子组件。性能经过babel转义后与原生一直。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">   render() &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;this.props.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">Child_1_1</span> &#123;<span class=\"attr\">...this.props</span>&#125;/&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Child_1_1 extends Component &#123;</div><div class=\"line\">   render() &#123;</div><div class=\"line\">       return <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;this.props.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"子组件向父组件通信\"><a href=\"#子组件向父组件通信\" class=\"headerlink\" title=\"子组件向父组件通信\"></a>子组件向父组件通信</h4><p>在子组件向父组件通讯时，同样也需要父组件向子组件传递props进行通讯，只是父组件传递的，是作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数传递到父组件的作用域中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    state = &#123;</div><div class=\"line\">        msg: <span class=\"string\">'start'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    transferMsg(msg) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">        msg&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child msg: &#123;this.state.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Child_1</span> <span class=\"attr\">transferMsg</span> = <span class=\"string\">&#123;msg</span> =&gt;</span> this.transferMsg(msg)&#125; /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Child_1 extends Component &#123;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">       setTimeout( () =&gt; &#123;</div><div class=\"line\">            this.props.transferMsg('end')</div><div class=\"line\">       &#125;, 1000); </div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child_1 component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"兄弟组件通讯\"><a href=\"#兄弟组件通讯\" class=\"headerlink\" title=\"兄弟组件通讯\"></a>兄弟组件通讯</h4><p>对于两个没有之间关联关系的节点，那么唯一的关联就是拥有想用的父组件。那么这个时候改两个节点的通讯，可以先用过Child_1想Parent组件通讯，再由Parent向Child_2组件通讯。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    state = &#123;</div><div class=\"line\">        msg: <span class=\"string\">'start'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    transferMsg(msg) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;msg&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    componentDidUpdate() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent update'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;Child_1 transferMsg =  &#123; msg =&gt; this.transferMsg(msg)&#125; /&gt;</div><div class=\"line\">                &lt;Child_2 msg = &#123;this.state.msg&#125; /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是这样会出现一个问题，那就是由于Parent的state发生变化，会出发Parent及从属于Parent的子组件的生命周期，所以我们在控制台中可以看到，在各个组件中的componentDidUpdate方法都会被触发。那么更好的方法便是采用观察者模式（即 发布者-订阅者模式）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> eventProxy <span class=\"keyword\">from</span> <span class=\"string\">'../eventProxy'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Child_1</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Child_2</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        setTimeOut( () =&gt; &#123;</div><div class=\"line\">            eventProxy.trigger(<span class=\"string\">'msg'</span>,<span class=\"string\">'end'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    state = &#123;</div><div class=\"line\">        msg: <span class=\"string\">'start'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        eventProxy.on(<span class=\"string\">'msg'</span>, (msg) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;msg&#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child_2 component: &#123;this.state.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Child_2_1</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来看看神奇的<code>eventProxy.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> eventProxy = &#123;</div><div class=\"line\">    onObj: &#123;&#125;,</div><div class=\"line\">    oneObj: &#123;&#125;,</div><div class=\"line\">    on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.onObj[key] === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.onObj[key] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.onObj[key].push(fn);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    one: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key ,fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.oneObj&#123;key] === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.oneObj[key] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.oneObj[key].push(fn);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.onObj[key] = [];</div><div class=\"line\">        <span class=\"keyword\">this</span>.oneObj[key] = [];</div><div class=\"line\">    &#125;,</div><div class=\"line\">    trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> key, args;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        key = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</div><div class=\"line\">        args = [].concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.onObj[key] !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"keyword\">this</span>.onObj[key].length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.onObj[key]) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.onObj[key][i].apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.oneObj[key] !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"keyword\">this</span>.oneObj[key].length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.oneObj[key] ) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.oneObj[key][i].apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">                <span class=\"keyword\">this</span>.oneObj[key][i] = <span class=\"literal\">undefined</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">this</span>.oneObj[key] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> eventProxy;</div></pre></td></tr></table></figure>\n<p>redux中的数据传递</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> *用reducer来制造一个store</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(action.type) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'child_2'</span>:</div><div class=\"line\">            state.child_2 = action.data + <span class=\"string\">'child_2'</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> state;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'child_2_1'</span>:</div><div class=\"line\">            state.child_2_1 = action.data + <span class=\"string\">'child_2_1'</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> state;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> state;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(reducer);</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        setTimeout ( () =&gt; &#123;</div><div class=\"line\">            store.dispatch(&#123;<span class=\"comment\">//发布事件</span></div><div class=\"line\">                type: <span class=\"string\">'child_2'</span>,<span class=\"comment\">//事件名称</span></div><div class=\"line\">                data: <span class=\"string\">'hello'</span><span class=\"comment\">//要传递的数据</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">        </div><div class=\"line\">        setTimeout( () =&gt; &#123;</div><div class=\"line\">            store.dispatch(&#123;<span class=\"comment\">//发布事件</span></div><div class=\"line\">                type: <span class=\"string\">'child_2_1'</span>,</div><div class=\"line\">                data: <span class=\"string\">'bye'</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        store.subscribe( () =&gt; &#123;<span class=\"comment\">//订阅事件</span></div><div class=\"line\">            <span class=\"keyword\">let</span> state = store.getState();</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span>(state.hasOwnProperty(<span class=\"string\">'child_2'</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                    msg: state.child_2</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_2_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        store.subscribe( () =&gt; &#123;<span class=\"comment\">//订阅事件</span></div><div class=\"line\">            <span class=\"keyword\">let</span> state = store.getState();</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span>( state.hasOwnProperty(<span class=\"string\">'child_2_1'</span>) )&#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                    msg: state.child_2_1</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上的代码都摘抄（其实就是抄自🙄）<a href=\"http://taobaofed.org/blog/2016/11/17/react-components-communication/\" target=\"_blank\" rel=\"external\">淘宝前端博客——React 组件间通讯</a>；其实在写我自己的<a href=\"https://github.com/Neras/react-resume\" target=\"_blank\" rel=\"external\">demo</a> 的时候就遇到过这个问题，在没有直接关联的节点之间传输数据，然后网上查找一番，最终也利用<code>事件的订阅-发布</code>搞定的，当时才知道redux这个东西，说实话，但是看得很迷茫，感觉有点绕，然后今天看到这篇文章，然后手抄了一遍代码😂过后，感觉其实就是这么回事。</p>\n<p>下面是以前通过网络查找写的简陋的事件订阅-发布</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 在写react中，遇到一个情况，就是在两个没有层级的组件之间传递数据</div><div class=\"line\"> * 在vue里面貌似有一个store这个全局的值，来存储</div><div class=\"line\"> * 或许在react中也可以使用一个全局变量来存值</div><div class=\"line\"> * 但是通过查询看到一个Signals模式</div><div class=\"line\"> * 下面就是一个简单的实现</div><div class=\"line\"> *</div><div class=\"line\"> * 其中存在一个事件列表_events</div><div class=\"line\"> * subscribe表示订阅，相当于往事件列表里面传递一个事件，其中回调函数可以穿多个</div><div class=\"line\"> * 然后再dispatch中来检测事件列表是否存在该事件，如果存在则依次执行在subscribe中传入的多个回调函数</div><div class=\"line\"> *</div><div class=\"line\"> * 以此可以来传递两个组件之间的值</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = &#123;</div><div class=\"line\">    _events: &#123;&#125;,</div><div class=\"line\">    dispatch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._events[event]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._events[event].length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._events[event][i](data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    subscribe: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._events[event]) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._events[event] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>._events[event].push(callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Object</span>.create(EventEmitter);</div><div class=\"line\"></div><div class=\"line\">a.subscribe(<span class=\"string\">'et'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">a.dispatch(<span class=\"string\">'et'</span>, <span class=\"string\">'hehe'</span>);</div></pre></td></tr></table></figure>\n<p>最后那几行是测试用的。在次做个记录吧（里面有些地方，比如<code>...</code>运算符还不是很理解，后面补充）。</p>\n","excerpt":"","more":"<h3 id=\"react组件通讯\"><a href=\"#react组件通讯\" class=\"headerlink\" title=\"react组件通讯\"></a>react组件通讯</h3><h4 id=\"父组件向子组件通讯\"><a href=\"#父组件向子组件通讯\" class=\"headerlink\" title=\"父组件向子组件通讯\"></a>父组件向子组件通讯</h4><p>父组件向子组件用过传props的方式向子组件进行通讯。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    state = &#123;</div><div class=\"line\">        msg: <span class=\"string\">'start'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        setTimeout( () =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                msg: <span class=\"string\">'end'</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Child_1</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.msg&#125;</span> /&gt;</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Child_1 extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;this.props.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p>如果父组件与子组件之间不知一个层级，则可以用过<code>... 运算符</code>(Object 剩余和展开属性)，将父组件的信息，以更简洁的方式传递给更深层级的子组件。性能经过babel转义后与原生一直。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">   render() &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;this.props.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">Child_1_1</span> &#123;<span class=\"attr\">...this.props</span>&#125;/&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Child_1_1 extends Component &#123;</div><div class=\"line\">   render() &#123;</div><div class=\"line\">       return <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;this.props.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"子组件向父组件通信\"><a href=\"#子组件向父组件通信\" class=\"headerlink\" title=\"子组件向父组件通信\"></a>子组件向父组件通信</h4><p>在子组件向父组件通讯时，同样也需要父组件向子组件传递props进行通讯，只是父组件传递的，是作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数传递到父组件的作用域中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    state = &#123;</div><div class=\"line\">        msg: <span class=\"string\">'start'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    transferMsg(msg) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">        msg&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child msg: &#123;this.state.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Child_1</span> <span class=\"attr\">transferMsg</span> = <span class=\"string\">&#123;msg</span> =&gt;</span> this.transferMsg(msg)&#125; /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Child_1 extends Component &#123;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">       setTimeout( () =&gt; &#123;</div><div class=\"line\">            this.props.transferMsg('end')</div><div class=\"line\">       &#125;, 1000); </div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child_1 component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"兄弟组件通讯\"><a href=\"#兄弟组件通讯\" class=\"headerlink\" title=\"兄弟组件通讯\"></a>兄弟组件通讯</h4><p>对于两个没有之间关联关系的节点，那么唯一的关联就是拥有想用的父组件。那么这个时候改两个节点的通讯，可以先用过Child_1想Parent组件通讯，再由Parent向Child_2组件通讯。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    state = &#123;</div><div class=\"line\">        msg: <span class=\"string\">'start'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    transferMsg(msg) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;msg&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    componentDidUpdate() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'parent update'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;Child_1 transferMsg =  &#123; msg =&gt; this.transferMsg(msg)&#125; /&gt;</div><div class=\"line\">                &lt;Child_2 msg = &#123;this.state.msg&#125; /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是这样会出现一个问题，那就是由于Parent的state发生变化，会出发Parent及从属于Parent的子组件的生命周期，所以我们在控制台中可以看到，在各个组件中的componentDidUpdate方法都会被触发。那么更好的方法便是采用观察者模式（即 发布者-订阅者模式）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> eventProxy <span class=\"keyword\">from</span> <span class=\"string\">'../eventProxy'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Child_1</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Child_2</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        setTimeOut( () =&gt; &#123;</div><div class=\"line\">            eventProxy.trigger(<span class=\"string\">'msg'</span>,<span class=\"string\">'end'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    state = &#123;</div><div class=\"line\">        msg: <span class=\"string\">'start'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        eventProxy.on(<span class=\"string\">'msg'</span>, (msg) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;msg&#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>child_2 component: &#123;this.state.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Child_2_1</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来看看神奇的<code>eventProxy.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> eventProxy = &#123;</div><div class=\"line\">    onObj: &#123;&#125;,</div><div class=\"line\">    oneObj: &#123;&#125;,</div><div class=\"line\">    on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.onObj[key] === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.onObj[key] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.onObj[key].push(fn);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    one: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key ,fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.oneObj&#123;key] === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.oneObj[key] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.oneObj[key].push(fn);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.onObj[key] = [];</div><div class=\"line\">        <span class=\"keyword\">this</span>.oneObj[key] = [];</div><div class=\"line\">    &#125;,</div><div class=\"line\">    trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> key, args;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        key = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</div><div class=\"line\">        args = [].concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.onObj[key] !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"keyword\">this</span>.onObj[key].length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.onObj[key]) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.onObj[key][i].apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.oneObj[key] !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"keyword\">this</span>.oneObj[key].length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.oneObj[key] ) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.oneObj[key][i].apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">                <span class=\"keyword\">this</span>.oneObj[key][i] = <span class=\"literal\">undefined</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">this</span>.oneObj[key] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> eventProxy;</div></pre></td></tr></table></figure>\n<p>redux中的数据传递</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> *用reducer来制造一个store</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(action.type) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'child_2'</span>:</div><div class=\"line\">            state.child_2 = action.data + <span class=\"string\">'child_2'</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> state;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'child_2_1'</span>:</div><div class=\"line\">            state.child_2_1 = action.data + <span class=\"string\">'child_2_1'</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> state;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> state;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(reducer);</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        setTimeout ( () =&gt; &#123;</div><div class=\"line\">            store.dispatch(&#123;<span class=\"comment\">//发布事件</span></div><div class=\"line\">                type: <span class=\"string\">'child_2'</span>,<span class=\"comment\">//事件名称</span></div><div class=\"line\">                data: <span class=\"string\">'hello'</span><span class=\"comment\">//要传递的数据</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">        </div><div class=\"line\">        setTimeout( () =&gt; &#123;</div><div class=\"line\">            store.dispatch(&#123;<span class=\"comment\">//发布事件</span></div><div class=\"line\">                type: <span class=\"string\">'child_2_1'</span>,</div><div class=\"line\">                data: <span class=\"string\">'bye'</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        store.subscribe( () =&gt; &#123;<span class=\"comment\">//订阅事件</span></div><div class=\"line\">            <span class=\"keyword\">let</span> state = store.getState();</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span>(state.hasOwnProperty(<span class=\"string\">'child_2'</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                    msg: state.child_2</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child_2_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        store.subscribe( () =&gt; &#123;<span class=\"comment\">//订阅事件</span></div><div class=\"line\">            <span class=\"keyword\">let</span> state = store.getState();</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span>( state.hasOwnProperty(<span class=\"string\">'child_2_1'</span>) )&#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                    msg: state.child_2_1</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上的代码都摘抄（其实就是抄自🙄）<a href=\"http://taobaofed.org/blog/2016/11/17/react-components-communication/\">淘宝前端博客——React 组件间通讯</a>；其实在写我自己的<a href=\"https://github.com/Neras/react-resume\">demo</a> 的时候就遇到过这个问题，在没有直接关联的节点之间传输数据，然后网上查找一番，最终也利用<code>事件的订阅-发布</code>搞定的，当时才知道redux这个东西，说实话，但是看得很迷茫，感觉有点绕，然后今天看到这篇文章，然后手抄了一遍代码😂过后，感觉其实就是这么回事。</p>\n<p>下面是以前通过网络查找写的简陋的事件订阅-发布</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * 在写react中，遇到一个情况，就是在两个没有层级的组件之间传递数据</div><div class=\"line\"> * 在vue里面貌似有一个store这个全局的值，来存储</div><div class=\"line\"> * 或许在react中也可以使用一个全局变量来存值</div><div class=\"line\"> * 但是通过查询看到一个Signals模式</div><div class=\"line\"> * 下面就是一个简单的实现</div><div class=\"line\"> *</div><div class=\"line\"> * 其中存在一个事件列表_events</div><div class=\"line\"> * subscribe表示订阅，相当于往事件列表里面传递一个事件，其中回调函数可以穿多个</div><div class=\"line\"> * 然后再dispatch中来检测事件列表是否存在该事件，如果存在则依次执行在subscribe中传入的多个回调函数</div><div class=\"line\"> *</div><div class=\"line\"> * 以此可以来传递两个组件之间的值</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = &#123;</div><div class=\"line\">    _events: &#123;&#125;,</div><div class=\"line\">    dispatch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._events[event]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._events[event].length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._events[event][i](data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    subscribe: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._events[event]) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._events[event] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>._events[event].push(callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Object</span>.create(EventEmitter);</div><div class=\"line\"></div><div class=\"line\">a.subscribe(<span class=\"string\">'et'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">a.dispatch(<span class=\"string\">'et'</span>, <span class=\"string\">'hehe'</span>);</div></pre></td></tr></table></figure>\n<p>最后那几行是测试用的。在次做个记录吧（里面有些地方，比如<code>...</code>运算符还不是很理解，后面补充）。</p>\n","sticky":0},{"title":"smarty","date":"2016-03-10T14:18:48.000Z","_content":"\n#### smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）\n\n- smarty中的定界符恰好也是{}，在JavaScript中也是，所以在smarty中{}两边是空格的时候，将会被自动忽略解析，这种特性可以通过设置smarty的$auto_literal为false来关闭\n- {literal}…{/literal}可以让中间的内容忽略smarty的解析\n- 必须使用双引号才能正常使用变量，单引号是不行的，如果在变量中存在 .则必须将该变量在双引号中庸单引号括起来\n- 页面的请求变量，例如$_GET,$POST,$_COOKIE,$_SERVER,$_ENV,$_SESSION等可以通过\n比如通过get方法请求地址为`http://www.examole.com/index/?page=1`,$smarty.get.page其他同理:\n>$smarty.post.page,\n$smarty.cookies.username\n$smarty.server.SERVER_NAME\n$smarty.env.PATH\n$smarty.session.id\n$smarty.request.username\n- $smarty.now 当前的时间戳，从1970年1月1日计算到当前的秒数可以使用$smarty.now|date_format'%Y-%m-%d %H:%M:%S'来格式化显示\n> $smarty.template返回当前的模板名称（不带目录名）;\n> $smarty.block.child 返回子模版提供的区块代码;\n> $smarty.block.parent 返回父模板提供的区块代码;\n\n- 变量修饰符\n> 用于变量，自定义函数或者字符串，使用的时候需要在变量后面加上|(竖线)并跟着修饰符名称\nSmarty3存在的默认行为，在smarty2.X的版本中，需要在数组后加上@标识符来使用修饰器，例如{$articleTitle|@count}，smarty3则不再需要使用@，它会被忽略\n\n- 学习到一个新的姿势啊，关于github，一个远程仓库上，如果直接clone，会拉去所有的commit，但是有可能我们并不需要，所以在拉取的时候可以添加 `--depth=1`，其中1表示最近一次的提交，即拉取最近的一次即可~\n\n* 接着上面的\n\n* |count_characters计算变量内容有多少个字符\n* |default为变量设置默认值，当变量是unset或者empty的字符串时，默认值将显示。必须有一个参数\n`{$articleTitle|default:'no title'}`\n\n* 输出\n`no title`\n\n* |indent 缩进每一行的字符串，默认是缩进四个空格，参数可设置缩进的空格数量，第二个可选参数设置缩进使用的字符，例如使用'\\t'来代替空格缩进\n`{$articleTitle|indent:1:\"\\t\"}`\n\n\n* 原来{ $var=…}是{assign}函数的缩写，可以在模版内对变量进行赋值\n属性:\n> scope 作用范围可以是：'parent','root','global'\n>nocache:对复制操作不进行缓存\n\n* {append}可以在运行时为数组变量增加或者创建值。\n属性：\n> var 赋值的变量名称\n> value 赋予的值\n> index 数组元素的新索引，如果没有此参数，则附加的值会加到数组最后\n> Scope 赋值变量的访问范围 'parent','root','global'\n\n* {assign}在调用的模版内的作用范围，在包含的模版内赋值的变量，在包含模版内可见\n\n* {block}可以在模板上定义一块区域进行模板继承。子模版中的{block}区域代码，将会替换父模板对应的区域代码。\n* 这里不是很明白：另外，{block}可以设置车合并父子模板的相应区域。在子模版的{block}中定义append或prepend，可以使子模版附加在父模板{block}区域的后面或前面\n\n* 在{block}内容中使用{$smarty.block.parent}，可以让父模板的区域代码放到子模版{block}内的任意位置\n\n* {blocks}可以嵌套使用\n> 属性：name（模板区域的名称）\n> 可选属性：append，prepend，hide，nocache\n\n* {call}可以调用一个通过{function}标签来定义的模板函数，如同调用插件函数一样。\n> Note:模板函数是全局定义的。因为Smarty编译器是一个单次的编译器，所以{call}标签调用的函数，无比定义在当前模板之外的位置。或者可以直接通过{funcname ….}的方式来使用该函数。\n{call}必须设置name属性，标识要调用的模板函数的名称。\n可以按照属性的方式来给函数传递参数。\n属性：\n> name 模板函数的名称\n> assign 将函数的返回内容赋值到指定变量\n> [var …]传递给模板函数的默认参数\n\n* {capture}：可以捕获标记范围内的输出内容，存到变量中而不现显示。\n在{capture name='foo'}{/capture}之间的内容会被捕获到变量，变量名可以通过name属性来指定，然后拿出来显示。\n\n* {extends}，模板继承中，你可以在子模版内使用{extends}标签来扩展父模板。\n{extends}必须放在模板的第一行。\n如果子模版都需要{extends}来扩展父模板，那么它只能有{block}的区域，任何其他的模板内容都会被忽略。\n\n* for指定步长的循环\n属性： max 循环的次数\n\n`<ul>\n{for $foo=1 to 3}\n\t<li>{$foo}</li>\n{/for>\n</ul>`\n\n* {foreach}{/foreach}\n属性：@index,@iteration,@first,@last,@show,@total\n语法命令：{break},{continue}\n代替指定key变量，通过{$item@key}来使用循环的当前key。\n其中@index为当前数组索引，从0开始计算\n@iteration是当前循环的次数，从1开始计数，可以使用 is div by,is even/odd by来做一些特殊的判断\n\n* show属性是在{foreach}循环执行之后，检测循环是是否显示数据的判断,show是一个布尔值.\n\n`{function}\n{function name=menu level=0}\n{function menu level=0}\n\t<ul class=\"level{$level}\">\n\t\t{foreach $data as $entry}\n\t\t\t{if is_array($entry)}\n\t\t\t\t<li>{$entry@key}</li>\n\t\t\t\t{menu data=$entry level=$level+1}\n\t\t\t{else}\n\t\t\t\t<li>{$entry}</li>\n\t\t\t{/if}\n\t\t{/foreach}\n\t</ul>\n{/function}`\n* 调用函数{menu data=$menu}\n\n* {if}{elseif}{/if}空变量的处理：使用默认值来代替空变量，使用default修饰器来处理\n\n* 看完这排版，我倒吸一口凉气，怎么这么烂，markdown自以为回了其实还没仔仔细细看的看过，这里也是今后的一个学习点。\n\n\n\n\n","source":"_posts/smarty.md","raw":"---\ntitle: smarty\ndate: 2016-03-10 22:18:48\ntags:\n- smarty\ncategories:\n- smarty\n---\n\n#### smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）\n\n- smarty中的定界符恰好也是{}，在JavaScript中也是，所以在smarty中{}两边是空格的时候，将会被自动忽略解析，这种特性可以通过设置smarty的$auto_literal为false来关闭\n- {literal}…{/literal}可以让中间的内容忽略smarty的解析\n- 必须使用双引号才能正常使用变量，单引号是不行的，如果在变量中存在 .则必须将该变量在双引号中庸单引号括起来\n- 页面的请求变量，例如$_GET,$POST,$_COOKIE,$_SERVER,$_ENV,$_SESSION等可以通过\n比如通过get方法请求地址为`http://www.examole.com/index/?page=1`,$smarty.get.page其他同理:\n>$smarty.post.page,\n$smarty.cookies.username\n$smarty.server.SERVER_NAME\n$smarty.env.PATH\n$smarty.session.id\n$smarty.request.username\n- $smarty.now 当前的时间戳，从1970年1月1日计算到当前的秒数可以使用$smarty.now|date_format'%Y-%m-%d %H:%M:%S'来格式化显示\n> $smarty.template返回当前的模板名称（不带目录名）;\n> $smarty.block.child 返回子模版提供的区块代码;\n> $smarty.block.parent 返回父模板提供的区块代码;\n\n- 变量修饰符\n> 用于变量，自定义函数或者字符串，使用的时候需要在变量后面加上|(竖线)并跟着修饰符名称\nSmarty3存在的默认行为，在smarty2.X的版本中，需要在数组后加上@标识符来使用修饰器，例如{$articleTitle|@count}，smarty3则不再需要使用@，它会被忽略\n\n- 学习到一个新的姿势啊，关于github，一个远程仓库上，如果直接clone，会拉去所有的commit，但是有可能我们并不需要，所以在拉取的时候可以添加 `--depth=1`，其中1表示最近一次的提交，即拉取最近的一次即可~\n\n* 接着上面的\n\n* |count_characters计算变量内容有多少个字符\n* |default为变量设置默认值，当变量是unset或者empty的字符串时，默认值将显示。必须有一个参数\n`{$articleTitle|default:'no title'}`\n\n* 输出\n`no title`\n\n* |indent 缩进每一行的字符串，默认是缩进四个空格，参数可设置缩进的空格数量，第二个可选参数设置缩进使用的字符，例如使用'\\t'来代替空格缩进\n`{$articleTitle|indent:1:\"\\t\"}`\n\n\n* 原来{ $var=…}是{assign}函数的缩写，可以在模版内对变量进行赋值\n属性:\n> scope 作用范围可以是：'parent','root','global'\n>nocache:对复制操作不进行缓存\n\n* {append}可以在运行时为数组变量增加或者创建值。\n属性：\n> var 赋值的变量名称\n> value 赋予的值\n> index 数组元素的新索引，如果没有此参数，则附加的值会加到数组最后\n> Scope 赋值变量的访问范围 'parent','root','global'\n\n* {assign}在调用的模版内的作用范围，在包含的模版内赋值的变量，在包含模版内可见\n\n* {block}可以在模板上定义一块区域进行模板继承。子模版中的{block}区域代码，将会替换父模板对应的区域代码。\n* 这里不是很明白：另外，{block}可以设置车合并父子模板的相应区域。在子模版的{block}中定义append或prepend，可以使子模版附加在父模板{block}区域的后面或前面\n\n* 在{block}内容中使用{$smarty.block.parent}，可以让父模板的区域代码放到子模版{block}内的任意位置\n\n* {blocks}可以嵌套使用\n> 属性：name（模板区域的名称）\n> 可选属性：append，prepend，hide，nocache\n\n* {call}可以调用一个通过{function}标签来定义的模板函数，如同调用插件函数一样。\n> Note:模板函数是全局定义的。因为Smarty编译器是一个单次的编译器，所以{call}标签调用的函数，无比定义在当前模板之外的位置。或者可以直接通过{funcname ….}的方式来使用该函数。\n{call}必须设置name属性，标识要调用的模板函数的名称。\n可以按照属性的方式来给函数传递参数。\n属性：\n> name 模板函数的名称\n> assign 将函数的返回内容赋值到指定变量\n> [var …]传递给模板函数的默认参数\n\n* {capture}：可以捕获标记范围内的输出内容，存到变量中而不现显示。\n在{capture name='foo'}{/capture}之间的内容会被捕获到变量，变量名可以通过name属性来指定，然后拿出来显示。\n\n* {extends}，模板继承中，你可以在子模版内使用{extends}标签来扩展父模板。\n{extends}必须放在模板的第一行。\n如果子模版都需要{extends}来扩展父模板，那么它只能有{block}的区域，任何其他的模板内容都会被忽略。\n\n* for指定步长的循环\n属性： max 循环的次数\n\n`<ul>\n{for $foo=1 to 3}\n\t<li>{$foo}</li>\n{/for>\n</ul>`\n\n* {foreach}{/foreach}\n属性：@index,@iteration,@first,@last,@show,@total\n语法命令：{break},{continue}\n代替指定key变量，通过{$item@key}来使用循环的当前key。\n其中@index为当前数组索引，从0开始计算\n@iteration是当前循环的次数，从1开始计数，可以使用 is div by,is even/odd by来做一些特殊的判断\n\n* show属性是在{foreach}循环执行之后，检测循环是是否显示数据的判断,show是一个布尔值.\n\n`{function}\n{function name=menu level=0}\n{function menu level=0}\n\t<ul class=\"level{$level}\">\n\t\t{foreach $data as $entry}\n\t\t\t{if is_array($entry)}\n\t\t\t\t<li>{$entry@key}</li>\n\t\t\t\t{menu data=$entry level=$level+1}\n\t\t\t{else}\n\t\t\t\t<li>{$entry}</li>\n\t\t\t{/if}\n\t\t{/foreach}\n\t</ul>\n{/function}`\n* 调用函数{menu data=$menu}\n\n* {if}{elseif}{/if}空变量的处理：使用默认值来代替空变量，使用default修饰器来处理\n\n* 看完这排版，我倒吸一口凉气，怎么这么烂，markdown自以为回了其实还没仔仔细细看的看过，这里也是今后的一个学习点。\n\n\n\n\n","slug":"smarty","published":1,"updated":"2016-08-04T16:42:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzal05000r4fryr3km4mtz","content":"<h4 id=\"smarty的进阶之路（可能会用到的更完了-●˘◡˘●-）\"><a href=\"#smarty的进阶之路（可能会用到的更完了-●˘◡˘●-）\" class=\"headerlink\" title=\"smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）\"></a>smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）</h4><ul>\n<li>smarty中的定界符恰好也是{}，在JavaScript中也是，所以在smarty中{}两边是空格的时候，将会被自动忽略解析，这种特性可以通过设置smarty的$auto_literal为false来关闭</li>\n<li>{literal}…{/literal}可以让中间的内容忽略smarty的解析</li>\n<li>必须使用双引号才能正常使用变量，单引号是不行的，如果在变量中存在 .则必须将该变量在双引号中庸单引号括起来</li>\n<li>页面的请求变量，例如$_GET,$POST,$_COOKIE,$_SERVER,$_ENV,$_SESSION等可以通过<br>比如通过get方法请求地址为<code>http://www.examole.com/index/?page=1</code>,$smarty.get.page其他同理:<blockquote>\n<p>$smarty.post.page,<br>$smarty.cookies.username<br>$smarty.server.SERVER_NAME<br>$smarty.env.PATH<br>$smarty.session.id<br>$smarty.request.username</p>\n</blockquote>\n</li>\n<li><p>$smarty.now 当前的时间戳，从1970年1月1日计算到当前的秒数可以使用$smarty.now|date_format’%Y-%m-%d %H:%M:%S’来格式化显示</p>\n<blockquote>\n<p>$smarty.template返回当前的模板名称（不带目录名）;<br>$smarty.block.child 返回子模版提供的区块代码;<br>$smarty.block.parent 返回父模板提供的区块代码;</p>\n</blockquote>\n</li>\n<li><p>变量修饰符</p>\n<blockquote>\n<p>用于变量，自定义函数或者字符串，使用的时候需要在变量后面加上|(竖线)并跟着修饰符名称<br>Smarty3存在的默认行为，在smarty2.X的版本中，需要在数组后加上@标识符来使用修饰器，例如{$articleTitle|@count}，smarty3则不再需要使用@，它会被忽略</p>\n</blockquote>\n</li>\n<li><p>学习到一个新的姿势啊，关于github，一个远程仓库上，如果直接clone，会拉去所有的commit，但是有可能我们并不需要，所以在拉取的时候可以添加 <code>--depth=1</code>，其中1表示最近一次的提交，即拉取最近的一次即可~</p>\n</li>\n</ul>\n<ul>\n<li><p>接着上面的</p>\n</li>\n<li><p>|count_characters计算变量内容有多少个字符</p>\n</li>\n<li><p>|default为变量设置默认值，当变量是unset或者empty的字符串时，默认值将显示。必须有一个参数<br><code>{$articleTitle|default:&#39;no title&#39;}</code></p>\n</li>\n<li><p>输出<br><code>no title</code></p>\n</li>\n<li><p>|indent 缩进每一行的字符串，默认是缩进四个空格，参数可设置缩进的空格数量，第二个可选参数设置缩进使用的字符，例如使用’\\t’来代替空格缩进<br><code>{$articleTitle|indent:1:&quot;\\t&quot;}</code></p>\n</li>\n</ul>\n<ul>\n<li><p>原来{ $var=…}是{assign}函数的缩写，可以在模版内对变量进行赋值<br>属性:</p>\n<blockquote>\n<p>scope 作用范围可以是：’parent’,’root’,’global’<br>nocache:对复制操作不进行缓存</p>\n</blockquote>\n</li>\n<li><p>{append}可以在运行时为数组变量增加或者创建值。<br>属性：</p>\n<blockquote>\n<p>var 赋值的变量名称<br>value 赋予的值<br>index 数组元素的新索引，如果没有此参数，则附加的值会加到数组最后<br>Scope 赋值变量的访问范围 ‘parent’,’root’,’global’</p>\n</blockquote>\n</li>\n<li><p>{assign}在调用的模版内的作用范围，在包含的模版内赋值的变量，在包含模版内可见</p>\n</li>\n<li><p>{block}可以在模板上定义一块区域进行模板继承。子模版中的{block}区域代码，将会替换父模板对应的区域代码。</p>\n</li>\n<li><p>这里不是很明白：另外，{block}可以设置车合并父子模板的相应区域。在子模版的{block}中定义append或prepend，可以使子模版附加在父模板{block}区域的后面或前面</p>\n</li>\n<li><p>在{block}内容中使用{$smarty.block.parent}，可以让父模板的区域代码放到子模版{block}内的任意位置</p>\n</li>\n<li><p>{blocks}可以嵌套使用</p>\n<blockquote>\n<p>属性：name（模板区域的名称）<br>可选属性：append，prepend，hide，nocache</p>\n</blockquote>\n</li>\n<li><p>{call}可以调用一个通过{function}标签来定义的模板函数，如同调用插件函数一样。</p>\n<blockquote>\n<p>Note:模板函数是全局定义的。因为Smarty编译器是一个单次的编译器，所以{call}标签调用的函数，无比定义在当前模板之外的位置。或者可以直接通过{funcname ….}的方式来使用该函数。<br>{call}必须设置name属性，标识要调用的模板函数的名称。<br>可以按照属性的方式来给函数传递参数。<br>属性：<br>name 模板函数的名称<br>assign 将函数的返回内容赋值到指定变量<br>[var …]传递给模板函数的默认参数</p>\n</blockquote>\n</li>\n<li><p>{capture}：可以捕获标记范围内的输出内容，存到变量中而不现显示。<br>在{capture name=’foo’}{/capture}之间的内容会被捕获到变量，变量名可以通过name属性来指定，然后拿出来显示。</p>\n</li>\n<li><p>{extends}，模板继承中，你可以在子模版内使用{extends}标签来扩展父模板。<br>{extends}必须放在模板的第一行。<br>如果子模版都需要{extends}来扩展父模板，那么它只能有{block}的区域，任何其他的模板内容都会被忽略。</p>\n</li>\n<li><p>for指定步长的循环<br>属性： max 循环的次数</p>\n</li>\n</ul>\n<p><code>&lt;ul&gt;\n{for $foo=1 to 3}\n    &lt;li&gt;{$foo}&lt;/li&gt;\n{/for&gt;\n&lt;/ul&gt;</code></p>\n<ul>\n<li><p>{foreach}{/foreach}<br>属性：@index,@iteration,@first,@last,@show,@total<br>语法命令：{break},{continue}<br>代替指定key变量，通过{$item@key}来使用循环的当前key。<br>其中@index为当前数组索引，从0开始计算<br>@iteration是当前循环的次数，从1开始计数，可以使用 is div by,is even/odd by来做一些特殊的判断</p>\n</li>\n<li><p>show属性是在{foreach}循环执行之后，检测循环是是否显示数据的判断,show是一个布尔值.</p>\n</li>\n</ul>\n<p><code>{function}\n{function name=menu level=0}\n{function menu level=0}\n    &lt;ul class=&quot;level{$level}&quot;&gt;\n        {foreach $data as $entry}\n            {if is_array($entry)}\n                &lt;li&gt;{$entry@key}&lt;/li&gt;\n                {menu data=$entry level=$level+1}\n            {else}\n                &lt;li&gt;{$entry}&lt;/li&gt;\n            {/if}\n        {/foreach}\n    &lt;/ul&gt;\n{/function}</code></p>\n<ul>\n<li><p>调用函数{menu data=$menu}</p>\n</li>\n<li><p>{if}{elseif}{/if}空变量的处理：使用默认值来代替空变量，使用default修饰器来处理</p>\n</li>\n<li><p>看完这排版，我倒吸一口凉气，怎么这么烂，markdown自以为回了其实还没仔仔细细看的看过，这里也是今后的一个学习点。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"smarty的进阶之路（可能会用到的更完了-●˘◡˘●-）\"><a href=\"#smarty的进阶之路（可能会用到的更完了-●˘◡˘●-）\" class=\"headerlink\" title=\"smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）\"></a>smarty的进阶之路（可能会用到的更完了(●˘◡˘●)）</h4><ul>\n<li>smarty中的定界符恰好也是{}，在JavaScript中也是，所以在smarty中{}两边是空格的时候，将会被自动忽略解析，这种特性可以通过设置smarty的$auto_literal为false来关闭</li>\n<li>{literal}…{/literal}可以让中间的内容忽略smarty的解析</li>\n<li>必须使用双引号才能正常使用变量，单引号是不行的，如果在变量中存在 .则必须将该变量在双引号中庸单引号括起来</li>\n<li>页面的请求变量，例如$_GET,$POST,$_COOKIE,$_SERVER,$_ENV,$_SESSION等可以通过<br>比如通过get方法请求地址为<code>http://www.examole.com/index/?page=1</code>,$smarty.get.page其他同理:<blockquote>\n<p>$smarty.post.page,<br>$smarty.cookies.username<br>$smarty.server.SERVER_NAME<br>$smarty.env.PATH<br>$smarty.session.id<br>$smarty.request.username</p>\n</blockquote>\n</li>\n<li><p>$smarty.now 当前的时间戳，从1970年1月1日计算到当前的秒数可以使用$smarty.now|date_format’%Y-%m-%d %H:%M:%S’来格式化显示</p>\n<blockquote>\n<p>$smarty.template返回当前的模板名称（不带目录名）;<br>$smarty.block.child 返回子模版提供的区块代码;<br>$smarty.block.parent 返回父模板提供的区块代码;</p>\n</blockquote>\n</li>\n<li><p>变量修饰符</p>\n<blockquote>\n<p>用于变量，自定义函数或者字符串，使用的时候需要在变量后面加上|(竖线)并跟着修饰符名称<br>Smarty3存在的默认行为，在smarty2.X的版本中，需要在数组后加上@标识符来使用修饰器，例如{$articleTitle|@count}，smarty3则不再需要使用@，它会被忽略</p>\n</blockquote>\n</li>\n<li><p>学习到一个新的姿势啊，关于github，一个远程仓库上，如果直接clone，会拉去所有的commit，但是有可能我们并不需要，所以在拉取的时候可以添加 <code>--depth=1</code>，其中1表示最近一次的提交，即拉取最近的一次即可~</p>\n</li>\n</ul>\n<ul>\n<li><p>接着上面的</p>\n</li>\n<li><p>|count_characters计算变量内容有多少个字符</p>\n</li>\n<li><p>|default为变量设置默认值，当变量是unset或者empty的字符串时，默认值将显示。必须有一个参数<br><code>{$articleTitle|default:&#39;no title&#39;}</code></p>\n</li>\n<li><p>输出<br><code>no title</code></p>\n</li>\n<li><p>|indent 缩进每一行的字符串，默认是缩进四个空格，参数可设置缩进的空格数量，第二个可选参数设置缩进使用的字符，例如使用’\\t’来代替空格缩进<br><code>{$articleTitle|indent:1:&quot;\\t&quot;}</code></p>\n</li>\n</ul>\n<ul>\n<li><p>原来{ $var=…}是{assign}函数的缩写，可以在模版内对变量进行赋值<br>属性:</p>\n<blockquote>\n<p>scope 作用范围可以是：’parent’,’root’,’global’<br>nocache:对复制操作不进行缓存</p>\n</blockquote>\n</li>\n<li><p>{append}可以在运行时为数组变量增加或者创建值。<br>属性：</p>\n<blockquote>\n<p>var 赋值的变量名称<br>value 赋予的值<br>index 数组元素的新索引，如果没有此参数，则附加的值会加到数组最后<br>Scope 赋值变量的访问范围 ‘parent’,’root’,’global’</p>\n</blockquote>\n</li>\n<li><p>{assign}在调用的模版内的作用范围，在包含的模版内赋值的变量，在包含模版内可见</p>\n</li>\n<li><p>{block}可以在模板上定义一块区域进行模板继承。子模版中的{block}区域代码，将会替换父模板对应的区域代码。</p>\n</li>\n<li><p>这里不是很明白：另外，{block}可以设置车合并父子模板的相应区域。在子模版的{block}中定义append或prepend，可以使子模版附加在父模板{block}区域的后面或前面</p>\n</li>\n<li><p>在{block}内容中使用{$smarty.block.parent}，可以让父模板的区域代码放到子模版{block}内的任意位置</p>\n</li>\n<li><p>{blocks}可以嵌套使用</p>\n<blockquote>\n<p>属性：name（模板区域的名称）<br>可选属性：append，prepend，hide，nocache</p>\n</blockquote>\n</li>\n<li><p>{call}可以调用一个通过{function}标签来定义的模板函数，如同调用插件函数一样。</p>\n<blockquote>\n<p>Note:模板函数是全局定义的。因为Smarty编译器是一个单次的编译器，所以{call}标签调用的函数，无比定义在当前模板之外的位置。或者可以直接通过{funcname ….}的方式来使用该函数。<br>{call}必须设置name属性，标识要调用的模板函数的名称。<br>可以按照属性的方式来给函数传递参数。<br>属性：<br>name 模板函数的名称<br>assign 将函数的返回内容赋值到指定变量<br>[var …]传递给模板函数的默认参数</p>\n</blockquote>\n</li>\n<li><p>{capture}：可以捕获标记范围内的输出内容，存到变量中而不现显示。<br>在{capture name=’foo’}{/capture}之间的内容会被捕获到变量，变量名可以通过name属性来指定，然后拿出来显示。</p>\n</li>\n<li><p>{extends}，模板继承中，你可以在子模版内使用{extends}标签来扩展父模板。<br>{extends}必须放在模板的第一行。<br>如果子模版都需要{extends}来扩展父模板，那么它只能有{block}的区域，任何其他的模板内容都会被忽略。</p>\n</li>\n<li><p>for指定步长的循环<br>属性： max 循环的次数</p>\n</li>\n</ul>\n<p><code>&lt;ul&gt;\n{for $foo=1 to 3}\n    &lt;li&gt;{$foo}&lt;/li&gt;\n{/for&gt;\n&lt;/ul&gt;</code></p>\n<ul>\n<li><p>{foreach}{/foreach}<br>属性：@index,@iteration,@first,@last,@show,@total<br>语法命令：{break},{continue}<br>代替指定key变量，通过{$item@key}来使用循环的当前key。<br>其中@index为当前数组索引，从0开始计算<br>@iteration是当前循环的次数，从1开始计数，可以使用 is div by,is even/odd by来做一些特殊的判断</p>\n</li>\n<li><p>show属性是在{foreach}循环执行之后，检测循环是是否显示数据的判断,show是一个布尔值.</p>\n</li>\n</ul>\n<p><code>{function}\n{function name=menu level=0}\n{function menu level=0}\n    &lt;ul class=&quot;level{$level}&quot;&gt;\n        {foreach $data as $entry}\n            {if is_array($entry)}\n                &lt;li&gt;{$entry@key}&lt;/li&gt;\n                {menu data=$entry level=$level+1}\n            {else}\n                &lt;li&gt;{$entry}&lt;/li&gt;\n            {/if}\n        {/foreach}\n    &lt;/ul&gt;\n{/function}</code></p>\n<ul>\n<li><p>调用函数{menu data=$menu}</p>\n</li>\n<li><p>{if}{elseif}{/if}空变量的处理：使用默认值来代替空变量，使用default修饰器来处理</p>\n</li>\n<li><p>看完这排版，我倒吸一口凉气，怎么这么烂，markdown自以为回了其实还没仔仔细细看的看过，这里也是今后的一个学习点。</p>\n</li>\n</ul>\n","sticky":0},{"title":"vim开始的征途","date":"2016-08-12T16:55:54.000Z","_content":"#### 还是要有一个前言\n上一篇vim的文章只是在粗略的浏览网上的简易教程以及凭借过去在不经意使用中摸索到的几个命令的记忆总结吧，这几天虽然还是使用的sublime来进行开发，但是已经将sublime调整为vim模式来进行一个过渡阶段以及对那些记忆中命令的一些回顾和熟悉，现在就开始真正的征途。\n\n#### 删除命令(以下命令均不带:)\n* dw - 从光标处删除至一个单词的末尾\n* d$ - 从当前光标处删除到行末\n* dd - 删除一整行\n* de - 从当前光标位置删除直到单词末尾\n\n关于删除命令d，后面紧跟对象则表示要进行的操作，即\n\n`d motion`\n\n其中motion则表示d删除操作符要删除的对象，具体参考上面的命令。同时在动作前，即在motion前加入数字，则会让它重复该数字次数的操作，如：\n* 2w - 使光标向前移动两个单词\n* d2w - 删除两个单词\n* 2dd - 删除两行\n\n#### 撤销操作\n* u - 表示撤销最后执行的命令，连续使用的话，就连续执行撤销操作，在我看来就类似于widnows上的ctrl+z键的组合\n* U(大写) - 用来撤销对整行的操作\n\n#### 更改类命令 - c\n该命令类似于删除命令，`c motion`来执行相应的动作，如：\n* cw - 删除光标所在位置一直到单词结果的字符，包括光标所在字符，并进入插入模式，具体来说，比如要更改单词halloo为正确单词hello，将光宝移动到a字符处，输入cw，halloo会变成h，切光标处于h之后，然后输入正确的ello，按ESC，修改完成，变成hello。同样可以添加数字来执行多次操作。\n\n#### 可能是补充\n这两天用得表较多的就是A和a命令，以及0和$命来来进行插入\n* A - 在当前行的末尾进行插入\n* a - 在当前光标后进行插入，按了a以后，光标回向前移动一个字符，即原来光标位置之后\n","source":"_posts/vim01.md","raw":"---\ntitle: vim开始的征途 \ndate: 2016-08-13 00:55:54\ntags: vim\n---\n#### 还是要有一个前言\n上一篇vim的文章只是在粗略的浏览网上的简易教程以及凭借过去在不经意使用中摸索到的几个命令的记忆总结吧，这几天虽然还是使用的sublime来进行开发，但是已经将sublime调整为vim模式来进行一个过渡阶段以及对那些记忆中命令的一些回顾和熟悉，现在就开始真正的征途。\n\n#### 删除命令(以下命令均不带:)\n* dw - 从光标处删除至一个单词的末尾\n* d$ - 从当前光标处删除到行末\n* dd - 删除一整行\n* de - 从当前光标位置删除直到单词末尾\n\n关于删除命令d，后面紧跟对象则表示要进行的操作，即\n\n`d motion`\n\n其中motion则表示d删除操作符要删除的对象，具体参考上面的命令。同时在动作前，即在motion前加入数字，则会让它重复该数字次数的操作，如：\n* 2w - 使光标向前移动两个单词\n* d2w - 删除两个单词\n* 2dd - 删除两行\n\n#### 撤销操作\n* u - 表示撤销最后执行的命令，连续使用的话，就连续执行撤销操作，在我看来就类似于widnows上的ctrl+z键的组合\n* U(大写) - 用来撤销对整行的操作\n\n#### 更改类命令 - c\n该命令类似于删除命令，`c motion`来执行相应的动作，如：\n* cw - 删除光标所在位置一直到单词结果的字符，包括光标所在字符，并进入插入模式，具体来说，比如要更改单词halloo为正确单词hello，将光宝移动到a字符处，输入cw，halloo会变成h，切光标处于h之后，然后输入正确的ello，按ESC，修改完成，变成hello。同样可以添加数字来执行多次操作。\n\n#### 可能是补充\n这两天用得表较多的就是A和a命令，以及0和$命来来进行插入\n* A - 在当前行的末尾进行插入\n* a - 在当前光标后进行插入，按了a以后，光标回向前移动一个字符，即原来光标位置之后\n","slug":"vim01","published":1,"updated":"2016-08-12T17:23:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzal08000t4fry7s3tt4vw","content":"<h4 id=\"还是要有一个前言\"><a href=\"#还是要有一个前言\" class=\"headerlink\" title=\"还是要有一个前言\"></a>还是要有一个前言</h4><p>上一篇vim的文章只是在粗略的浏览网上的简易教程以及凭借过去在不经意使用中摸索到的几个命令的记忆总结吧，这几天虽然还是使用的sublime来进行开发，但是已经将sublime调整为vim模式来进行一个过渡阶段以及对那些记忆中命令的一些回顾和熟悉，现在就开始真正的征途。</p>\n<h4 id=\"删除命令-以下命令均不带\"><a href=\"#删除命令-以下命令均不带\" class=\"headerlink\" title=\"删除命令(以下命令均不带:)\"></a>删除命令(以下命令均不带:)</h4><ul>\n<li>dw - 从光标处删除至一个单词的末尾</li>\n<li>d$ - 从当前光标处删除到行末</li>\n<li>dd - 删除一整行</li>\n<li>de - 从当前光标位置删除直到单词末尾</li>\n</ul>\n<p>关于删除命令d，后面紧跟对象则表示要进行的操作，即</p>\n<p><code>d motion</code></p>\n<p>其中motion则表示d删除操作符要删除的对象，具体参考上面的命令。同时在动作前，即在motion前加入数字，则会让它重复该数字次数的操作，如：</p>\n<ul>\n<li>2w - 使光标向前移动两个单词</li>\n<li>d2w - 删除两个单词</li>\n<li>2dd - 删除两行</li>\n</ul>\n<h4 id=\"撤销操作\"><a href=\"#撤销操作\" class=\"headerlink\" title=\"撤销操作\"></a>撤销操作</h4><ul>\n<li>u - 表示撤销最后执行的命令，连续使用的话，就连续执行撤销操作，在我看来就类似于widnows上的ctrl+z键的组合</li>\n<li>U(大写) - 用来撤销对整行的操作</li>\n</ul>\n<h4 id=\"更改类命令-c\"><a href=\"#更改类命令-c\" class=\"headerlink\" title=\"更改类命令 - c\"></a>更改类命令 - c</h4><p>该命令类似于删除命令，<code>c motion</code>来执行相应的动作，如：</p>\n<ul>\n<li>cw - 删除光标所在位置一直到单词结果的字符，包括光标所在字符，并进入插入模式，具体来说，比如要更改单词halloo为正确单词hello，将光宝移动到a字符处，输入cw，halloo会变成h，切光标处于h之后，然后输入正确的ello，按ESC，修改完成，变成hello。同样可以添加数字来执行多次操作。</li>\n</ul>\n<h4 id=\"可能是补充\"><a href=\"#可能是补充\" class=\"headerlink\" title=\"可能是补充\"></a>可能是补充</h4><p>这两天用得表较多的就是A和a命令，以及0和$命来来进行插入</p>\n<ul>\n<li>A - 在当前行的末尾进行插入</li>\n<li>a - 在当前光标后进行插入，按了a以后，光标回向前移动一个字符，即原来光标位置之后</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"还是要有一个前言\"><a href=\"#还是要有一个前言\" class=\"headerlink\" title=\"还是要有一个前言\"></a>还是要有一个前言</h4><p>上一篇vim的文章只是在粗略的浏览网上的简易教程以及凭借过去在不经意使用中摸索到的几个命令的记忆总结吧，这几天虽然还是使用的sublime来进行开发，但是已经将sublime调整为vim模式来进行一个过渡阶段以及对那些记忆中命令的一些回顾和熟悉，现在就开始真正的征途。</p>\n<h4 id=\"删除命令-以下命令均不带\"><a href=\"#删除命令-以下命令均不带\" class=\"headerlink\" title=\"删除命令(以下命令均不带:)\"></a>删除命令(以下命令均不带:)</h4><ul>\n<li>dw - 从光标处删除至一个单词的末尾</li>\n<li>d$ - 从当前光标处删除到行末</li>\n<li>dd - 删除一整行</li>\n<li>de - 从当前光标位置删除直到单词末尾</li>\n</ul>\n<p>关于删除命令d，后面紧跟对象则表示要进行的操作，即</p>\n<p><code>d motion</code></p>\n<p>其中motion则表示d删除操作符要删除的对象，具体参考上面的命令。同时在动作前，即在motion前加入数字，则会让它重复该数字次数的操作，如：</p>\n<ul>\n<li>2w - 使光标向前移动两个单词</li>\n<li>d2w - 删除两个单词</li>\n<li>2dd - 删除两行</li>\n</ul>\n<h4 id=\"撤销操作\"><a href=\"#撤销操作\" class=\"headerlink\" title=\"撤销操作\"></a>撤销操作</h4><ul>\n<li>u - 表示撤销最后执行的命令，连续使用的话，就连续执行撤销操作，在我看来就类似于widnows上的ctrl+z键的组合</li>\n<li>U(大写) - 用来撤销对整行的操作</li>\n</ul>\n<h4 id=\"更改类命令-c\"><a href=\"#更改类命令-c\" class=\"headerlink\" title=\"更改类命令 - c\"></a>更改类命令 - c</h4><p>该命令类似于删除命令，<code>c motion</code>来执行相应的动作，如：</p>\n<ul>\n<li>cw - 删除光标所在位置一直到单词结果的字符，包括光标所在字符，并进入插入模式，具体来说，比如要更改单词halloo为正确单词hello，将光宝移动到a字符处，输入cw，halloo会变成h，切光标处于h之后，然后输入正确的ello，按ESC，修改完成，变成hello。同样可以添加数字来执行多次操作。</li>\n</ul>\n<h4 id=\"可能是补充\"><a href=\"#可能是补充\" class=\"headerlink\" title=\"可能是补充\"></a>可能是补充</h4><p>这两天用得表较多的就是A和a命令，以及0和$命来来进行插入</p>\n<ul>\n<li>A - 在当前行的末尾进行插入</li>\n<li>a - 在当前光标后进行插入，按了a以后，光标回向前移动一个字符，即原来光标位置之后</li>\n</ul>\n","sticky":0},{"title":"vim的升温之路","date":"2016-08-21T14:11:42.000Z","_content":"#### 关于这周的说明\n这周确实事情比较多。先是项目通宵的上线，然后又是搬家。周六又去原来房东那里退押金，检查房子什么的，不明白为什么会有这么多事情。说起来，这是第三次完成了一个人的搬家，我真是佩服我自己的。周天的时候，昏天黑地的睡到下午两点＝ ＝，我再次佩服我自己。废话不多说。继续vim的征途，这次的内容我觉得不练习个把星期是绝壁不能掌握的。\n\n#### 上次漏了点什么\n这次回头来看上次教程的时候，发现漏了两个东西\n* p - p命令，就是重新置入已经删除的文本内容，该操作可以将已经删除文本内容置入光标之后，如果最后一次删除的是一整行，那么该行将置于当前光标所在的下一行，具体效果可以实际操作一下，说起来也很抽象\n* r - 替换光标所在位置的字符。将光标移到你要替换的字符上，然后按r键，然后再键入你要替换所在光标处的字符的新字符即可。\n\n#### 文件状态\n* ctrl+g - 按下该组合键后，会在底部出现一个状态信息，该信息展示了文件所在的目录以及一些额外的状态，比如光标所在的文件中的位置，即行号\n* G - 按下大写的G可以是光标直接跳转到文件的最后一行\n* gg - 按下gg可以使得当前光标直接跳转到文件的第一行\n* 输入行号，然后再按大写的G就可以回到该行\n\n#### 文件查找\n* / - 输入`/` 加上一个字符串，则可以以在当前文件中查找该字符串，默认为向下查找，且只查找一次，如果想继续查找相同的字符串，只需要按n键。如果要往反方向查找按大写N键即可。如果直接想玩反方向查找只需要将 `/` 换成`?` 即可\n* ctrl+o - 可以回到之前的位置，重复按就重复回退\n* ctrl+i - 跳转到较新的位置，这个没懂起，实际操作的时候也没啥反应，看来要在实战中试试才知道了\n* 匹配查找 - 比如想查配对的(),[],{}，将光标移动到符号上，再按下 `%` 就可以了，编程的时候尤为重要啊，这个东西\n\n#### 替换命令\n这里直接举例说明吧：\n> 输入`:s/old/new/g`，则可以将old替换为new\n\n其中，如果只是输入 `:s/old/new` 只会替换光标所在行的第一个匹配到的old，输入 `:s/old/new/g` 则会替换整行匹配到old\n\n* :#,#s/old/new/g - 其中#,#代表的是替换操作中的若干行中首位两行的行号，说实话，这个我也没怎么明白，实际试了一下，但是并没有明白是个什么情况😑\n* :%s/old/new/g - 将整个文件中的old匹配并替换为new\n* :$s/old/new/gc - 该命令会找到整个文件中的old，并且在每个old替换成new的时候进行提示\n\n#### 在vim中使用外部命令\n在使用vim编辑的时候，如果想使用外部的命令，比如使用`ls`来查看文件列表，可以输入\n> :!ls\n\n这可以使用`ls`来查看文件列表，这个时候会跳出到vim之外，再按enter键，就会回到vim内\n\n#### 保存文件\n* 在写入文件的时候，输入`:w` 来保存文件，如果输入`:w FILENAME` 则会将你的内容以FIELNAME为文件名来保存该文件\n* v - 按v键会进入vim的可视模式进行选取，使用hjkl移动光标来选中文本内容，按d键则会删除所选中的内容，如果按`:`则会在底部出现 `:'<,'>`，在此之后键入`w FILENAME` 则会将选中的内容以FILENAME为文件名来保存\n\n#### 文件的提取和合并\n如果要向当前文件插入另外的文件内容，输入\n> :r FILENAME\n\n则FILENAME文件中的内容将从光标处插入，也可以是使用该命令来读取外部命令的输出，比如输入 `:r !ls` ，则可以将ls命令读取到的文件列表放置在光标下 \n\n\n#### 忧郁的小结\n刚才写到一半去阳台放风，迎面吹来的热风，看着窗口偌大的城市，一时间想到了很多，想写到文章里面来，结果把这篇文章写完，回想一起来，发现已经忘得差不多了，嘛，毕竟we are tiny in this word。明天打算翻译一篇关于CSS的BEM命名法的文章，感觉每次写的时候命名简直就是💩一样，自己都受不了。\n\n以上。\n","source":"_posts/vim02.md","raw":"---\ntitle: vim的升温之路 \ndate: 2016-08-21 22:11:42\ntags: \n- vim\n---\n#### 关于这周的说明\n这周确实事情比较多。先是项目通宵的上线，然后又是搬家。周六又去原来房东那里退押金，检查房子什么的，不明白为什么会有这么多事情。说起来，这是第三次完成了一个人的搬家，我真是佩服我自己的。周天的时候，昏天黑地的睡到下午两点＝ ＝，我再次佩服我自己。废话不多说。继续vim的征途，这次的内容我觉得不练习个把星期是绝壁不能掌握的。\n\n#### 上次漏了点什么\n这次回头来看上次教程的时候，发现漏了两个东西\n* p - p命令，就是重新置入已经删除的文本内容，该操作可以将已经删除文本内容置入光标之后，如果最后一次删除的是一整行，那么该行将置于当前光标所在的下一行，具体效果可以实际操作一下，说起来也很抽象\n* r - 替换光标所在位置的字符。将光标移到你要替换的字符上，然后按r键，然后再键入你要替换所在光标处的字符的新字符即可。\n\n#### 文件状态\n* ctrl+g - 按下该组合键后，会在底部出现一个状态信息，该信息展示了文件所在的目录以及一些额外的状态，比如光标所在的文件中的位置，即行号\n* G - 按下大写的G可以是光标直接跳转到文件的最后一行\n* gg - 按下gg可以使得当前光标直接跳转到文件的第一行\n* 输入行号，然后再按大写的G就可以回到该行\n\n#### 文件查找\n* / - 输入`/` 加上一个字符串，则可以以在当前文件中查找该字符串，默认为向下查找，且只查找一次，如果想继续查找相同的字符串，只需要按n键。如果要往反方向查找按大写N键即可。如果直接想玩反方向查找只需要将 `/` 换成`?` 即可\n* ctrl+o - 可以回到之前的位置，重复按就重复回退\n* ctrl+i - 跳转到较新的位置，这个没懂起，实际操作的时候也没啥反应，看来要在实战中试试才知道了\n* 匹配查找 - 比如想查配对的(),[],{}，将光标移动到符号上，再按下 `%` 就可以了，编程的时候尤为重要啊，这个东西\n\n#### 替换命令\n这里直接举例说明吧：\n> 输入`:s/old/new/g`，则可以将old替换为new\n\n其中，如果只是输入 `:s/old/new` 只会替换光标所在行的第一个匹配到的old，输入 `:s/old/new/g` 则会替换整行匹配到old\n\n* :#,#s/old/new/g - 其中#,#代表的是替换操作中的若干行中首位两行的行号，说实话，这个我也没怎么明白，实际试了一下，但是并没有明白是个什么情况😑\n* :%s/old/new/g - 将整个文件中的old匹配并替换为new\n* :$s/old/new/gc - 该命令会找到整个文件中的old，并且在每个old替换成new的时候进行提示\n\n#### 在vim中使用外部命令\n在使用vim编辑的时候，如果想使用外部的命令，比如使用`ls`来查看文件列表，可以输入\n> :!ls\n\n这可以使用`ls`来查看文件列表，这个时候会跳出到vim之外，再按enter键，就会回到vim内\n\n#### 保存文件\n* 在写入文件的时候，输入`:w` 来保存文件，如果输入`:w FILENAME` 则会将你的内容以FIELNAME为文件名来保存该文件\n* v - 按v键会进入vim的可视模式进行选取，使用hjkl移动光标来选中文本内容，按d键则会删除所选中的内容，如果按`:`则会在底部出现 `:'<,'>`，在此之后键入`w FILENAME` 则会将选中的内容以FILENAME为文件名来保存\n\n#### 文件的提取和合并\n如果要向当前文件插入另外的文件内容，输入\n> :r FILENAME\n\n则FILENAME文件中的内容将从光标处插入，也可以是使用该命令来读取外部命令的输出，比如输入 `:r !ls` ，则可以将ls命令读取到的文件列表放置在光标下 \n\n\n#### 忧郁的小结\n刚才写到一半去阳台放风，迎面吹来的热风，看着窗口偌大的城市，一时间想到了很多，想写到文章里面来，结果把这篇文章写完，回想一起来，发现已经忘得差不多了，嘛，毕竟we are tiny in this word。明天打算翻译一篇关于CSS的BEM命名法的文章，感觉每次写的时候命名简直就是💩一样，自己都受不了。\n\n以上。\n","slug":"vim02","published":1,"updated":"2016-08-21T15:17:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzal0b000x4fry2i4cpx5y","content":"<h4 id=\"关于这周的说明\"><a href=\"#关于这周的说明\" class=\"headerlink\" title=\"关于这周的说明\"></a>关于这周的说明</h4><p>这周确实事情比较多。先是项目通宵的上线，然后又是搬家。周六又去原来房东那里退押金，检查房子什么的，不明白为什么会有这么多事情。说起来，这是第三次完成了一个人的搬家，我真是佩服我自己的。周天的时候，昏天黑地的睡到下午两点＝ ＝，我再次佩服我自己。废话不多说。继续vim的征途，这次的内容我觉得不练习个把星期是绝壁不能掌握的。</p>\n<h4 id=\"上次漏了点什么\"><a href=\"#上次漏了点什么\" class=\"headerlink\" title=\"上次漏了点什么\"></a>上次漏了点什么</h4><p>这次回头来看上次教程的时候，发现漏了两个东西</p>\n<ul>\n<li>p - p命令，就是重新置入已经删除的文本内容，该操作可以将已经删除文本内容置入光标之后，如果最后一次删除的是一整行，那么该行将置于当前光标所在的下一行，具体效果可以实际操作一下，说起来也很抽象</li>\n<li>r - 替换光标所在位置的字符。将光标移到你要替换的字符上，然后按r键，然后再键入你要替换所在光标处的字符的新字符即可。</li>\n</ul>\n<h4 id=\"文件状态\"><a href=\"#文件状态\" class=\"headerlink\" title=\"文件状态\"></a>文件状态</h4><ul>\n<li>ctrl+g - 按下该组合键后，会在底部出现一个状态信息，该信息展示了文件所在的目录以及一些额外的状态，比如光标所在的文件中的位置，即行号</li>\n<li>G - 按下大写的G可以是光标直接跳转到文件的最后一行</li>\n<li>gg - 按下gg可以使得当前光标直接跳转到文件的第一行</li>\n<li>输入行号，然后再按大写的G就可以回到该行</li>\n</ul>\n<h4 id=\"文件查找\"><a href=\"#文件查找\" class=\"headerlink\" title=\"文件查找\"></a>文件查找</h4><ul>\n<li>/ - 输入<code>/</code> 加上一个字符串，则可以以在当前文件中查找该字符串，默认为向下查找，且只查找一次，如果想继续查找相同的字符串，只需要按n键。如果要往反方向查找按大写N键即可。如果直接想玩反方向查找只需要将 <code>/</code> 换成<code>?</code> 即可</li>\n<li>ctrl+o - 可以回到之前的位置，重复按就重复回退</li>\n<li>ctrl+i - 跳转到较新的位置，这个没懂起，实际操作的时候也没啥反应，看来要在实战中试试才知道了</li>\n<li>匹配查找 - 比如想查配对的(),[],{}，将光标移动到符号上，再按下 <code>%</code> 就可以了，编程的时候尤为重要啊，这个东西</li>\n</ul>\n<h4 id=\"替换命令\"><a href=\"#替换命令\" class=\"headerlink\" title=\"替换命令\"></a>替换命令</h4><p>这里直接举例说明吧：</p>\n<blockquote>\n<p>输入<code>:s/old/new/g</code>，则可以将old替换为new</p>\n</blockquote>\n<p>其中，如果只是输入 <code>:s/old/new</code> 只会替换光标所在行的第一个匹配到的old，输入 <code>:s/old/new/g</code> 则会替换整行匹配到old</p>\n<ul>\n<li>:#,#s/old/new/g - 其中#,#代表的是替换操作中的若干行中首位两行的行号，说实话，这个我也没怎么明白，实际试了一下，但是并没有明白是个什么情况😑</li>\n<li>:%s/old/new/g - 将整个文件中的old匹配并替换为new</li>\n<li>:$s/old/new/gc - 该命令会找到整个文件中的old，并且在每个old替换成new的时候进行提示</li>\n</ul>\n<h4 id=\"在vim中使用外部命令\"><a href=\"#在vim中使用外部命令\" class=\"headerlink\" title=\"在vim中使用外部命令\"></a>在vim中使用外部命令</h4><p>在使用vim编辑的时候，如果想使用外部的命令，比如使用<code>ls</code>来查看文件列表，可以输入</p>\n<blockquote>\n<p>:!ls</p>\n</blockquote>\n<p>这可以使用<code>ls</code>来查看文件列表，这个时候会跳出到vim之外，再按enter键，就会回到vim内</p>\n<h4 id=\"保存文件\"><a href=\"#保存文件\" class=\"headerlink\" title=\"保存文件\"></a>保存文件</h4><ul>\n<li>在写入文件的时候，输入<code>:w</code> 来保存文件，如果输入<code>:w FILENAME</code> 则会将你的内容以FIELNAME为文件名来保存该文件</li>\n<li>v - 按v键会进入vim的可视模式进行选取，使用hjkl移动光标来选中文本内容，按d键则会删除所选中的内容，如果按<code>:</code>则会在底部出现 <code>:&#39;&lt;,&#39;&gt;</code>，在此之后键入<code>w FILENAME</code> 则会将选中的内容以FILENAME为文件名来保存</li>\n</ul>\n<h4 id=\"文件的提取和合并\"><a href=\"#文件的提取和合并\" class=\"headerlink\" title=\"文件的提取和合并\"></a>文件的提取和合并</h4><p>如果要向当前文件插入另外的文件内容，输入</p>\n<blockquote>\n<p>:r FILENAME</p>\n</blockquote>\n<p>则FILENAME文件中的内容将从光标处插入，也可以是使用该命令来读取外部命令的输出，比如输入 <code>:r !ls</code> ，则可以将ls命令读取到的文件列表放置在光标下 </p>\n<h4 id=\"忧郁的小结\"><a href=\"#忧郁的小结\" class=\"headerlink\" title=\"忧郁的小结\"></a>忧郁的小结</h4><p>刚才写到一半去阳台放风，迎面吹来的热风，看着窗口偌大的城市，一时间想到了很多，想写到文章里面来，结果把这篇文章写完，回想一起来，发现已经忘得差不多了，嘛，毕竟we are tiny in this word。明天打算翻译一篇关于CSS的BEM命名法的文章，感觉每次写的时候命名简直就是💩一样，自己都受不了。</p>\n<p>以上。</p>\n","excerpt":"","more":"<h4 id=\"关于这周的说明\"><a href=\"#关于这周的说明\" class=\"headerlink\" title=\"关于这周的说明\"></a>关于这周的说明</h4><p>这周确实事情比较多。先是项目通宵的上线，然后又是搬家。周六又去原来房东那里退押金，检查房子什么的，不明白为什么会有这么多事情。说起来，这是第三次完成了一个人的搬家，我真是佩服我自己的。周天的时候，昏天黑地的睡到下午两点＝ ＝，我再次佩服我自己。废话不多说。继续vim的征途，这次的内容我觉得不练习个把星期是绝壁不能掌握的。</p>\n<h4 id=\"上次漏了点什么\"><a href=\"#上次漏了点什么\" class=\"headerlink\" title=\"上次漏了点什么\"></a>上次漏了点什么</h4><p>这次回头来看上次教程的时候，发现漏了两个东西</p>\n<ul>\n<li>p - p命令，就是重新置入已经删除的文本内容，该操作可以将已经删除文本内容置入光标之后，如果最后一次删除的是一整行，那么该行将置于当前光标所在的下一行，具体效果可以实际操作一下，说起来也很抽象</li>\n<li>r - 替换光标所在位置的字符。将光标移到你要替换的字符上，然后按r键，然后再键入你要替换所在光标处的字符的新字符即可。</li>\n</ul>\n<h4 id=\"文件状态\"><a href=\"#文件状态\" class=\"headerlink\" title=\"文件状态\"></a>文件状态</h4><ul>\n<li>ctrl+g - 按下该组合键后，会在底部出现一个状态信息，该信息展示了文件所在的目录以及一些额外的状态，比如光标所在的文件中的位置，即行号</li>\n<li>G - 按下大写的G可以是光标直接跳转到文件的最后一行</li>\n<li>gg - 按下gg可以使得当前光标直接跳转到文件的第一行</li>\n<li>输入行号，然后再按大写的G就可以回到该行</li>\n</ul>\n<h4 id=\"文件查找\"><a href=\"#文件查找\" class=\"headerlink\" title=\"文件查找\"></a>文件查找</h4><ul>\n<li>/ - 输入<code>/</code> 加上一个字符串，则可以以在当前文件中查找该字符串，默认为向下查找，且只查找一次，如果想继续查找相同的字符串，只需要按n键。如果要往反方向查找按大写N键即可。如果直接想玩反方向查找只需要将 <code>/</code> 换成<code>?</code> 即可</li>\n<li>ctrl+o - 可以回到之前的位置，重复按就重复回退</li>\n<li>ctrl+i - 跳转到较新的位置，这个没懂起，实际操作的时候也没啥反应，看来要在实战中试试才知道了</li>\n<li>匹配查找 - 比如想查配对的(),[],{}，将光标移动到符号上，再按下 <code>%</code> 就可以了，编程的时候尤为重要啊，这个东西</li>\n</ul>\n<h4 id=\"替换命令\"><a href=\"#替换命令\" class=\"headerlink\" title=\"替换命令\"></a>替换命令</h4><p>这里直接举例说明吧：</p>\n<blockquote>\n<p>输入<code>:s/old/new/g</code>，则可以将old替换为new</p>\n</blockquote>\n<p>其中，如果只是输入 <code>:s/old/new</code> 只会替换光标所在行的第一个匹配到的old，输入 <code>:s/old/new/g</code> 则会替换整行匹配到old</p>\n<ul>\n<li>:#,#s/old/new/g - 其中#,#代表的是替换操作中的若干行中首位两行的行号，说实话，这个我也没怎么明白，实际试了一下，但是并没有明白是个什么情况😑</li>\n<li>:%s/old/new/g - 将整个文件中的old匹配并替换为new</li>\n<li>:$s/old/new/gc - 该命令会找到整个文件中的old，并且在每个old替换成new的时候进行提示</li>\n</ul>\n<h4 id=\"在vim中使用外部命令\"><a href=\"#在vim中使用外部命令\" class=\"headerlink\" title=\"在vim中使用外部命令\"></a>在vim中使用外部命令</h4><p>在使用vim编辑的时候，如果想使用外部的命令，比如使用<code>ls</code>来查看文件列表，可以输入</p>\n<blockquote>\n<p>:!ls</p>\n</blockquote>\n<p>这可以使用<code>ls</code>来查看文件列表，这个时候会跳出到vim之外，再按enter键，就会回到vim内</p>\n<h4 id=\"保存文件\"><a href=\"#保存文件\" class=\"headerlink\" title=\"保存文件\"></a>保存文件</h4><ul>\n<li>在写入文件的时候，输入<code>:w</code> 来保存文件，如果输入<code>:w FILENAME</code> 则会将你的内容以FIELNAME为文件名来保存该文件</li>\n<li>v - 按v键会进入vim的可视模式进行选取，使用hjkl移动光标来选中文本内容，按d键则会删除所选中的内容，如果按<code>:</code>则会在底部出现 <code>:&#39;&lt;,&#39;&gt;</code>，在此之后键入<code>w FILENAME</code> 则会将选中的内容以FILENAME为文件名来保存</li>\n</ul>\n<h4 id=\"文件的提取和合并\"><a href=\"#文件的提取和合并\" class=\"headerlink\" title=\"文件的提取和合并\"></a>文件的提取和合并</h4><p>如果要向当前文件插入另外的文件内容，输入</p>\n<blockquote>\n<p>:r FILENAME</p>\n</blockquote>\n<p>则FILENAME文件中的内容将从光标处插入，也可以是使用该命令来读取外部命令的输出，比如输入 <code>:r !ls</code> ，则可以将ls命令读取到的文件列表放置在光标下 </p>\n<h4 id=\"忧郁的小结\"><a href=\"#忧郁的小结\" class=\"headerlink\" title=\"忧郁的小结\"></a>忧郁的小结</h4><p>刚才写到一半去阳台放风，迎面吹来的热风，看着窗口偌大的城市，一时间想到了很多，想写到文章里面来，结果把这篇文章写完，回想一起来，发现已经忘得差不多了，嘛，毕竟we are tiny in this word。明天打算翻译一篇关于CSS的BEM命名法的文章，感觉每次写的时候命名简直就是💩一样，自己都受不了。</p>\n<p>以上。</p>\n","sticky":0},{"title":"周报君","date":"2016-01-29T08:31:31.000Z","_content":"\n#### 半个月工作总结\n\n- 解决的问题\n> 一个做了很久的项目终于开始测试了，说来真是一个辛酸的故事。不过在测试的过程中还好，发现的bug都是一些细节的修复以及一些数据的调整和接口的调整。个人还是很倾向于Ajax开发的，可能一开始做开发的时候就是使用的Ajax，觉得这样从某些意义上实现了前后端的分离。只要把接口，数据结构商量好，我做我的页面，他写他的数据。说实话现在rap虽然能满足部分开发需求的模拟数据，但是在Ajax请求方面，特别在带有参数请求的时候，没有很好的模拟真实环境，也可能是我没怎么用好。到目前为止，前端与数据和用户的交互测试基本完成，问题也基本修复完成，支付接口的原因临时将表单提交改成Ajax提交也已经完成。\n\n- 存在的问题\n> 代码的结构和可重用性以及可维护性还有待大大的提高啊。还好当时自己写代码的时候写了部分注释，不然后面改起来可能花更多的时间。特别是代码的重用性，觉得自己做的一点都不好，重复代码较多。代码的封装在最开始的时候都是将方法暴露在全局变量里面，当然现在也是将接口暴露在全局变量里，经过后来的修改代码结构，已经将变量变为私有变量。代码执行的时候，只需要执行init()函数就可以了。\n\n- 学到的东西\n> 最重要的就是对this的理解,犹如醍醐灌顶般的理解到了。同时安利一本书《你不知道的JavaScript》。其次就是对前端模板的更多认识，这里不是指smarty，而是ejs，jade，swig等。如果对于我自身来选择的话可能会最终选择swig，因为ejs适合场景，在官网也说了适用于用JavaScript构建html字符串；Ajax；应用的封装，而jade，看过一些代码，觉得比较松散，不怎么好阅读。\n\n- 接下来的安排\n> 这次放假过后就要回学校毕业设计，时间安排是在四月中旬左右做完。也不知道为什么这么急，人家才开始做我们就要做完。最后打算使用node，express，monggodb和swig来做。还是想尝试一下NoSQL。\n","source":"_posts/weekly.md","raw":"---\ntitle: 周报君\ndate: 2016-01-29 16:31:31\ntags: mylife\ncategories: life\n---\n\n#### 半个月工作总结\n\n- 解决的问题\n> 一个做了很久的项目终于开始测试了，说来真是一个辛酸的故事。不过在测试的过程中还好，发现的bug都是一些细节的修复以及一些数据的调整和接口的调整。个人还是很倾向于Ajax开发的，可能一开始做开发的时候就是使用的Ajax，觉得这样从某些意义上实现了前后端的分离。只要把接口，数据结构商量好，我做我的页面，他写他的数据。说实话现在rap虽然能满足部分开发需求的模拟数据，但是在Ajax请求方面，特别在带有参数请求的时候，没有很好的模拟真实环境，也可能是我没怎么用好。到目前为止，前端与数据和用户的交互测试基本完成，问题也基本修复完成，支付接口的原因临时将表单提交改成Ajax提交也已经完成。\n\n- 存在的问题\n> 代码的结构和可重用性以及可维护性还有待大大的提高啊。还好当时自己写代码的时候写了部分注释，不然后面改起来可能花更多的时间。特别是代码的重用性，觉得自己做的一点都不好，重复代码较多。代码的封装在最开始的时候都是将方法暴露在全局变量里面，当然现在也是将接口暴露在全局变量里，经过后来的修改代码结构，已经将变量变为私有变量。代码执行的时候，只需要执行init()函数就可以了。\n\n- 学到的东西\n> 最重要的就是对this的理解,犹如醍醐灌顶般的理解到了。同时安利一本书《你不知道的JavaScript》。其次就是对前端模板的更多认识，这里不是指smarty，而是ejs，jade，swig等。如果对于我自身来选择的话可能会最终选择swig，因为ejs适合场景，在官网也说了适用于用JavaScript构建html字符串；Ajax；应用的封装，而jade，看过一些代码，觉得比较松散，不怎么好阅读。\n\n- 接下来的安排\n> 这次放假过后就要回学校毕业设计，时间安排是在四月中旬左右做完。也不知道为什么这么急，人家才开始做我们就要做完。最后打算使用node，express，monggodb和swig来做。还是想尝试一下NoSQL。\n","slug":"weekly","published":1,"updated":"2016-08-04T16:42:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzal0c000y4frywztlul3p","content":"<h4 id=\"半个月工作总结\"><a href=\"#半个月工作总结\" class=\"headerlink\" title=\"半个月工作总结\"></a>半个月工作总结</h4><ul>\n<li><p>解决的问题</p>\n<blockquote>\n<p>一个做了很久的项目终于开始测试了，说来真是一个辛酸的故事。不过在测试的过程中还好，发现的bug都是一些细节的修复以及一些数据的调整和接口的调整。个人还是很倾向于Ajax开发的，可能一开始做开发的时候就是使用的Ajax，觉得这样从某些意义上实现了前后端的分离。只要把接口，数据结构商量好，我做我的页面，他写他的数据。说实话现在rap虽然能满足部分开发需求的模拟数据，但是在Ajax请求方面，特别在带有参数请求的时候，没有很好的模拟真实环境，也可能是我没怎么用好。到目前为止，前端与数据和用户的交互测试基本完成，问题也基本修复完成，支付接口的原因临时将表单提交改成Ajax提交也已经完成。</p>\n</blockquote>\n</li>\n<li><p>存在的问题</p>\n<blockquote>\n<p>代码的结构和可重用性以及可维护性还有待大大的提高啊。还好当时自己写代码的时候写了部分注释，不然后面改起来可能花更多的时间。特别是代码的重用性，觉得自己做的一点都不好，重复代码较多。代码的封装在最开始的时候都是将方法暴露在全局变量里面，当然现在也是将接口暴露在全局变量里，经过后来的修改代码结构，已经将变量变为私有变量。代码执行的时候，只需要执行init()函数就可以了。</p>\n</blockquote>\n</li>\n<li><p>学到的东西</p>\n<blockquote>\n<p>最重要的就是对this的理解,犹如醍醐灌顶般的理解到了。同时安利一本书《你不知道的JavaScript》。其次就是对前端模板的更多认识，这里不是指smarty，而是ejs，jade，swig等。如果对于我自身来选择的话可能会最终选择swig，因为ejs适合场景，在官网也说了适用于用JavaScript构建html字符串；Ajax；应用的封装，而jade，看过一些代码，觉得比较松散，不怎么好阅读。</p>\n</blockquote>\n</li>\n<li><p>接下来的安排</p>\n<blockquote>\n<p>这次放假过后就要回学校毕业设计，时间安排是在四月中旬左右做完。也不知道为什么这么急，人家才开始做我们就要做完。最后打算使用node，express，monggodb和swig来做。还是想尝试一下NoSQL。</p>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"半个月工作总结\"><a href=\"#半个月工作总结\" class=\"headerlink\" title=\"半个月工作总结\"></a>半个月工作总结</h4><ul>\n<li><p>解决的问题</p>\n<blockquote>\n<p>一个做了很久的项目终于开始测试了，说来真是一个辛酸的故事。不过在测试的过程中还好，发现的bug都是一些细节的修复以及一些数据的调整和接口的调整。个人还是很倾向于Ajax开发的，可能一开始做开发的时候就是使用的Ajax，觉得这样从某些意义上实现了前后端的分离。只要把接口，数据结构商量好，我做我的页面，他写他的数据。说实话现在rap虽然能满足部分开发需求的模拟数据，但是在Ajax请求方面，特别在带有参数请求的时候，没有很好的模拟真实环境，也可能是我没怎么用好。到目前为止，前端与数据和用户的交互测试基本完成，问题也基本修复完成，支付接口的原因临时将表单提交改成Ajax提交也已经完成。</p>\n</blockquote>\n</li>\n<li><p>存在的问题</p>\n<blockquote>\n<p>代码的结构和可重用性以及可维护性还有待大大的提高啊。还好当时自己写代码的时候写了部分注释，不然后面改起来可能花更多的时间。特别是代码的重用性，觉得自己做的一点都不好，重复代码较多。代码的封装在最开始的时候都是将方法暴露在全局变量里面，当然现在也是将接口暴露在全局变量里，经过后来的修改代码结构，已经将变量变为私有变量。代码执行的时候，只需要执行init()函数就可以了。</p>\n</blockquote>\n</li>\n<li><p>学到的东西</p>\n<blockquote>\n<p>最重要的就是对this的理解,犹如醍醐灌顶般的理解到了。同时安利一本书《你不知道的JavaScript》。其次就是对前端模板的更多认识，这里不是指smarty，而是ejs，jade，swig等。如果对于我自身来选择的话可能会最终选择swig，因为ejs适合场景，在官网也说了适用于用JavaScript构建html字符串；Ajax；应用的封装，而jade，看过一些代码，觉得比较松散，不怎么好阅读。</p>\n</blockquote>\n</li>\n<li><p>接下来的安排</p>\n<blockquote>\n<p>这次放假过后就要回学校毕业设计，时间安排是在四月中旬左右做完。也不知道为什么这么急，人家才开始做我们就要做完。最后打算使用node，express，monggodb和swig来做。还是想尝试一下NoSQL。</p>\n</blockquote>\n</li>\n</ul>\n","sticky":0},{"title":"像疯了一样","date":"2016-11-28T15:27:57.000Z","_content":"\n最近有些略微浮躁，因为想学的东西实在在太多了，发现时间不够用。\n\n还是静下心来，列一个TO DO LIST（🌞），看一看自己到底想干什么。\n\n目前想学的：\n1 JavaScript（本命也是吃饭技能，虽然开始前端这个职业已经长达一年多了，但我还是不敢拍着胸脯保证说我是精通的，时间去哪儿了呢？）\n2 NodeJs （虽然归到大类里面也算是JavaScript，但是也算是一门新技术--虽然已经算不上新了，自己断断续续学过一点，但是还是缺乏实践经验）\n3 HTML5 （没错，就是HTML5，我觉得现在很多人都对这门技术存在一个字面的误解，我以前也是以为只是一个html 的新标准而已，果然还是太年轻，最近下定决心接触了一下，简直又是一个汪洋大海）\n4 Java （记得在大二大三的时候，当时还是以为自己以后会以这门语言吃饭，但是没想到半路给弃了，但是一全栈攻城狮为目标的我，现在觉得要捡起来）\n5 Unity3D （😳为什么要学这个东西，老实说，给不出什么理由，就是感兴趣，不知道我算不算一个游戏发烧者，但是大大小小的游戏也接触不少，然后玩着玩着，就想自己搞一个，契机的话还是前不久在一个游戏的讨论群，遇见一个做电视游戏--他算不上一个Coder，正巧他使用的工具，开发脚本的语言是JavaScript，当时我就兴奋了🤔）\n6 C# （相应的，学习Unity3D，对应的开发语言就是C#，虽然也是支持JavaScript，但是听说C#更友好一点。没想到，大一开始学习c++，死活没办法理解，现在好像又要捡起来了）\n7 Draw （没错，就是画画，具体来说就是兴趣所致以及相关，虽然我确实没啥美术基础，只是一个普普通通简简单单平平凡凡的理科生）\n\n然后就是目前的状况，说实话，感觉不怎么好，最近在改一个老项目的东西，代码犹如我做的第一个项目那样，让人死去活来\n1 underscore.js 的源码只有一千多行，平时在用一些碎片时间，比如坐轻轨和公交的时候再看，但是感觉效率不怎么高\n2 然后就是React，最近接的一个外包项目要做完了，十一月份，晚上的大部分时间都在做这个，虽然有钱拿，但是相对学东西的时间少了很多，还好对方没有频繁更改需求，现在进入收尾期，后面时间有了，打算晚上抽时间出来学习这个框架，平时八点左右到屋，休息一个小时，开始搞React\n3 然后就是周末了，说起来挺惭愧，虽然参加了公司的一个Java学习计划，但是节奏好像没怎么跟上，每天都是沉浸在老项目的BUG和外包中\n\n最后就是总结一下，虽然在写项目的过程中，产出了几个轮子，但是并不完善，而且我觉得有必要更改一下现在的编码风格了，以及虽然Git的基本使用差不多了，但是在知识栈上还是欠缺很多。最近看到一些东西总是在颠覆自己以前的认知，同时也在不断审视自己的价值观，希望可以变得更好。\n\n\n","source":"_posts/whatshouldido.md","raw":"---\ntitle: 像疯了一样\ndate: 2016-11-28 23:27:57\ntags:\n- mylife\ncategories:\n- mylife\n---\n\n最近有些略微浮躁，因为想学的东西实在在太多了，发现时间不够用。\n\n还是静下心来，列一个TO DO LIST（🌞），看一看自己到底想干什么。\n\n目前想学的：\n1 JavaScript（本命也是吃饭技能，虽然开始前端这个职业已经长达一年多了，但我还是不敢拍着胸脯保证说我是精通的，时间去哪儿了呢？）\n2 NodeJs （虽然归到大类里面也算是JavaScript，但是也算是一门新技术--虽然已经算不上新了，自己断断续续学过一点，但是还是缺乏实践经验）\n3 HTML5 （没错，就是HTML5，我觉得现在很多人都对这门技术存在一个字面的误解，我以前也是以为只是一个html 的新标准而已，果然还是太年轻，最近下定决心接触了一下，简直又是一个汪洋大海）\n4 Java （记得在大二大三的时候，当时还是以为自己以后会以这门语言吃饭，但是没想到半路给弃了，但是一全栈攻城狮为目标的我，现在觉得要捡起来）\n5 Unity3D （😳为什么要学这个东西，老实说，给不出什么理由，就是感兴趣，不知道我算不算一个游戏发烧者，但是大大小小的游戏也接触不少，然后玩着玩着，就想自己搞一个，契机的话还是前不久在一个游戏的讨论群，遇见一个做电视游戏--他算不上一个Coder，正巧他使用的工具，开发脚本的语言是JavaScript，当时我就兴奋了🤔）\n6 C# （相应的，学习Unity3D，对应的开发语言就是C#，虽然也是支持JavaScript，但是听说C#更友好一点。没想到，大一开始学习c++，死活没办法理解，现在好像又要捡起来了）\n7 Draw （没错，就是画画，具体来说就是兴趣所致以及相关，虽然我确实没啥美术基础，只是一个普普通通简简单单平平凡凡的理科生）\n\n然后就是目前的状况，说实话，感觉不怎么好，最近在改一个老项目的东西，代码犹如我做的第一个项目那样，让人死去活来\n1 underscore.js 的源码只有一千多行，平时在用一些碎片时间，比如坐轻轨和公交的时候再看，但是感觉效率不怎么高\n2 然后就是React，最近接的一个外包项目要做完了，十一月份，晚上的大部分时间都在做这个，虽然有钱拿，但是相对学东西的时间少了很多，还好对方没有频繁更改需求，现在进入收尾期，后面时间有了，打算晚上抽时间出来学习这个框架，平时八点左右到屋，休息一个小时，开始搞React\n3 然后就是周末了，说起来挺惭愧，虽然参加了公司的一个Java学习计划，但是节奏好像没怎么跟上，每天都是沉浸在老项目的BUG和外包中\n\n最后就是总结一下，虽然在写项目的过程中，产出了几个轮子，但是并不完善，而且我觉得有必要更改一下现在的编码风格了，以及虽然Git的基本使用差不多了，但是在知识栈上还是欠缺很多。最近看到一些东西总是在颠覆自己以前的认知，同时也在不断审视自己的价值观，希望可以变得更好。\n\n\n","slug":"whatshouldido","published":1,"updated":"2016-11-28T16:01:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yzal0d00134fry1crb2yn7","content":"<p>最近有些略微浮躁，因为想学的东西实在在太多了，发现时间不够用。</p>\n<p>还是静下心来，列一个TO DO LIST（🌞），看一看自己到底想干什么。</p>\n<p>目前想学的：<br>1 JavaScript（本命也是吃饭技能，虽然开始前端这个职业已经长达一年多了，但我还是不敢拍着胸脯保证说我是精通的，时间去哪儿了呢？）<br>2 NodeJs （虽然归到大类里面也算是JavaScript，但是也算是一门新技术–虽然已经算不上新了，自己断断续续学过一点，但是还是缺乏实践经验）<br>3 HTML5 （没错，就是HTML5，我觉得现在很多人都对这门技术存在一个字面的误解，我以前也是以为只是一个html 的新标准而已，果然还是太年轻，最近下定决心接触了一下，简直又是一个汪洋大海）<br>4 Java （记得在大二大三的时候，当时还是以为自己以后会以这门语言吃饭，但是没想到半路给弃了，但是一全栈攻城狮为目标的我，现在觉得要捡起来）<br>5 Unity3D （😳为什么要学这个东西，老实说，给不出什么理由，就是感兴趣，不知道我算不算一个游戏发烧者，但是大大小小的游戏也接触不少，然后玩着玩着，就想自己搞一个，契机的话还是前不久在一个游戏的讨论群，遇见一个做电视游戏–他算不上一个Coder，正巧他使用的工具，开发脚本的语言是JavaScript，当时我就兴奋了🤔）<br>6 C# （相应的，学习Unity3D，对应的开发语言就是C#，虽然也是支持JavaScript，但是听说C#更友好一点。没想到，大一开始学习c++，死活没办法理解，现在好像又要捡起来了）<br>7 Draw （没错，就是画画，具体来说就是兴趣所致以及相关，虽然我确实没啥美术基础，只是一个普普通通简简单单平平凡凡的理科生）</p>\n<p>然后就是目前的状况，说实话，感觉不怎么好，最近在改一个老项目的东西，代码犹如我做的第一个项目那样，让人死去活来<br>1 underscore.js 的源码只有一千多行，平时在用一些碎片时间，比如坐轻轨和公交的时候再看，但是感觉效率不怎么高<br>2 然后就是React，最近接的一个外包项目要做完了，十一月份，晚上的大部分时间都在做这个，虽然有钱拿，但是相对学东西的时间少了很多，还好对方没有频繁更改需求，现在进入收尾期，后面时间有了，打算晚上抽时间出来学习这个框架，平时八点左右到屋，休息一个小时，开始搞React<br>3 然后就是周末了，说起来挺惭愧，虽然参加了公司的一个Java学习计划，但是节奏好像没怎么跟上，每天都是沉浸在老项目的BUG和外包中</p>\n<p>最后就是总结一下，虽然在写项目的过程中，产出了几个轮子，但是并不完善，而且我觉得有必要更改一下现在的编码风格了，以及虽然Git的基本使用差不多了，但是在知识栈上还是欠缺很多。最近看到一些东西总是在颠覆自己以前的认知，同时也在不断审视自己的价值观，希望可以变得更好。</p>\n","excerpt":"","more":"<p>最近有些略微浮躁，因为想学的东西实在在太多了，发现时间不够用。</p>\n<p>还是静下心来，列一个TO DO LIST（🌞），看一看自己到底想干什么。</p>\n<p>目前想学的：<br>1 JavaScript（本命也是吃饭技能，虽然开始前端这个职业已经长达一年多了，但我还是不敢拍着胸脯保证说我是精通的，时间去哪儿了呢？）<br>2 NodeJs （虽然归到大类里面也算是JavaScript，但是也算是一门新技术–虽然已经算不上新了，自己断断续续学过一点，但是还是缺乏实践经验）<br>3 HTML5 （没错，就是HTML5，我觉得现在很多人都对这门技术存在一个字面的误解，我以前也是以为只是一个html 的新标准而已，果然还是太年轻，最近下定决心接触了一下，简直又是一个汪洋大海）<br>4 Java （记得在大二大三的时候，当时还是以为自己以后会以这门语言吃饭，但是没想到半路给弃了，但是一全栈攻城狮为目标的我，现在觉得要捡起来）<br>5 Unity3D （😳为什么要学这个东西，老实说，给不出什么理由，就是感兴趣，不知道我算不算一个游戏发烧者，但是大大小小的游戏也接触不少，然后玩着玩着，就想自己搞一个，契机的话还是前不久在一个游戏的讨论群，遇见一个做电视游戏–他算不上一个Coder，正巧他使用的工具，开发脚本的语言是JavaScript，当时我就兴奋了🤔）<br>6 C# （相应的，学习Unity3D，对应的开发语言就是C#，虽然也是支持JavaScript，但是听说C#更友好一点。没想到，大一开始学习c++，死活没办法理解，现在好像又要捡起来了）<br>7 Draw （没错，就是画画，具体来说就是兴趣所致以及相关，虽然我确实没啥美术基础，只是一个普普通通简简单单平平凡凡的理科生）</p>\n<p>然后就是目前的状况，说实话，感觉不怎么好，最近在改一个老项目的东西，代码犹如我做的第一个项目那样，让人死去活来<br>1 underscore.js 的源码只有一千多行，平时在用一些碎片时间，比如坐轻轨和公交的时候再看，但是感觉效率不怎么高<br>2 然后就是React，最近接的一个外包项目要做完了，十一月份，晚上的大部分时间都在做这个，虽然有钱拿，但是相对学东西的时间少了很多，还好对方没有频繁更改需求，现在进入收尾期，后面时间有了，打算晚上抽时间出来学习这个框架，平时八点左右到屋，休息一个小时，开始搞React<br>3 然后就是周末了，说起来挺惭愧，虽然参加了公司的一个Java学习计划，但是节奏好像没怎么跟上，每天都是沉浸在老项目的BUG和外包中</p>\n<p>最后就是总结一下，虽然在写项目的过程中，产出了几个轮子，但是并不完善，而且我觉得有必要更改一下现在的编码风格了，以及虽然Git的基本使用差不多了，但是在知识栈上还是欠缺很多。最近看到一些东西总是在颠覆自己以前的认知，同时也在不断审视自己的价值观，希望可以变得更好。</p>\n","sticky":0}],"PostAsset":[],"PostCategory":[{"post_id":"cj0yzakzc00034fry620lwprq","category_id":"cj0yzakzn00054fry3toyc4kh","_id":"cj0yzakzu000e4fry74xtb15e"},{"post_id":"cj0yzakzp00094fryy2e150zv","category_id":"cj0yzakzr000c4fryrgy3vhgd","_id":"cj0yzal02000n4fryomhxlb5q"},{"post_id":"cj0yzakzr000d4fry24ccfr21","category_id":"cj0yzakzz000i4fry3ckrgdac","_id":"cj0yzal08000u4fryz66uid5m"},{"post_id":"cj0yzakzu000f4fryb25wxf3f","category_id":"cj0yzal04000p4fryw2qsoa3y","_id":"cj0yzal0d00104fry2a7ynukv"},{"post_id":"cj0yzakzy000h4fryx6kxwefd","category_id":"cj0yzakzz000i4fry3ckrgdac","_id":"cj0yzal0e00144fryo7hflj2y"},{"post_id":"cj0yzal0d00134fry1crb2yn7","category_id":"cj0yzakzz000i4fry3ckrgdac","_id":"cj0yzal0f00184frybcb5d4rw"},{"post_id":"cj0yzal00000k4fryojauzqd7","category_id":"cj0yzal0d00114fryc6u6r2yk","_id":"cj0yzal0g001a4frye7ai58pd"},{"post_id":"cj0yzal02000o4fryvmx6ljfp","category_id":"cj0yzal0f00164fryd2qi1tc2","_id":"cj0yzal0h001c4fryr4fknyu9"},{"post_id":"cj0yzal05000r4fryr3km4mtz","category_id":"cj0yzal0g001b4frywynqx0bm","_id":"cj0yzal0i001h4fryym3hbumg"},{"post_id":"cj0yzal0c000y4frywztlul3p","category_id":"cj0yzal0h001e4fryfjv0likj","_id":"cj0yzal0i001k4fryb1o8mego"}],"PostTag":[{"post_id":"cj0yzakz300004frymsxcpq7z","tag_id":"cj0yzakz900024frym7kwlpwy","_id":"cj0yzakzp00084fry1iip77x2"},{"post_id":"cj0yzakz700014fryhd9rvevi","tag_id":"cj0yzakzn00064frybzym56pu","_id":"cj0yzakzz000j4fryoryyjbcb"},{"post_id":"cj0yzakz700014fryhd9rvevi","tag_id":"cj0yzakzr000b4frykhfczzha","_id":"cj0yzal02000l4fryxw18r22l"},{"post_id":"cj0yzakzc00034fry620lwprq","tag_id":"cj0yzakzy000g4fryphgid4wz","_id":"cj0yzal05000q4fryl7nrjp8y"},{"post_id":"cj0yzakzk00044fryiq15a5qz","tag_id":"cj0yzal02000m4frypgqjie62","_id":"cj0yzal0a000w4fry8ogt6zxy"},{"post_id":"cj0yzakzo00074frybya0j332","tag_id":"cj0yzal07000s4fryf3d6k4sg","_id":"cj0yzal0d00124frysjpr7cfs"},{"post_id":"cj0yzakzp00094fryy2e150zv","tag_id":"cj0yzal0d000z4fryuvnmmxgu","_id":"cj0yzal0f00174frypikknyzc"},{"post_id":"cj0yzakzq000a4fryeptxh2t2","tag_id":"cj0yzal0f00154fryd97c1zdl","_id":"cj0yzal0i001f4fryn79xv9yc"},{"post_id":"cj0yzakzq000a4fryeptxh2t2","tag_id":"cj0yzal0f00194frydbwpzz7m","_id":"cj0yzal0i001g4fryfu65khsj"},{"post_id":"cj0yzakzr000d4fry24ccfr21","tag_id":"cj0yzal0h001d4fryhe3zwdtl","_id":"cj0yzal0i001j4frynhnpgyn1"},{"post_id":"cj0yzakzu000f4fryb25wxf3f","tag_id":"cj0yzal0i001i4fryxzyp2aai","_id":"cj0yzal0k001p4frypi5ncxyz"},{"post_id":"cj0yzakzu000f4fryb25wxf3f","tag_id":"cj0yzal0i001l4fryiifxvbk0","_id":"cj0yzal0k001q4fryau0tfxfx"},{"post_id":"cj0yzakzu000f4fryb25wxf3f","tag_id":"cj0yzal0i001m4fryr0c7yxlm","_id":"cj0yzal0k001s4fry59l0k4ab"},{"post_id":"cj0yzakzu000f4fryb25wxf3f","tag_id":"cj0yzal0j001n4frytc26gnp0","_id":"cj0yzal0k001t4fryyzaik3ip"},{"post_id":"cj0yzakzy000h4fryx6kxwefd","tag_id":"cj0yzal0h001d4fryhe3zwdtl","_id":"cj0yzal0k001v4fry4rcb7vi1"},{"post_id":"cj0yzal00000k4fryojauzqd7","tag_id":"cj0yzal0k001r4fryd9v9jx6r","_id":"cj0yzal0k001w4fryux0uopwv"},{"post_id":"cj0yzal02000o4fryvmx6ljfp","tag_id":"cj0yzal0k001u4fryjnsdy6bj","_id":"cj0yzal0l001y4frymf5kuf64"},{"post_id":"cj0yzal05000r4fryr3km4mtz","tag_id":"cj0yzal0l001x4fryxtwpttlx","_id":"cj0yzal0m00204fryxybtc8fb"},{"post_id":"cj0yzal08000t4fry7s3tt4vw","tag_id":"cj0yzal0d000z4fryuvnmmxgu","_id":"cj0yzal0n00224fryiitpzxjf"},{"post_id":"cj0yzal0b000x4fry2i4cpx5y","tag_id":"cj0yzal0d000z4fryuvnmmxgu","_id":"cj0yzal0n00244fry1upzjk8n"},{"post_id":"cj0yzal0c000y4frywztlul3p","tag_id":"cj0yzal0h001d4fryhe3zwdtl","_id":"cj0yzal0p00264fry0jwr3m79"},{"post_id":"cj0yzal0d00134fry1crb2yn7","tag_id":"cj0yzal0h001d4fryhe3zwdtl","_id":"cj0yzal0p00274fry081zs9nd"}],"Tag":[{"name":"BEM","_id":"cj0yzakz900024frym7kwlpwy"},{"name":"EDM","_id":"cj0yzakzn00064frybzym56pu"},{"name":"rule","_id":"cj0yzakzr000b4frykhfczzha"},{"name":"SVN","_id":"cj0yzakzy000g4fryphgid4wz"},{"name":"bigpipe","_id":"cj0yzal02000m4frypgqjie62"},{"name":"my life","_id":"cj0yzal07000s4fryf3d6k4sg"},{"name":"vim","_id":"cj0yzal0d000z4fryuvnmmxgu"},{"name":"node","_id":"cj0yzal0f00154fryd97c1zdl"},{"name":"express","_id":"cj0yzal0f00194frydbwpzz7m"},{"name":"mylife","_id":"cj0yzal0h001d4fryhe3zwdtl"},{"name":"hexo","_id":"cj0yzal0i001i4fryxzyp2aai"},{"name":"duoshuo","_id":"cj0yzal0i001l4fryiifxvbk0"},{"name":"搭建自己的博客","_id":"cj0yzal0i001m4fryr0c7yxlm"},{"name":"GitHub Pages","_id":"cj0yzal0j001n4frytc26gnp0"},{"name":"promise","_id":"cj0yzal0k001r4fryd9v9jx6r"},{"name":"react","_id":"cj0yzal0k001u4fryjnsdy6bj"},{"name":"smarty","_id":"cj0yzal0l001x4fryxtwpttlx"}]}}